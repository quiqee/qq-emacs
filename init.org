#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el :comments org
#+DATE:  <2016-01-25 Mon>

#+TITLE: Emacs configuration file
#+AUTHOR: QuiQee

* About
   This is an Emacs configuration file written in =org-mode=. There are a few
   reasons why I wanted to do this. I wanted to learn =org-mode=, one way to do
   this is by practicing on file I'm often work with. I just started using emacs
   a couple of weeks ago. When I saw an Emacs configuration done in =org-mode=,
   I knew this is what I wanted to do. This way I could gain more knowledge of
   Emacs as I added new stuff here from where ever I can gather from the web.

   *This is live document, always work in progress*

** How does it work?
   =org-mode= support code block exports through a process called =tangle=. This
   document have a global setting that will enable =tangle= on all code block
   except for code block marked with =:tangle no=. The resulting code is stored
   in =~/.emacs.d/init.el=. A compiled code will also be produced. Take a look
   at [[Tangling Function]] for more details.

   You can find more information about *Literate Programming* and *org-mode*
   here:
   [[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming]]

* Basic
** Meta
*** Packages
   =Cask= is my choice of package manager for emacs. Plenty other package
   manager exist for emacs now. But =cask= fits my need quite well.

   #+BEGIN_SRC emacs-lisp
     (require 'cask "~/.emacs.d/extern/cask/cask.el")
     (cask-initialize)
   #+END_SRC

   Cask packages configuration for Mac OS X: [[file:Cask-mac][Cask]]
   For Linux: [[file:Cask-linux][Cask]]

*** Tangling Function
   Emacs can only load =.el=-files. We can use =C-c C-v t= to run
   =org-babel-tangle=, which extracts the code blocks from the current file
   into a source-specific file (in this case a =.el=-file).

   To avoid doing this each time a change is made we can add a function to
   the =after-save-hook= ensuring to always tangle and byte-compile the
   =org=-document after changes.

   #+BEGIN_SRC emacs-lisp
     (defun qq/tangle-init ()
       "If the current buffer is 'init.org' the code-blocks are
                 tangled, and the tangled file is compiled."
       (when (or
              (equal (buffer-file-name)
                     (expand-file-name (concat user-emacs-directory "init.org")))
              (equal (buffer-file-name)
                     (expand-file-name "~/Documents/git/qq-emacs/init.org")))
            (org-babel-tangle)
            (setq org-confirm-babel-evaluate nil)
            (byte-compile-file (concat user-emacs-directory "init.el"))
            (alert "Init file is compiled")))

     (add-hook 'after-save-hook 'qq/tangle-init)
   #+END_SRC

   #+RESULTS:
   : byte-compile-file

   To export to other format, just press =C-c C-e=, which will display further
   option to choose output format like HTML, PDF or LaTeX.

*** Personal Custom group
   Create a custom group to group any custom variable so it will not
   polute built in variable space

   #+BEGIN_SRC emacs-lisp
     (defgroup qq nil
       "Personal Custom configuration."
       ;:type '(string)
       :group 'local)
   #+END_SRC

   Add a cache-directory root folder custom variable

   #+BEGIN_SRC emacs-lisp
     (defcustom qq/cache-directory
       (concat user-emacs-directory ".cache/")
       "The storage location for various persistent files."
       :type '(string)
       :group 'qq)
   #+END_SRC

*** Custom =load-path=
   The variable =load-path= lists all the directories where Emacs should look
   for Elisp files. The first file found is used, therefore the order of the
   directories is relevant.

   =load-path= is documented in the [[info:emacs#Lisp%20Libraries][Emacs Manual]] or [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Libraries.html][Emacs Online Manual]], in
   chapter *Libraries of Lisp Code for Emacs*. Useful tips are also on
   [[http://www.emacswiki.org/emacs/LoadPath][EmacsWiki]].

   #+BEGIN_SRC emacs-lisp
     (let ((default-directory (concat user-emacs-directory "elisp")))
       (unless (file-exists-p default-directory)
         (make-directory default-directory))
       (add-to-list 'load-path default-directory))
   #+END_SRC

Here we create the directory =~/.emacs.d/elisp= if it does not exist, add it to
the =load-path=. Doing that any =.el= or =.elc= files in this directory can be
required from *emacs*.

*** Miscelaneaus Macros & Functions
   Convenient macro to allow processing after checking existing pre-condition

   #+BEGIN_SRC emacs-lisp
     (defmacro after (feature &rest body)
                    "After FEATURE is loaded, evaluate BODY."
                    (declare (indent defun))
                    `(eval-after-load ,feature
                       '(progn ,@body)))
   #+END_SRC

*** Custom Cache
   By default, Emacs saves the options you set via the `customize-*` functions
   in the user init file, which is “~/.emacs.d/init.el” in this setup. I prefer
   to have it put that data in a seperate file.

   Set custom file config to store any cutomized settings. Create one when not
   exist.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (concat user-emacs-directory "custom.el"))
     (when (file-exists-p custom-file)
       (load custom-file))
   #+END_SRC

*** Keybinding Generation
   The code for the keys is generated from data in a named Org table, i.e.
   =keys= using a bit of Elisp code =gen-keys= and is spit out inside a code
   block via [[http://orgmode.org/manual/noweb.html][Noweb syntax]]. I'd like to be able to have only one place to change
   key information and have it updated wherever necessary. First, we need to
   create custom macros.

   #+BEGIN_SRC emacs-lisp
     (require 'bind-key)
     (defmacro bind (&rest commands)
       "Convience macro which creates a lambda interactive command."
       `(lambda ()
          (interactive)
          ,@commands))

     (defun qq/goto-scratch-buffer ()
       "Create a new scratch buffer."
       (interactive)
       (switch-to-buffer (get-buffer-create "*scratch*"))
       (emacs-lisp-mode))

     ;; mouse scrolling in terminal
     (unless (display-graphic-p)
       (global-set-key [mouse-4] (bind (scroll-down 1)))
       (global-set-key [mouse-5] (bind (scroll-up 1))))
   #+END_SRC


   We need to turn the mode on here so that we can map keys further below. We
   lower the delay so that chords are not triggered too easily.

   #+NAME: gen-keys
   #+BEGIN_SRC emacs-lisp :var tname=1 :var mvar="" :var mmap="" :var moda="" :results output :tangle no :exports none :colnames yes
     (mapcar (lambda (l)
               (unless (string-match "^<[[:digit:]]+>$" (format "%s" (car l)))
                 (let* ((key (car l))
                        (usemap (string< "" (format "%s" mmap)))
                        (map (if usemap
                                      (cond ((string= (format "%s" mmap) "t") (nth 1 l))
                                        ((string= (format "%s" mmap) "ev-nor") "evil-normal-state-map")
                                        ((string= (format "%s" mmap) "ev-mot") "evil-motion-state-map")
                                        ((string= (format "%s" mmap) "ev-vis") "evil-visual-state-map")
                                        ((string= (format "%s" mmap) "mvar") mvar)
                                        (t (format "%s" mmap))) nil))
                        (def (cond ((string= (format "%s" moda) "key")
                                    (format "key-chord-define-global \"%s\"" key))
                                   ((string= (format "%s" moda) "normalmap")
                                    (format "evil-define-key 'normal %s (kbd \"%s\")" mvar key))
                                   ((string= (format "%s" moda) "evilmap")
                                    (format "evil-define-key '%s %s (kbd \"%s\")" (nth 1 l) mvar key))
                                   ((string= (format "%s" moda) "evil")
                                    (format "evil-define-key '%s %s (kbd \"%s\")" (nth 2 l) (nth 1 l) key))
                                   ((string= (format "%s" moda) "lead")
                                    (format "\"%s\"" key))
                                   ((string= (format "%s" moda) "xvil")
                                    (format "evil-ex-define-cmd \"%s\"" key))
                                   ((string= (format "%s" key) "[escape]")
                                    (format "bind-key %s" key))
                                   (t (format "bind-key \"%s\"" key))))
                        (command (car (last l))))
                   (if usemap
                       (princ (format "(%s %s %s)\n" def command map))
                       (if (string= (format "%s" moda) "lead")
                           (princ (format "%s %s\n" def command map))
                         (princ (format "(%s %s)\n" def command)))
                     ))))
             tname)
   #+END_SRC

   Another function for generating key for Guide-Key

   #+NAME: gen-guide-keys
   #+BEGIN_SRC emacs-lisp :var keys=guide_keys :results output :tangle no :exports none :colnames yes
     (princ "(setq guide-key/guide-key-sequence '(" )
     (mapcar (lambda (l)
                (princ (format "\"%s\" " (car l))))
             keys)
     (princ "))\n" )
   #+END_SRC

   Utility function for keys generation, this portion will add pre/post code

   #+NAME: gen-fix
   #+BEGIN_SRC emacs-lisp :var pre="" :var pos="" :result output :tangle no :exports none :colnames yes
     (let* ((beg (format "%s" pre))
            (las (format "%s" pos)))
       (if (string< "" beg) (princ (format "(%s" beg))
         (princ las)))
   #+END_SRC

** Site-Specific
*** Common

   #+begin_src emacs-lisp
     (setq qq/shell-prog "/bin/bash")
     (setq qq/preferred-font "PragmataPro-12")
   #+end_src

*** Work Build Server

   #+BEGIN_SRC emacs-lisp
     (defvar qq/system-name system-name)
     (cond
      ((string-equal qq/system-name "firmware-OptiPlex-7010") ; Greenwave Build Server
       (progn
   #+END_SRC

**** Fonts

   #+begin_src emacs-lisp
     (setq qq/preferred-font "PragmataPro-9")
   #+end_src

**** C-Headers path
    Used by =company-c-headers=

   #+BEGIN_SRC emacs-lisp
     (defvar qq/c-headers-path "/usr/include/c++/4.8.4")
   #+END_SRC

**** Gerrit Identitiy
    Used by =company-c-headers=

   #+BEGIN_SRC emacs-lisp
     (defvar qq/gerrit-creds "fpribadi@gitgerrit-01.greenwavereality.eu")
   #+END_SRC

**** LibClang path

   #+BEGIN_SRC emacs-lisp
     (exec-path-from-shell-copy-env "LD_LIBRARY_PATH")
     (setq exec-path (append exec-path '("/home/fikri/local/lib")))
   #+END_SRC

**** End
   #+BEGIN_SRC emacs-lisp
     ))
   #+END_SRC

*** Mac Pro @home
   #+BEGIN_SRC emacs-lisp
      ((string-equal system-type "darwin") ; Mac OS X
       (progn
         (message "Mac OS X")
   #+END_SRC

**** Fonts

   #+begin_src emacs-lisp
     (setq qq/preferred-font "PragmataPro-14")
   #+end_src

**** Fix Powerline color issue

   #+BEGIN_SRC emacs-lisp
     (setq ns-use-srgb-colorspace nil)
   #+END_SRC

**** Company-Sourcekit

   #+BEGIN_SRC emacs-lisp
     (after 'company
       (add-to-list 'company-backends 'company-sourcekit))
   #+END_SRC
**** Gerrit Identitiy
    Used by =company-c-headers=. left empty as gerrit is not used @home

   #+BEGIN_SRC emacs-lisp
     (defvar qq/gerrit-creds "")
   #+END_SRC

**** More sane scrolling with OS X mouse/trackpad

   #+BEGIN_SRC emacs-lisp
     (global-set-key [wheel-down] (lambda () (interactive) (scroll-up-command 1)))
     (global-set-key [wheel-up] (lambda () (interactive) (scroll-down-command 1)))
     (global-set-key [double-wheel-down] (lambda () (interactive) (scroll-up-command 2)))
     (global-set-key [double-wheel-up] (lambda () (interactive) (scroll-down-command 2)))
     (global-set-key [triple-wheel-down] (lambda () (interactive) (scroll-up-command 4)))
     (global-set-key [triple-wheel-up] (lambda () (interactive) (scroll-down-command 4)))
   #+END_SRC

**** =alert= notifier

   #+BEGIN_SRC emacs-lisp
     (setq alert-default-style 'notifier)
   #+END_SRC

**** Modifier keys
   =C-= means =Control= in combination with another key, eg =C-x= means =Ctrl + x=
   =M-= means =Meta= in combination with another key. This is usually =Alt=,
   or ⌘ on OS X (by default). =Esc= also serves as =Meta= if it’s not separately
   bound. On OS X I want to use left ⌥ for =Meta=, and leave right ⌥ alone:

   #+begin_src emacs-lisp
       (setq ns-alternate-modifier 'meta)
       (setq ns-right-alternate-modifier nil)
   #+end_src

   =s-= means =super= key. On OS X I want this to be ⌘:

   #+begin_src emacs-lisp
       (setq ns-command-modifier 'super)
   #+end_src

   =H-= means =hyper= key. On OS X I want this to be fn:

   #+begin_src emacs-lisp
       (setq ns-function-modifier 'hyper)
   #+end_src

**** Shell program

   #+begin_src emacs-lisp
     (setq qq/shell-prog "/usr/local/bin/fish")
   #+end_src

**** Host name mangling
   Typically OS X hosts are called things like hostname.localconfig or
   hostname.local. Make Emacs report that without the extra suffix:

   #+begin_src emacs-lisp
       (setq system-name (car (split-string system-name "\\.")))
   #+end_src

**** Spelling correction
   =ispell= isn’t generally available on OS X. =aspell= is available via =Homebrew=,
   so let’s use that if we can find it:

   #+begin_src emacs-lisp
     (when (executable-find "aspell")
         (setq ispell-program-name (executable-find "aspell")))
   #+end_src

**** dired fixes
   OS X’s bundled version of ls isn’t the GNU one, so it doesn’t support the
   --dired flag. Emacs caters for that use case:

   #+begin_src emacs-lisp
     (setq dired-use-ls-dired nil)
   #+end_src

**** Get keychain password
   If I’m on OS X, I can fetch passwords etc. from my Keychain. This is much
   more secure than storing them in configuration on disk:

   #+begin_src emacs-lisp
     (defun qq/chomp (str)
       "Chomp leading and tailing whitespace from `str'."
       (while (string-match "\\`\n+\\|^\\s-+\\|\\s-+$\\|\n+\\'" str)
         (setq str (replace-match "" t t str))) str)

     (defun qq/get-keychain-password (account-name)
       "Get `account-name' keychain password from OS X Keychain"
       (interactive "sAccount name: ")
       (when (executable-find "security")
         (qq/chomp
          (shell-command-to-string
           (concat
            "security find-generic-password -wa "
            account-name)))))
   #+end_src
**** End
   #+BEGIN_SRC emacs-lisp
     ))
   #+END_SRC
*** Work Laptop

   #+BEGIN_SRC emacs-lisp
     ((or (string-equal qq/system-name "ThinkPad-440SSD")
          (string-equal qq/system-name "ThinkPad-E440")) ; Lenovo Thinkpad
      (progn
        (message "Lenovo Thinkpad")
   #+END_SRC

**** Fonts

   #+begin_src emacs-lisp
     (setq qq/preferred-font "PragmataPro-9")
   #+end_src

**** =alert= notifier

   #+BEGIN_SRC emacs-lisp
     (setq alert-default-style 'libnotify)
   #+END_SRC

**** Gerrit Identitiy
    Used by =company-c-headers=

   #+BEGIN_SRC emacs-lisp
     (defvar qq/gerrit-creds "fpribadi@gitgerrit-02.greenwavereality.eu")
   #+END_SRC

**** End
   #+BEGIN_SRC emacs-lisp
     ))
   #+END_SRC

*** Other Sites
   #+BEGIN_SRC emacs-lisp
      ((string-equal system-type "gnu/linux") ; linux
       (progn
         (message "Linux")
   #+END_SRC

**** End
   #+BEGIN_SRC emacs-lisp
     )))
   #+END_SRC

** Settings
*** Require
   Some features are not loaded by default to minimize initialization time,
   so they have to be required (or loaded, if you will). =require= calls
   tends to lead to the largest bottleneck's in a
   configuration. =idle-reqire= delays the =require=-calls to a time where
   Emacs is in idle. So this is great for stuff you eventually want to load,
   but is not a high priority.

   #+BEGIN_SRC emacs-lisp
     (dolist (feature
              '(
                auto-compile          ; auto-compile .el files
                diminish
                git-timemachine   ; walkthrough git revisions of a file
                hlinum                ; highlight current line in line number column
                region-state
                saveplace
                spaceline-config
                ))
       (require feature))
   #+END_SRC

*** Backups
**** Set up some directories to keep backups and tell emacs to use it

   #+BEGIN_SRC emacs-lisp
     (defvar autosave-dir
       (concat qq/cache-directory "backups/"))
     (defun auto-save-file-name-p (filename)
       (string-match "^#.*#$" (file-name-nondirectory filename)))
   #+END_SRC

**** Set up file naming convention to use for backup files
   For more info refer [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Save-Files.html][here]]

   #+BEGIN_SRC emacs-lisp
     (defun make-auto-save-file-name ()
       (concat autosave-dir
               (if buffer-file-name
                   (concat "#" (file-name-nondirectory buffer-file-name) "#")
                 (expand-file-name
          (concat "#%" (buffer-name) "#")))))
   #+END_SRC

**** Always copy files when backing up to avoid breaking symlinks:

   #+BEGIN_SRC emacs-lisp
     (setq backup-by-copying t)
   #+END_SRC

**** Delete old versions automatically, and keep a limited number around:

   #+BEGIN_SRC emacs-lisp
     (setq delete-old-versions t
           kept-new-versions 2
           kept-old-versions 2)
   #+END_SRC

**** Finally, use version numbers in the filenames:

   #+BEGIN_SRC emacs-lisp
     (setq version-control t)
   #+END_SRC

*** Custom variables

   #+BEGIN_SRC emacs-lisp
     (defvar best-gc-cons-threshold 4000000 "Best default gc threshold value. Shouldn't be too big.")
   #+END_SRC

*** Setq

   #+BEGIN_SRC emacs-lisp
     (setq default-input-method "TeX"                   ; Use TeX when toggeling input method.
           doc-view-continuous t                        ; At page edge goto next/previous.
           global-mark-ring-max 128
           ring-bell-function 'ignore                   ; Quiet.
           mark-ring-max 64
           sentence-end-double-space nil
           save-interprogram-paste-before-kill t
           history-delete-duplicates t
   #+END_SRC

**** Emacs Garbage Collector
   We don't really need to garbage collect as frequently as Emacs would like to
   by default, so set the threshold up hight.

   #+begin_src emacs-lisp
           gc-cons-threshold best-gc-cons-threshold
   #+end_src

**** Startup behaviour
   Inhibit some of those annoying startup display.

   #+BEGIN_SRC emacs-lisp
           inhibit-splash-screen t
           inhibit-startup-echo-area-message t
           inhibit-startup-message t                    ; No splash screen please.
           initial-scratch-message nil                 ; Clean scratch buffer.
   #+END_SRC

**** Auto split vertically

   #+BEGIN_SRC emacs-lisp
           split-height-threshold 0
           split-width-threshold nil
   #+END_SRC

**** Better scrolling

   #+BEGIN_SRC emacs-lisp
           scroll-conservatively 9999
           scroll-preserve-screen-position t
   #+END_SRC

**** Activate default value of =C= or =R= commands to another dired window.

   #+BEGIN_SRC emacs-lisp
           dired-dwim-target t
   #+END_SRC

**** Echo commands quicker than the default 1 second

   #+begin_src emacs-lisp
           echo-keystrokes 0.1
   #+end_src

**** Ignore case when using completion for file names

   #+begin_src emacs-lisp
           read-file-name-completion-ignore-case t
           read-buffer-completion-ignore-case t
   #+end_src

**** Hide the mouse while typing

   #+begin_src emacs-lisp
           make-pointer-invisible t
   #+end_src

**** Long Line movement
   It's so much easier to move around lines based on how they are displayed,
   rather than the actual line. This helps a tone with long log file lines that
   may be wrapped:

   #+begin_src emacs-lisp
           line-move-visual t
   #+end_src

**** Set the internal calculator not to go to scientific form

   #+begin_src emacs-lisp
           calc-display-sci-low -5
   #+end_src

**** Better buffer names for duplicates

   #+BEGIN_SRC emacs-lisp
           uniquify-buffer-name-style 'reverse
           uniquify-separator "|"
           uniquify-ignore-buffers-re "^\\*" ; leave special buffers alone
           uniquify-after-kill-buffer-p t
   #+END_SRC

**** Security
   Tells the auth-source library to store netrc file here: [[file:~/.emacs.d/authinfo.gpg::testt][authinfo.gpg]]

   #+begin_src emacs-lisp
           epg-gpg-program "/usr/local/bin/gpg"
           auth-sources '((:source "~/.emacs.d/authinfo.gpg"))
   #+end_src

**** Save-place
   If emacs is slow to exit after enabling saveplace, you may be running afoul
   of save-place-forget-unreadable-files. On exit, it checks that every loaded
   file is readable before saving its buffer position - potentially very slow if
   you use NFS.

   #+BEGIN_SRC emacs-lisp
           save-place-forget-unreadable-files nil
   #+END_SRC

**** Other Temporary files
   To avoid file system clutter we put all auto saved files in a single
   directory

   #+BEGIN_SRC emacs-lisp
           abbrev-file-name
              (concat qq/cache-directory "abbrev_defs") ; cache for abbrev_defs
           save-place-file
              (concat qq/cache-directory "places")      ; cache for save-place
           savehist-file
              (concat qq/cache-directory "savehist")    ; cache for minibuffer history
           savehist-additional-variables
              '(search ring regexp-search-ring)
           recentf-save-file
              (concat qq/cache-directory "recentf")     ; cache folder for recently open files
           recentf-max-saved-items 1000                 ; maximum saved items in recentf
           recentf-max-menu-items 500
           ido-save-directory-list-file
              (concat qq/cache-directory "ido.last")

           eshell-directory-name
              (concat  qq/cache-directory "eshell" )

           projectile-cache-file
              (concat  qq/cache-directory "projectile.cache" )

           helm-dash-docsets-path
              (concat  qq/cache-directory "docsets" )

           persp-save-dir
              (concat  qq/cache-directory "persp-conf/")

           smex-save-file
              (concat  qq/cache-directory "smex-items")

           nsm-settings-file
              (concat  qq/cache-directory "network-security.data")

           image-dired-dir
              (concat  qq/cache-directory "image-dired")

           projectile-known-projects-file
              (concat  qq/cache-directory "projectile-bookmarks.eld")

           company-statistics-file
              (concat  qq/cache-directory "company-statistics-cache.el")

           bookmark-default-file
              (concat qq/cache-directory "bookmarks")   ; cache for bookmark
           backup-directory-alist
           `(("." . ,(concat qq/cache-directory "backups")))
           auto-save-file-name-transforms
           `(("." ,(concat qq/cache-directory "backups/") t))
           auto-save-list-file-prefix
           (concat qq/cache-directory "auto-save-list/saves-")

           delete-auto-save-files t
   #+END_SRC

   #+RESULTS:
   : t

**** Don't want to answer yes everytime

   #+BEGIN_SRC emacs-lisp
           save-abbrevs 'silently
   #+END_SRC

**** Don't display if there's no function to display

   #+BEGIN_SRC emacs-lisp
           which-func-unknown ""
   #+END_SRC

**** Interval between save in seconds

   #+BEGIN_SRC emacs-lisp
           savehist-autosave-interval 60
   #+END_SRC

**** Autosave bookmark on each change

   #+BEGIN_SRC emacs-lisp
           bookmark-save-flag 1
   #+END_SRC

**** Most UNIX tools work best when there’s a trailing newline on all files.

   #+begin_src emacs-lisp
           require-final-newline t
   #+end_src

**** Re-builder, nice interactive tool for building regular expressions

   #+BEGIN_SRC emacs-lisp
           reb-re-syntax 'string)                       ; fix backslash madness
   #+END_SRC

*** Setq-Defaults
   Some variables are buffer-local, so changing them using =setq= will only
   change them in a single buffer. Using =setq-default= we change the
   buffer-local variable's default value.

**** Maximum line width.

   #+BEGIN_SRC emacs-lisp
     (setq-default fill-column 80
   #+END_SRC

**** Use spaces instead of tabs.

   #+BEGIN_SRC emacs-lisp
                   indent-tabs-mode nil
   #+END_SRC

**** Default-tab

   #+BEGIN_SRC emacs-lisp
                   tab-width 4
   #+END_SRC

**** Split verticaly by default.

   #+BEGIN_SRC emacs-lisp
                   split-width-threshold 100
   #+END_SRC

**** Savehist history length

   #+BEGIN_SRC emacs-lisp
                   history-length 1000
   #+END_SRC

**** Proced
   Display all processes, not just my own processes

   #+BEGIN_SRC emacs-lisp
                   proced-filter 'all
   #+END_SRC

**** Auto rescan buffer contents
   Automatically rescan the buffer contents so that new jump targets appear in
   the menu as they are added

   #+BEGIN_SRC emacs-lisp
                   imenu-auto-rescan t)
   #+END_SRC

*** Remember cursor position

   #+BEGIN_SRC emacs-lisp
     (if (version< emacs-version "25.0")
         (progn
           (require 'saveplace)
           (setq-default save-place t))
       (save-place-mode 1))
   #+END_SRC

*** Turn on auto-fill mode in text buffers

   #+begin_src emacs-lisp
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
   #+end_src

*** Emacs Server
   Start a server if not running, but a different server for GUI versus text-only

   #+begin_src emacs-lisp
     (add-hook 'after-init-hook
               (lambda ()
                 (require 'server)
                 (if (window-system)
                     (if (server-running-p server-name)
                         nil
                       (progn
                         (setq server-name "server-gui")
                         (server-start)))
                   (if (server-running-p server-name)
                       nil
                     (progn
                       (setq server-name "server-nw")
                       (server-start))))))
   #+end_src

*** Bells
   Don’t make a sound when ringing a bell - flash a visual bell instead:

   #+begin_src emacs-lisp
     (setq visible-bell t)
   #+end_src

   Override the ring-bell-function to conditionally ring the bell only when it’s
   not a valid quit case like hitting esc or C-g. Generally this means the bell
   will only ring when there’s actually an error raised somehow:

   #+begin_src emacs-lisp
     (setq ring-bell-function
           (lambda ()
             "Only rings the bell if it's not a valid quit case, e.g
     keyboard-quit"
             (unless (memq this-command
                           '(isearch-abort abort-recursive-edit exit-minibuffer keyboard-quit))
               (ding))))
   #+end_src

*** Yes or No
   Answering /yes/ and /no/ to each question from Emacs can be tedious, a
   single /y/ or /n/ will suffice.

   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

*** Automatically revert =doc-view= buffers when the file changes on disk.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'doc-view-mode-hook 'auto-revert-mode)
   #+END_SRC

*** Hook for find-file
   this will check for large file set it to read only,
   display trailing whitespace and enable visual-line-mode

   #+BEGIN_SRC emacs-lisp
     (defun qq/find-file-check-large-file ()
       (when (> (buffer-size) (* 2048 2048))
         (setq buffer-read-only t)
         (buffer-disable-undo)
         (fundamental-mode)))


     (add-hook 'find-file-hook (lambda ()
                                 (qq/find-file-check-large-file)
                                 (visual-line-mode)
                                 (unless (eq major-mode 'org-mode)
                                   (setq show-trailing-whitespace t))))
   #+END_SRC

*** Leave scratch buffers alone

   #+BEGIN_SRC emacs-lisp
     (defun qq/do-not-kill-scratch-buffer ()
       (if (member (buffer-name (current-buffer)) '("*scratch*" "*Messages*"))
           (progn
             (bury-buffer)
             nil)
         t))
     (add-hook 'kill-buffer-query-functions 'qq/do-not-kill-scratch-buffer)
   #+END_SRC

*** UTF-8
   Set =utf-8= as preferred coding system.

   #+BEGIN_SRC emacs-lisp
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
     (set-language-environment "UTF-8")

     (when (display-graphic-p)
       (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
   #+END_SRC

*** System Environment
   Tells emacs to use path from shell

   #+begin_src emacs-lisp
      (exec-path-from-shell-initialize)
   #+end_src

*** Start emacs @fullscreen
   #+begin_src emacs-lisp
     (toggle-frame-fullscreen)
   #+end_src

*** Trailing whitespace
   I don’t want to leave trailing whitespace in files I touch, so set up a hook
   that automatically deletes trailing whitespace after every line when saving a
   file:

   #+begin_src emacs-lisp
     (add-hook 'write-file-hooks 'delete-trailing-whitespace)
   #+end_src

** Visual
*** Theme
   Change the color-theme to =moe-theme= (downloaded using =package=).

   #+BEGIN_SRC emacs-lisp
     ;;; Show highlighted buffer-id as decoration. (Default: nil)
     ;(setq moe-theme-highlight-buffer-id nil)

     ;;; Resize titles (optional).
     ;(setq moe-theme-resize-markdown-title '(1.5 1.4 1.3 1.2 1.0 1.0))
     ;(setq moe-theme-resize-org-title '(1.5 1.4 1.3 1.2 1.1 1.0 1.0 1.0 1.0))
     ;(setq moe-theme-resize-rst-title '(1.5 1.4 1.3 1.2 1.1 1.0))

     ;(load-theme 'moe-dark t)
     ;(moe-theme-set-color 'blue)
       ;; (Available colors: blue, orange, green ,magenta, yellow, purple, red, cyan, w/b.)

     ;(load-theme 'gruber-darker t)
     ;(load-theme 'monokai t)

     ;(load-theme 'gotham t)
     (load-theme 'darktooth t)
     ;(load-theme 'gruvbox t)
     ;(load-theme 'cyberpunk t)
     ;(load-theme 'material t)

     ;(load-theme 'ample t t)
     ;(load-theme 'ample-flat t t)
     ;(load-theme 'ample-light t t)
     ;; choose one to enable
     ;(enable-theme 'ample)
     ;(enable-theme 'ample-flat)
     ;(enable-theme 'ample-light)

     ;(enable-theme 'monokai)
   #+END_SRC

**** Theme customization
   Added/modify some color for some minor/major mode that I use

***** smartparens
   #+BEGIN_SRC emacs-lisp
     (custom-set-faces
         '(sp-show-pair-match-face ((t (
                         :inherit nil
                         :background "#282828"
                         :bold t
                         :foreground "#ffffff"))))

         '(sp-pair-overlay-face ((t (
                         :inherit nil
                         :background nil
                         :foreground "#7cfc00"))))

         '(sp-wrap-overlay-face ((t (
                         :inherit nil
                         :background nil
                         :foreground "#ff4500"))))

         '(sp-wrap-tag-overlay-face ((t (
                         :inherit nil
                         :background nil
                         :foreground "#ff1493"))))

         '(sp-show-pair-enclosing ((t (
                         :inherit nil
                         :foreground "#000000"
                         :background "#ff6347"))))
   #+END_SRC
***** powerline
   #+BEGIN_SRC emacs-lisp
         `(powerline-inactive1  ((t (
                         :background "#1D2021"
                         :foreground "#a89984"
                         :inherit mode-line-inactive))))
         `(powerline-inactive2  ((t (
                         :background "#504945"
                         :forground "#a89984"
                         :inherit mode-line-inactive))))
   #+END_SRC
***** which-func-mode
   #+BEGIN_SRC emacs-lisp
         '(which-func  ((t (:foreground "#87d7af"))))
     )
   #+END_SRC

*** My preferred font

   #+BEGIN_SRC emacs-lisp
     ;; Emacs version 22.3 or later.
     (set-frame-font qq/preferred-font t) ; set font for all frames
     (set-face-attribute 'default nil :font qq/preferred-font)
   #+END_SRC

*** Modeline
   [[https://github.com/TheBB/spaceline][Spaceline]] is an extension to customize the mode line. This is modified
   version extracted from [[https://github.com/syl20bnr/spacemacs][Spacemacs]].

   #+BEGIN_SRC emacs-lisp
     (spaceline-spacemacs-theme)
     (spaceline-helm-mode)
     (spaceline-info-mode)
     (setq-default powerline-default-separator 'contour)
     (setq-default spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
     (setq-default spaceline-window-numbers-unicode 1)
     (setq-default spaceline-workspace-numbers-unicode 1)
     (setq-default powerline-height 18)
     (spaceline-compile)
   #+END_SRC

**** Clean Modeline

   #+BEGIN_SRC emacs-lisp
     (defvar mode-line-cleaner-alist
       `((auto-complete-mode . " α")
         (yas-minor-mode . " γ")
         (paredit-mode . " Φ")
         (eldoc-mode . "")
         (abbrev-mode . "")
         ;;(undo-tree-mode . " τ")
         (wrap-region-mode . "")
         ;;(volatile-highlights-mode . " υ")
         (elisp-slime-nav-mode . " δ")
         (nrepl-interaction-mode . " ηζ")
         (auto-fill-function . " φ")
         (autopair-mode . "")
         (lambda-mode . "")
         (projectile-mode . "")
         (kibit-mode . " κ")
         ;; Major modes
         (nrepl-mode . "ηζ")
         (clojure-mode . "λ")
         (hi-lock-mode . "")
         (python-mode . "Py")
         (emacs-lisp-mode . "ε")
         (markdown-mode . "md")
         (org-mode . "Ο")
         (processing-mode . "P5"))
       "Alist for `clean-mode-line'.
     When you add a new element to the alist, keep in mind that you
     must pass the correct minor/major mode symbol and a string you
     want to use in the modeline *in lieu of* the original.")


     (defun clean-mode-line ()
       (interactive)
       (cl-loop for cleaner in mode-line-cleaner-alist
             do (let* ((mode (car cleaner))
                      (mode-str (cdr cleaner))
                      (old-mode-str (cdr (assq mode minor-mode-alist))))
                  (when old-mode-str
                      (setcar old-mode-str mode-str))
                    ;; major mode
                  (when (eq mode major-mode)
                    (setq mode-name mode-str)))))


     (add-hook 'after-change-major-mode-hook 'clean-mode-line)


     ;;; Greek letters - C-u C-\ greek ;; C-\ to revert to default
     ;;; α β ψ δ ε φ γ η ι ξ κ λ μ ν ο π ρ σ τ θ ω ς χ υ ζ
     ;;; Α Β Ψ Δ Ε Φ Γ Η Ι Ξ Κ Λ Μ Ν Ο Π Ρ Σ Τ Θ Ω Σ Χ Υ Ζ
   #+END_SRC

*** Highlight
   Enable highlighting similar word under the cursor (point)

   #+BEGIN_SRC emacs-lisp
     (setq idle-highlight-idle-time 0.3)
     (add-hook 'prog-mode-hook 'idle-highlight-mode)
   #+END_SRC

   Highlight current line mode

   #+BEGIN_SRC emacs-lisp
     ;(global-hl-line-mode)
   #+END_SRC

*** Fixed/Variable Width Faces
   I love monospaced fonts (I used =PragmataPro= extensively), but they can be
   harder to read when it comes to documentation or simple conversation.

   So, let's make Emacs use different fonts (monospaced and variable) depending
   on the mode we're in (eg: Info and ERC should not be monospaced)

   #+begin_src emacs-lisp
     (defun qq/set-font-to-fixed-width ()
       "Change font in current window to a variable-width font."
       (interactive)
       (face-remap-add-relative 'default '(:font qq/preferred-font)))
     (defun qq/set-font-to-variable-width ()
       "Change font in current window to a variable-width font."
       (interactive)
       (face-remap-add-relative 'default '(:family "CMU Sans Serif" :height 120)))

     (add-hook 'text-mode-hook 'qq/set-font-to-variable-width)
     (add-hook 'erc-mode-hook 'qq/set-font-to-variable-width)
     (add-hook 'Info-mode-hook 'qq/set-font-to-variable-width)
   #+end_src

   For =org-mode= we'll be using monospace font for formula, meta-line, tables
   and code blocks, while still using =variable-pitch-mode= in the rest of
   =org-mode= buffers

   #+BEGIN_SRC emacs-lisp
     (defun qq/adjoin-to-list-or-symbol (element list-or-symbol)
       (let ((list (if (not (listp list-or-symbol))
                       (list list-or-symbol)
                     list-or-symbol)))
         (require 'cl-lib)
         (cl-adjoin element list)))

     (eval-after-load "org"
       '(mapc
         (lambda (face)
           (if (memq window-system '(mac ns))
               (set-face-attribute face nil :font "PragmataPro-11"
                                   :inherit (qq/adjoin-to-list-or-symbol
                                             'fixed-pitch
                                             (face-attribute face :inherit)))
             (set-face-attribute face nil :font "PragmataPro-9"
                                 :inherit (qq/adjoin-to-list-or-symbol
                                           'fixed-pitch
                                           (face-attribute face :inherit))))
           )
         (list 'org-meta-line 'org-code 'org-formula 'org-block
               'org-block-begin-line 'org-block-end-line 'org-verbatim
               'org-table)))
   #+END_SRC

   Same settings applied for =Info buffers= as well. Code examples will be using
   monospace font

   #+begin_src emacs-lisp
     (defvar qq/rx-info-code (rx bol "     " (* not-newline) eol))
     (add-hook 'Info-mode-hook 'qq/Info-font-lock)
     (defun qq/Info-font-lock ()
       (interactive)
       (require 'org)
       (font-lock-add-keywords
        nil
        `((,qq/rx-info-code
           .
           ;; let's just use org-block
           (quote org-block)
           ))))
   #+end_src

   Display source code blocks or pre blocks in monospace for =markdown-mode=
   buffers

   #+begin_src emacs-lisp
     (eval-after-load "markdown-mode"
       '(mapc
         (lambda (face)
           (set-face-attribute
            face nil
            :inherit
            (qq/adjoin-to-list-or-symbol
             'fixed-pitch
             (face-attribute face :inherit))))
         (list 'markdown-pre-face 'markdown-inline-code-face)))
   #+end_src

*** Emoji font support

   #+BEGIN_SRC emacs-lisp
     (defun --set-emoji-font (frame)
       "Adjust the font settings of FRAME so Emacs can display emoji properly."
       (if (eq system-type 'darwin)
           ;; For NS/Cocoa
           (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)
         ;; For Linux
         (set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))

     ;; For when Emacs is started in GUI mode:
     (--set-emoji-font nil)
     ;; Hook for when a frame is created with emacsclient
     ;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html
     (add-hook 'after-make-frame-functions '--set-emoji-font)
   #+END_SRC

*** Fix italics
   Make the italics show as actual italics. For some unknown reason, the below
   is needed to render the italics in org-mode. The issue could be related to
   the fonts in use. But having this doesn't hurt regardless.

   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'italic nil :inherit nil :slant 'italic)
   #+END_SRC
*** PragmataPro Ligatures
   Displaying sequences of characters as fancy characters or symbols
   for example, showing -> as →

   This only work for Pragmata Pro fonts, details [[https://www.reddit.com/r/emacs/comments/4sm6fa/how_to_enable_pragmatapro_ligatures/][here]].

   #+BEGIN_SRC emacs-lisp
       ;; PRETTIFY SYMBOLS (with Pragmata Pro)
       (defun setup-pragmata-ligatures ()
         (setq prettify-symbols-alist
               (append prettify-symbols-alist
                '(("!!"   . ?)
                  ("!="   . ?)
                  ("!=="  . ?)
                  ("!≡"   . ?)
                  ("!≡≡"  . ?)
                  ("!>"   . ?)
                  ("#("   . ?)
                  ("#_"   . ?)
                  ("#{"   . ?)
                  ("#?"   . ?)
                  ("#>"   . ?)
                  ("%="   . ?)
                  ("%>"   . ?)
                  ("<~"   . ?)
                  ("&%"   . ?)
                  ("&&"   . ?)
                  ("&*"   . ?)
                  ("&+"   . ?)
                  ("&-"   . ?)
                  ("&/"   . ?)
                  ("&="   . ?)
                  ("&&&"  . ?)
                  ("&>"   . ?)
                  ("$>"   . ?)
                  ("~>"   . ?)
                  ("***"  . ?) ; I prefer not to use this one
                  ("*="   . ?)
                  ("*/"   . ?)
                  ("*>"   . ?)
                  ("++"   . ?)
                  ("+++"  . ?)
                  ("+="   . ?)
                  ("+>"   . ?)
                  ("--"   . ?)
                  ("-<"   . ?)
                  ("-<<"  . ?)
                  ("-="   . ?)
                  ("->>"  . ?)
                  ("---"  . ?)
                  ("-->"  . ?)
                  (".."   . ?)
                  ("..."  . ?)
                  ("..<"  . ?)
                  (".>"   . ?)
                  (".~"   . ?)
                  (".="   . ?)
                  ("/*"   . ?)
                  ("//"   . ?)
                  ("/>"   . ?)
                  ("/="   . ?)
                  ("/=="  . ?)
                  ("///"  . ?)
                  ("/**"  . ?)
                  ("::"   . ?)
                  (":="   . ?)
                  (":≡"   . ?)
                  (":>"   . ?)
                  (":=>"  . ?)
                  ("<$>"  . ?)
                  ("<*"   . ?)
                  ("<*>"  . ?)
                  ("<+>"  . ?)
                  ;; ("<-"   . ?) ; I like different arrows (see below)
                  ("<<"   . ?)
                  ("<<<"  . ?)
                  ("<<="  . ?)
                  ("<="   . ?)
                  ;; ("<=>"  . ?) ; I like different arrows (see below)
                  ("<>"   . ?)
                  ("<|>"  . ?)
                  ("<<-"  . ?)
                  ("<|"   . ?)
                  ("<=<"  . ?)
                  ("<~~"  . ?)
                  ("<<~"  . ?)
                  ("<$"   . ?)
                  ("<+"   . ?)
                  ("<!>"  . ?)
                  ("<@>"  . ?)
                  ("<#>"  . ?)
                  ("<%>"  . ?)
                  ("<^>"  . ?)
                  ("<&>"  . ?)
                  ("<?>"  . ?)
                  ("<.>"  . ?)
                  ("</>"  . ?)
                  ("<\>"  . ?)
                  ("<\">" . ?)
                  ("<:>"  . ?)
                  ("<~>"  . ?)
                  ("<**>" . ?)
                  ("<<^"  . ?)
                  ("<!"   . ?)
                  ("<@"   . ?)
                  ("<#"   . ?)
                  ("<%"   . ?)
                  ("<^"   . ?)
                  ("<&"   . ?)
                  ("<?"   . ?)
                  ("<."   . ?)
                  ("</"   . ?)
                  ("<\\"  . ?)
                  ("<\""  . ?)
                  ("<:"   . ?)
                  ("<->"  . ?)
                  ("<!--" . ?)
                  ("<--"  . ?)
                  ("=<<"  . ?)
                  ("=="   . ?)
                  ("==="  . ?)
                  ;; ("==>"  . ?) ; I like different arrows (see below)
                  ;; ("=>"   . ?)  ; I like different arrows (see below)
                  ("=~"   . ?)
                  ("=>>"  . ?)
                  ("≡≡"   . ?)
                  ("≡≡≡"  . ?)
                  ("≡:≡"  . ?)
                  (">-"   . ?)
                  (">="   . ?)
                  (">>"   . ?)
                  (">>-"  . ?)
                  (">>="  . ?)
                  (">>>"  . ?)
                  (">=>"  . ?)
                  (">>^"  . ?)
                  ("??"   . ?)
                  ("?~"   . ?)
                  ("?="   . ?)
                  ("?>"   . ?)
                  ("^="   . ?)
                  ("^."   . ?)
                  ("^?"   . ?)
                  ("^.."  . ?)
                  ("^<<"  . ?)
                  ("^>>"  . ?)
                  ("^>"   . ?)
                  ("\\\\" . ?)
                  ("\\>"  . ?)
                  ("@>"   . ?)
                  ("|="   . ?)
                  ("||"   . ?)
                  ("|>"   . ?)
                  ("|||"  . ?)
                  ("|+|"  . ?)
                  ("~="   . ?)
                  ("~~>"  . ?)
                  ("~>>"  . ?)

                  ;; Personal preference: I like this set of arrows better than default
                  ("<-"   . ?🡐)
                  ("->"   . ?🡒)
                  ("=>"   . ?⇒)
                  ("<=>"  . ?⟺)
                  ("<==>" . ?⟺)
                  ("==>"  . ?⟹)
                  ("<=="  . ?⟸)
                  ("|->"  . ?⟼)
                  ("<-|"  . ?⟻)
                  ("|=>"  . ?⟾)
                  ("<=|"  . ?⟽)
                  ))))

       (defun refresh-pretty ()
         (prettify-symbols-mode -1)
         (prettify-symbols-mode +1))

       ;; Hooks for modes in which to install the Pragmata ligatures
       (mapc (lambda (hook)
               (add-hook hook (lambda () (setup-pragmata-ligatures) (refresh-pretty))))
             '(text-mode-hook
               prog-mode-hook))
       (global-prettify-symbols-mode +1)
   #+END_SRC

** Advice
   An advice can be given to a function to make it behave differently. This
   advice makes =eval-last-sexp= (bound to =C-x C-e=) replace the sexp with
   the value.

   #+BEGIN_SRC emacs-lisp
   (defadvice eval-last-sexp (around replace-sexp (arg) activate)
     "Replace sexp when called with a prefix argument."
     (if arg
         (let ((pos (point)))
           ad-do-it
           (goto-char pos)
           (backward-kill-sexp)
           (forward-sexp))
       ad-do-it))
   #+END_SRC

   When interactively changing the theme (using =M-x load-theme=), the
   current custom theme is not disabled. This often gives weird-looking
   results; we can advice =load-theme= to always disable themes currently
   enabled themes.

   #+BEGIN_SRC emacs-lisp
     (defadvice load-theme
       (before disable-before-load (theme &optional no-confirm no-enable) activate)
       (mapc 'disable-theme custom-enabled-themes))
   #+END_SRC

** Modes
*** Disabled Modes
   There are some modes that are enabled by default that I don't find
   particularly useful. We create a list of these modes, and disable all of
   these.

   #+BEGIN_SRC emacs-lisp
   (dolist (mode
            '(tool-bar-mode       ; No toolbars, more room for text.
              scroll-bar-mode     ; No scroll bars either.
              menu-bar-mode       ; same for menu bar
              blink-cursor-mode)) ; The blinking cursor gets old.
     (funcall mode 0))
   #+END_SRC

*** Enabled Modes
   Let's apply the same technique for enabling modes that are disabled by
   default.

   #+BEGIN_SRC emacs-lisp
          (dolist (mode
                   '(abbrev-mode                ; E.g. sopl -> System.out.println.
                     column-number-mode         ; Show column number in mode line.
                     delete-selection-mode      ; Replace selected text.
                     recentf-mode               ; Recently opened files.
                     show-paren-mode            ; Highlight matching parentheses.

                     xterm-mouse-mode
                     which-function-mode        ; show function where cursor reside
                                                ; in mode line

                     global-auto-revert-mode

                     ;; Enabled by default in 24.4:
                     ;electric-indent-mode
                     transient-mark-mode
                     delete-selection-mode

                     line-number-mode
                     column-number-mode
                     display-time-mode
                     size-indication-mode
                     region-state-mode         ; A global minor-mode that shows the number of
                                                        ; chars/lines or rows/columns in the region (aka. selection)

                     global-linum-mode          ; turn on line number globally
                     ))
            (funcall mode 1))

     ;;     (eval-after-load 'auto-compile
     ;;       '((auto-compile-on-save-mode)))   ; compile .el files on save.

   #+END_SRC

***   =hunglry-delete-mode=
   Makes =backspace= and =C-d= erase /all/ consecutive white space in a given
   direction (instead of just one). Use it everywhere.

   #+BEGIN_SRC emacs-lisp
     (global-hungry-delete-mode)
   #+END_SRC

*** Recentf
   Plenty editors (e.g. Vim) have the feature of saving minibuffer
   history to an external file after exit. savehist provide the same
   feature for Emacs. (refer to setq & setq-default for configuration)
   Enabling Recentf mode, the file open includes a submenu containing a list
   of recently opened files.

   #+BEGIN_SRC emacs-lisp
     (savehist-mode +1)
     (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
     (recentf-mode +1)
   #+END_SRC

   After evaluating the following code the directories visited through dired
   buffers will also be put to recentf

   #+BEGIN_SRC emacs-lisp
     (after 'recentf
     '(progn
     (defun recentf-track-opened-file ()
       "Insert the name of the dired or file just opened or written into the recent list."
       (let ((buff-name (or buffer-file-name (and (derived-mode-p 'dired-mode) default-directory))))
         (and buff-name
              (recentf-add-file buff-name)))
       ;; Must return nil because it is run from `write-file-functions'.
       nil)

     (defun recentf-track-closed-file ()
       "Update the recent list when a file or dired buffer is killed.
     That is, remove a non kept file from the recent list."
       (let ((buff-name (or buffer-file-name (and (derived-mode-p 'dired-mode) default-directory))))
         (and buff-name
              (recentf-remove-if-non-kept buff-name))))

     (add-hook 'dired-after-readin-hook 'recentf-track-opened-file)))
   #+END_SRC

*** Column mode editing
   Provde ways to ways to insert sequence of numbers easily.
   One reason I enable this mode.

   #+BEGIN_SRC emacs-lisp
     (setq cua-enable-cua-keys nil)
     (cua-mode)
   #+END_SRC

*** If you change buffer, or focus, disable the current buffer's mark:

   #+begin_src emacs-lisp
     (transient-mark-mode t)
   #+end_src

*** Fringe
   Set fringe width on each side to 12 and add few indications

   #+BEGIN_SRC emacs-lisp
     (fringe-mode 12)

     ; Indicate where a buffer stars and stops
     (setq-default indicate-buffer-boundaries 'right)
     (setq-default indicate-empty-lines +1)
     (let ((hook (lambda ()
                   (setq indicate-empty-lines       nil
                         indicate-buffer-boundaries nil)))
           (mode-hooks '(shell-mode-hook term-mode-hook gnus-article-mode-hook
                         gnus-summary-mode-hook gnus-group-mode-hook
                         eshell-mode-hook)))
       (mapc (lambda (mode-hook)
               (add-hook mode-hook hook))
             mode-hooks))
     (defun qq/set-fringe-background ()
       "Set the fringe background to the same color as the regular background."
       (interactive)
       (setq qq/fringe-background-color
             (face-background 'default))
       (custom-set-faces
        `(fringe ((t (:background ,qq/fringe-background-color))))))

     (add-hook 'after-init-hook #'qq/set-fringe-background)
   #+END_SRC

*** ediff

[[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][   ediff]] is a full-featured visual diff and merge tool, built into Emacs.

   Make sure that the window split is always side-by-side:

   #+BEGIN_SRC emacs-lisp
     (setq ediff-split-window-function 'split-window-horizontally)
   #+END_SRC

   Ignore whitespace changes:

   #+BEGIN_SRC emacs-lisp
     (setq ediff-diff-options "-w")
   #+END_SRC

   Only ever use one set of windows in one frame:

   #+BEGIN_SRC emacs-lisp
     (setq ediff-window-setup-function 'ediff-setup-windows-plain)
   #+END_SRC

*** linum
**** Customize linum format

   #+BEGIN_SRC emacs-lisp
     (hlinum-activate)
     ;(setq linum-format (lambda (line)
     ;                     (propertize (format
     ;                                  (let ((w (length (number-to-string
     ;                                                    (count-lines (point-min) (point-max))))))
     ;                                    (concat "%" (number-to-string w) "d ")) line) 'face 'linum)))
   #+END_SRC

**** Turn off linum-mode on some major mode
   [[http://stackoverflow.com/questions/3875213/turning-on-linum-mode-when-in-python-c-mode]]

   #+BEGIN_SRC emacs-lisp
     (setq linum-mode-inhibit-modes-list '(eshell-mode
                                           shell-mode
                                           dictionary-mode
                                           erc-mode
                                           browse-kill-ring-mode
                                           etags-select-mode
                                           dired-mode
                                           help-mode
                                           text-mode
                                           eww-mode
                                           fundamental-mode
                                           jabber-roster-mode
                                           jabber-chat-mode
                                           inferior-js-mode
                                           inferior-python-mode
                                           inferior-scheme-mode
                                           twittering-mode
                                           compilation-mode
                                           weibo-timeline-mode
                                           woman-mode
                                           Info-mode
                                           calc-mode
                                           calc-trail-mode
                                           comint-mode
                                           gnus-group-mode
                                           inf-ruby-mode
                                           gud-mode
                                           org-mode
                                           vc-git-log-edit-mode
                                           log-edit-mode
                                           term-mode
                                           w3m-mode
                                           speedbar-mode
                                           gnus-summary-mode
                                           gnus-article-mode
                                           calendar-mode))
     (defadvice linum-on (around linum-on-inhibit-for-modes)
                "Stop the load of linum-mode for some major modes."
                (unless (member major-mode linum-mode-inhibit-modes-list)
                  ad-do-it))
     (ad-activate 'linum-on)
   #+END_SRC

*** Ibuffer customization
**** Use human readable size column (from [[http://www.emacswiki.org/emacs/IbufferMode#toc12][coldnew]])

   #+BEGIN_SRC emacs-lisp
     (define-ibuffer-column size-h
       (:name "Size")
       (cond
        ((> (buffer-size) 1000)    (format "%7.1fk" (/ (buffer-size) 1000.0)))
        ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
        (t  (format "%8d" (buffer-size)))))
     (setq ibuffer-formats '((mark modified read-only
                              " " (name 25 25 :left :elide)
                              " " (size-h 9 -1 :right)
                              " " (mode 16 16 :left :elide)
                              " " (vc-status 16 16 :left)
                              " " filename-and-process)
                        (mark " " (name 16 -1) " " filename)))
   #+END_SRC

**** Settings

   #+BEGIN_SRC emacs-lisp
     (setq
      ibuffer-default-sorting-mode 'filename/process
      ibuffer-eliding-string "…"
      ibuffer-expert t
      ibuffer-compile-formats t
      ibuffer-show-empty-filter-groups nil)
   #+END_SRC
**** Evil initial state

   #+BEGIN_SRC emacs-lisp
     (after 'evil (evil-set-initial-state 'ibuffer-mode 'normal))
   #+END_SRC

**** 'Default' Filter groups

   #+BEGIN_SRC emacs-lisp
     (setq ibuffer-saved-filter-groups
               (quote (("default"
                        ("c++" (mode . c++-mode))
                        ("shell script" (mode . sh-mode))
                        ("swift" (mode . swift-mode))
                        ("emacs lisp" (mode . emacs-lisp-mode))
                        ("python" (mode . python-mode))
                        ("LaTeX" (or
                                  (mode . latex-mode)
                                  (mode . LaTeX-mode)
                                  (mode . tex-mode)))
                        ("ruby" (mode . ruby-mode))
                        ("java-script" (or
                                        (mode . js-mode)
                                        (mode . js2-mode)))
                        ("java" (mode . java-mode))
                        ("html" (or
                                 (mode . html-mode)
                                 (mode . web-mode)
                                 (mode . haml-mode)))
                        ("xml" (mode . nxml-mode))
                        ("css" (mode . css-mode))
                        ("org agenda"  (mode . org-agenda-mode))
                        ("org" (or
                                (mode . org-mode)
                                (name . "^\\*Calendar\\*$")
                                (name . "^diary$")))
                        ("text misc" (or
                                      (mode . text-mode)
                                      (mode . rst-mode)
                                      (mode . markdown-mode)))
                        ("w3m" (mode . w3m-mode))
                        ("git" (or
                                (mode . magit-log-edit-mode)
                                (mode . magit-log)))
                        ("dired" (mode . dired-mode))
                        ("help" (or
                                 (mode . Info-mode)
                                 (mode . help-mode)
                                 (mode . Man-mode)))
                        ("*buffer*" (name . "\\*.*\\*"))))))
   #+END_SRC

**** Choose between two filter group options

   #+BEGIN_SRC emacs-lisp
         (defvar qq/ibuffer-use-vc-groups t
           "Use filter groups detected from vc root when non-nil.
     This will be done with `ibuffer-vc-set-filter-groups-by-vc-root'
     If this is nil, then filter groups will be restored from `ibuffer-saved-filter-groups'.")

         (defun qq/ibuffer-setup ()
           "Configure ibuffer the way I want it.
     This sets `ibuffer-auto-mode' and restores the chosen filter group settings,
     according to the values of `qq/ibuffer-use-vc-groups' and
     `ibuffer-saved-filter-groups'."
           (ibuffer-auto-mode 1)
           (hl-line-mode t)
           (if qq/ibuffer-use-vc-groups
               (ibuffer-vc-set-filter-groups-by-vc-root)
             (ibuffer-switch-to-saved-filter-groups "default")))

         (add-hook 'ibuffer-mode-hook 'qq/ibuffer-setup)
   #+END_SRC

**** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: evil-ibuffer-binding
    :END:
   Using The table below as the source for generating [[Evil iBuffer Bindings][Evil iBuffer Bindings]]
        (kbd "0") 'digit-argument
        (kbd "1") 'digit-argument
        (kbd "2") 'digit-argument
        (kbd "3") 'digit-argument
        (kbd "4") 'digit-argument
        (kbd "5") 'digit-argument
        (kbd "6") 'digit-argument
        (kbd "7") 'digit-argument
        (kbd "8") 'digit-argument
        (kbd "9") 'digit-argument

        ;; immediate operations
        (kbd "n") 'ibuffer-forward-filter-group
        (kbd "SPC") 'forward-line
        (kbd "p") 'ibuffer-backward-filter-group
        (kbd "M-}") 'ibuffer-forward-next-marked
        (kbd "M-{") 'ibuffer-backwards-next-marked
        (kbd "g") 'ibuffer-update
        "`" 'ibuffer-switch-format
        "-" 'ibuffer-add-to-tmp-hide
        "+" 'ibuffer-add-to-tmp-show
        "b" 'ibuffer-bury-buffer
        (kbd ",") 'ibuffer-toggle-sorting-mode
        (kbd "s i") 'ibuffer-invert-sorting
        (kbd "s a") 'ibuffer-do-sort-by-alphabetic
        (kbd "s v") 'ibuffer-do-sort-by-recency
        (kbd "s s") 'ibuffer-do-sort-by-size
        (kbd "s f") 'ibuffer-do-sort-by-filename/process
        (kbd "s m") 'ibuffer-do-sort-by-major-mode

        (kbd "/ m") 'ibuffer-filter-by-used-mode
        (kbd "/ M") 'ibuffer-filter-by-derived-mode
        (kbd "/ n") 'ibuffer-filter-by-name
        (kbd "/ c") 'ibuffer-filter-by-content
        (kbd "/ e") 'ibuffer-filter-by-predicate
        (kbd "/ f") 'ibuffer-filter-by-filename
        (kbd "/ >") 'ibuffer-filter-by-size-gt
        (kbd "/ <") 'ibuffer-filter-by-size-lt
        (kbd "/ r") 'ibuffer-switch-to-saved-filters
        (kbd "/ a") 'ibuffer-add-saved-filters
        (kbd "/ x") 'ibuffer-delete-saved-filters
        (kbd "/ d") 'ibuffer-decompose-filter
        (kbd "/ s") 'ibuffer-save-filters
        (kbd "/ p") 'ibuffer-pop-filter
        (kbd "/ !") 'ibuffer-negate-filter
        (kbd "/ t") 'ibuffer-exchange-filters
        (kbd "/ TAB") 'ibuffer-exchange-filters
        (kbd "/ o") 'ibuffer-or-filter
        (kbd "/ g") 'ibuffer-filters-to-filter-group
        (kbd "/ P") 'ibuffer-pop-filter-group
        (kbd "/ D") 'ibuffer-decompose-filter-group
        (kbd "/ /") 'ibuffer-filter-disable

        (kbd "M-n") 'ibuffer-forward-filter-group
        "\t" 'ibuffer-forward-filter-group
        (kbd "M-p") 'ibuffer-backward-filter-group
        (kbd "M-j") 'ibuffer-jump-to-filter-group
        (kbd "C-k") 'ibuffer-kill-line
        (kbd "C-y") 'ibuffer-yank
        (kbd "/ S") 'ibuffer-save-filter-groups
        (kbd "/ R") 'ibuffer-switch-to-saved-filter-groups
        (kbd "/ X") 'ibuffer-delete-saved-filter-groups
        (kbd "/ \\") 'ibuffer-clear-filter-groups

        (kbd "q") 'bury-buffer
        (kbd "h") 'describe-mode
        (kbd "?") 'describe-mode

        (kbd "% n") 'ibuffer-mark-by-name-regexp
        (kbd "% m") 'ibuffer-mark-by-mode-regexp
        (kbd "% f") 'ibuffer-mark-by-file-name-regexp

        (kbd "C-t") 'ibuffer-visit-tags-table

        (kbd "|") 'ibuffer-do-shell-command-pipe
        (kbd "!") 'ibuffer-do-shell-command-file
        (kbd "~") 'ibuffer-do-toggle-modified
        ;; marked operation
        (kbd "A") 'ibuffer-do-view
        (kbd "D") 'ibuffer-do-delete
        (kbd "E") 'ibuffer-do-eval
        (kbd "F") 'ibuffer-do-shell-command-file
        (kbd "I") 'ibuffer-do-query-replace-regexp
        (kbd "H") 'ibuffer-do-view-other-frame
        (kbd "P") 'ibuffer-do-shell-command-pipe-replace
        (kbd "M") 'ibuffer-do-toggle-modified
        (kbd "O") 'ibuffer-do-occur
        ;; (kbd "P") 'ibuffer-do-print
        (kbd "Q") 'ibuffer-do-query-replace
        (kbd "R") 'ibuffer-do-rename-uniquely
        (kbd "S") 'ibuffer-do-save
        (kbd "T") 'ibuffer-do-toggle-read-only
        (kbd "U") 'ibuffer-do-replace-regexp
        (kbd "V") 'ibuffer-do-revert
        (kbd "W") 'ibuffer-do-view-and-eval
        (kbd "X") 'ibuffer-do-shell-command-pipe

        ;; (kbd "k") 'ibuffer-do-kill-lines
        (kbd "w") 'ibuffer-copy-filename-as-kill

        (kbd "e") 'ibuffer-visit-buffer
        (kbd "f") 'ibuffer-visit-buffer
        (kbd "C-x C-f") 'ibuffer-find-file
        (kbd "C-o") 'ibuffer-visit-buffer-other-window-noselect
        (kbd "M-o") 'ibuffer-visit-buffer-1-window
        (kbd "C-x v") 'ibuffer-do-view-horizontally
        (kbd "C-c C-a") 'ibuffer-auto-mode
        (kbd "C-x 4 RET") 'ibuffer-visit-buffer-other-window
        (kbd "C-x 5 RET") 'ibuffer-visit-buffer-other-frame

   #+TBLNAME: evil_ibuffer_keys
      | Combo       | Description | Command                               |
      | SPC SPC     |             | 'helm-M-x                             |
      | v           |             | 'ibuffer-toggle-marks                 |
      | l           |             | 'ibuffer-visit-buffer                 |
      | J           |             | 'ibuffer-jump-to-buffer               |
      | M-s a C-o   |             | 'ibuffer-do-occur                     |
      | * *         |             | 'ibuffer-unmark-all                   |
      | * s         |             | 'ibuffer-mark-special-buffers         |
      | * r         |             | 'ibuffer-mark-read-only-buffers       |
      | * /         |             | 'ibuffer-mark-dired-buffers           |
      | * e         |             | 'ibuffer-mark-dissociated-buffers     |
      | * h         |             | 'ibuffer-mark-help-buffers            |
      | * z         |             | 'ibuffer-mark-compressed-file-buffers |
      | d           |             | 'ibuffer-mark-for-delete              |
      | C-d         |             | 'ibuffer-mark-for-delete-backwards    |
      | x           |             | 'ibuffer-do-kill-on-deletion-marks    |

*** Minibuffer
**** Enable paredit in lisp related minibuffer

   #+begin_src emacs-lisp
;      (defvar paredit-minibuffer-commands '(eval-expression
;                                           pp-eval-expression
;                                           eval-expression-with-eldoc
;                                           ibuffer-do-eval
;                                           ibuffer-do-view-and-eval)
;       "Interactive commands for which paredit should be enabled in the minibuffer.")
;
;     (defun conditionally-paredit-mode (flag)
;       "Enable paredit during lisp-related minibuffer commands."
;       (if (memq this-command paredit-minibuffer-commands)
;           (paredit-mode flag)))
   #+end_src

**** Proper gc threshold when minibuffer active. Lower it after minibuffer exit

   [[http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/]]

   #+begin_src emacs-lisp
     (defun qq/minibuffer-setup-hook ()
       ;; Use paredit in the minibuffer
       ;(conditionally-paredit-mode 1)
;       (local-set-key (kbd "M-y") 'paste-from-x-clipboard)
;       (local-set-key (kbd "M-k") 'kill-line)
       (setq gc-cons-threshold most-positive-fixnum))

     (defun qq/minibuffer-exit-hook ()
       ;; evil-mode also use minibuf
       ;(conditionally-paredit-mode -1)
       (setq gc-cons-threshold best-gc-cons-threshold))

     (add-hook 'minibuffer-setup-hook #'qq/minibuffer-setup-hook)
     (add-hook 'minibuffer-exit-hook #'qq/minibuffer-exit-hook)
   #+end_src

*** GUD
**** Use gdb-many-windows by default

   #+BEGIN_SRC emacs-lisp
     (setq gdb-many-windows t)
   #+END_SRC

**** Turn on tooltip-mode

   #+BEGIN_SRC emacs-lisp
     (defun qq/gud-hooks ()
       (gud-tooltip-mode 1))

     (add-hook 'gud-mode-hook 'qq/gud-hooks)
   #+END_SRC

*** Undo Tree
**** Settings

   #+BEGIN_SRC emacs-lisp
     (setq
           undo-tree-visualizer-timestamps t            ; show timestamps
           undo-tree-visualizer-diff t                  ; show diff
           undo-tree-auto-save-history t)               ; Save undo history between sessions.
   #+END_SRC

**** Evil visual line wrapping breaks undo-tree keybindings

   #+BEGIN_SRC emacs-lisp
     (add-hook 'undo-tree-visualizer-mode-hook
               (lambda ()
                 (set (make-local-variable 'input-method-function) nil)
                 (set (make-variable-buffer-local 'global-hl-line-mode) nil)
                 (visual-line-mode -1)))

     (after 'evil
         (evil-set-initial-state 'undo-tree-visualizer-mode 'emacs))
   #+END_SRC

**** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: undo-tree-binding
    :END:
   Using The table below as the source for generating [[Undo-tree Bindings][Undo-tree Bindings]]

   #+TBLNAME: undo_tree_keys
      | Combo    | Description | Command                                  |
      |----------+-------------+------------------------------------------|
      | C-g      |             | 'undo-tree-visualizer-quit               |
      | <escape> |             | 'undo-tree-visualizer-quit               |
      | RET      |             | 'undo-tree-visualizer-quit               |
      | j        |             | 'undo-tree-visualize-redo                |
      | k        |             | 'undo-tree-visualize-undo                |
      | h        |             | 'undo-tree-visualize-switch-branch-left  |
      | l        |             | 'undo-tree-visualize-switch-branch-right |

**** Compress the history files as .xz files

   #+BEGIN_SRC emacs-lisp
     (when (executable-find "xz")
       (defun qq-advice/undo-tree-make-history-save-file-name (_ret)
         (let ((auto-save-file-name-transforms
                '((".*" (concat qq/cache-directory "backups/") t))))
           (concat (make-auto-save-file-name) ".undo.xz")))

       (defun qq-advice/undo-tree-load-history (old-fun &rest args)
         (let ((jka-compr-verbose))
           (apply old-fun args)))

       (advice-add 'undo-tree-make-history-save-file-name
                   :filter-return
                   #'qq-advice/undo-tree-make-history-save-file-name)
       (advice-add 'undo-tree-load-history
                   :around
                   #'qq-advice/undo-tree-load-history))
   #+END_SRC

**** Persistent undo-tree history across emacs sessions

   #+BEGIN_SRC emacs-lisp
     (setq qq/undo-tree-history-dir (let ((dir (concat qq/cache-directory
                                                         "undo-tree-history/")))
                                        (make-directory dir :parents)
                                        dir))
     (setq undo-tree-history-directory-alist `((".*" . ,qq/undo-tree-history-dir)))

     (add-hook 'write-file-functions #'undo-tree-save-history-hook)
     (add-hook 'find-file-hook #'undo-tree-load-history-hook)
   #+END_SRC
**** Enable undo-tree

   #+BEGIN_SRC emacs-lisp
     (global-undo-tree-mode 1)
   #+END_SRC

** Keybindings
    :PROPERTIES:
    :CUSTOM_ID: default-key-binding
    :END:
   Using The table below as the source for generating [[Basic Bindings]]

   #+TBLNAME: std_keys
      | Combo    | Description                                                                | Command                  |
      |----------+----------------------------------------------------------------------------+--------------------------|
      | C-s      | Do incremental search forward for regular expression                       | 'isearch-forward-regexp  |
      | C-M-s    | Do incremental search forward                                              | 'isearch-forward         |
      | C-r      | Do incremental search backward for regular expression                      | 'isearch-backward-regexp |
      | C-M-r    | Do incremental search backward                                             | 'isearch-backward        |
      | C-c s    | Jump to *scratch* buffer                                                   | 'qq/goto-scratch-buffer  |
      | C-x C-b  | Use iBuffer to replace built-in buffer manager                             | 'ibuffer                 |
      | C-x C-k  | Kill the current buffer. When called in the minibuffer, will get out of it | 'kill-this-buffer        |
      | C-c e    |                                                                            | 'qq/eval-and-replace     |
      | C-(      | In selected window switch to previous buffer                               | 'previous-buffer         |
      | C-)      | In selected window switch to next buffer                                   | 'next-buffer             |
      | [escape] | Work as C-g in cases where it does something, and as C-x 1 in other cases  | 'keyboard-escape-quit    |

* Third parties
** Company
   A text completion framework for Emacs.

   [[http://company-mode.github.io]]

*** Settings
**** Enable globally

   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook 'global-company-mode)
   #+END_SRC

**** Weight by frequency

   #+BEGIN_SRC emacs-lisp
     (setq company-transformers '(company-sort-by-occurrence))
   #+END_SRC

**** Align annotations

   #+BEGIN_SRC emacs-lisp
     (setq company-tooltip-align-annotations t)
   #+END_SRC

**** Wrap around popup menu on reaching end

   #+BEGIN_SRC emacs-lisp
     (setq company-selection-wrap-around t)
   #+END_SRC

**** Allow non-matching input when company-mode is active

   #+BEGIN_SRC emacs-lisp
     (setq company-require-match nil)
   #+END_SRC

**** Instruct company-emoji to not insert unicode

   #+BEGIN_SRC emacs-lisp
     (setq company-emoji-insert-unicode nil)
   #+END_SRC

**** Delays

   #+BEGIN_SRC emacs-lisp
     (setq company-idle-delay 0.1
           company-echo-delay 0)
   #+END_SRC

**** Trigger autocomplete if user interaction took place

   #+BEGIN_SRC emacs-lisp
  (setq company-auto-complete 'company-explicit-action-p)
   #+END_SRC

**** Minimum prefix length for idle completion

   #+BEGIN_SRC emacs-lisp
  (setq company-minimum-prefix-length 2)
   #+END_SRC

**** Flip tooltip when it's above the current line

   #+BEGIN_SRC emacs-lisp
  (setq company-tooltip-flip-when-above t)
   #+END_SRC

**** Align annotations to the right tooltip border

   #+BEGIN_SRC emacs-lisp
  (setq company-tooltip-align-annotations t)
   #+END_SRC

*** Default backends for company

   Specialized backends are kept in front because they are active only in special
   context for example company-emoji when word begins with a colon, so they do not
   override generic backends like company-ispell but the reverse is not true.

   The special completion triggers are

   | Word start with | Backend       |
   | :               | company-emoji |
   | \               | company-math  |
   | / or ~/         | company-files |

   Make the backends buffer local

   #+BEGIN_SRC emacs-lisp
     (setq company-backends '((company-capf
                                 company-emoji
                                 company-math-symbols-unicode
                                 company-dabbrev-code
                                 company-files
                                 company-keywords)

                                company-dabbrev))
   #+END_SRC

*** flx matching in company

   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'company
       (company-flx-mode +1))
   #+END_SRC

*** Sort completions by usage frequency

   #+BEGIN_SRC emacs-lisp
     (eval-after-load 'company
          (company-statistics-mode))
   #+END_SRC

*** company-ispell setup

   #+BEGIN_SRC emacs-lisp
     (defun toggle-company-ispell ()
       (interactive)
       (cond
        ((memq 'company-ispell company-backends)
         (setq company-backends (delete 'company-ispell company-backends))
         (message "company-ispell disabled"))
        (t
         (add-to-list 'company-backends 'company-ispell)
         (message "company-ispell enabled!"))))

     (defun company-ispell-setup ()
       ;; @see https://github.com/company-mode/company-mode/issues/50
       (when (boundp 'company-backends)
         (make-local-variable 'company-backends)
         (add-to-list 'company-backends 'company-ispell)
         (setq company-ispell-dictionary ispell-alternate-dictionary)))

     ;; message-mode use company-bbdb.
     ;; So we should NOT turn on company-ispell
     (add-hook 'org-mode-hook 'company-ispell-setup)
   #+END_SRC
*** Enable quick help for company-mode

   #+BEGIN_SRC emacs-lisp
     (when (display-graphic-p)
         (company-quickhelp-mode +1))
   #+END_SRC

*** Disable company-mode for certain major modes.

   #+BEGIN_SRC emacs-lisp
     (setq company-global-modes
           '(not
             eshell-mode comint-mode erc-mode gud-mode rcirc-mode
             minibuffer-inactive-mode))
   #+END_SRC

*** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: company-binding
    :END:

   Custom function used to trigger tab within active company-mode window

   #+BEGIN_SRC emacs-lisp
     (defun company-complete-common-or-complete-full ()
       (interactive)
       (when (company-manual-begin)
         (if (eq last-command #'company-complete-common-or-cycle)
             (let ((company-selection-wrap-around t))
               (call-interactively #'company-complete-selection))
           (let ((buffer-mod-tick (buffer-chars-modified-tick)))
             (call-interactively #'company-complete-common)
             (when (= buffer-mod-tick (buffer-chars-modified-tick))
               (call-interactively #'company-complete-selection)
               (call-interactively #'company-complete))))))
   #+END_SRC

  Using The table below as the source for generating [[Company Bindings][Company Bindings]]

   #+TBLNAME: company_keys
      | Combo | Description                       | Command                                   |
      |-------+-----------------------------------+-------------------------------------------|
      | C-j   | move cursor to the next entry     | 'company-select-next                      |
      | C-k   | move cursor to the previous entry | 'company-select-previous                  |
      | TAB   |                                   | 'company-complete-common-or-complete-full |

** Diminish
   Remove the minor mode indicators from the mode line (or powerline).

   [[https://github.com/myrjola/diminish.el]]

   #+begin_src emacs-lisp
     (diminish 'visual-line-mode)
     (diminish 'hungry-delete-mode)
     (after 'hi-lock '(diminish 'hi-lock-mode))
     (after 'ggtags (diminish 'ggtags-mode))
     (after 'flyspell (diminish 'flyspell-mode))
     (after 'which-key (diminish 'which-key-mode))
     (after 'abbrev (diminish 'abbrev-mode))
     (after 'irony (diminish 'irony-mode))
     (after 'autopair (diminish 'autopair-mode))
     (after 'undo-tree (diminish 'undo-tree-mode))
     (after 'auto-complete (diminish 'auto-complete-mode))
     (after 'projectile (diminish 'projectile-mode))
     (after 'guide-key (diminish 'guide-key-mode))
     (after 'eldoc (diminish 'eldoc-mode))
     (after 'smartparens (diminish 'smartparens-mode))
     (after 'evil-smartparens (diminish 'evil-smartparens-mode))
     (after 'company (diminish 'company-mode))
     (after 'elisp-slime-nav (diminish 'elisp-slime-nav-mode))
     (after 'git-gutter-fringe (diminish 'git-gutter-mode))
     (after 'indent-guide (diminish 'indent-guide-mode))
     (after 'hs-minor-mode (diminish 'hs-minor-mode))
     (after 'color-identifiers-mode (diminish 'color-identifiers-mode))
     (after 'rainbow-mode (diminish 'rainbow-mode))
     (after 'persp-mode (diminish 'persp-mode))
     (after 'highlight-indentation (diminish 'highlight-indentation-mode))
     (eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
     (eval-after-load "face-remap" '(diminish 'buffer-face-mode))
     (diminish 'auto-revert-mode)
   #+end_src
** Evil
   As a long time Vim user, =evil-mode= is essential tools in order for Emacs
   to be my default text editor.

   [[https://bitbucket.org/lyro/evil/wiki/Home]]

*** Init

   #+BEGIN_SRC emacs-lisp
     (dolist (feature
              '(evil evil-indent-textobject
                ))
       (require feature))
   #+END_SRC

*** Enable Evil

   #+BEGIN_SRC emacs-lisp
     (evil-mode 1)
   #+END_SRC
*** Plugins
**** evil-surround
   See [[https://github.com/timcharper/evil-surround]] for tutorial

   #+BEGIN_SRC emacs-lisp
     (global-evil-surround-mode t)
   #+END_SRC

**** evil-quickscope

   #+BEGIN_SRC emacs-lisp
     (after 'evil-quickscope
         (setq evil-quickscope-word-separator " -./")
         (set-face-attribute 'evil-quickscope-first-face nil
                             :inherit nil)

         (if (display-graphic-p)
             (set-face-attribute 'evil-quickscope-second-face nil
                                 :underline '(:style wave)
                                 :inherit nil)
           (set-face-attribute 'evil-quickscope-second-face nil
                               :inherit nil))

         (defun nadvice/evil-quickscope-update-overlays-bidirectional ()
           "Update overlays in both directions from point."
           (evil-quickscope-remove-overlays)
           (when (memq evil-state '(normal motion))
             (evil-quickscope-apply-overlays-forward)
             (evil-quickscope-apply-overlays-backward)))

         (advice-add 'evil-quickscope-update-overlays-bidirectional
                     :override
                     #'nadvice/evil-quickscope-update-overlays-bidirectional))

     (global-evil-quickscope-always-mode +1)
   #+END_SRC
**** evil-visualstar
   For example, press =viW*=

   #+BEGIN_SRC emacs-lisp
     (require 'evil-visualstar)
     (setq evil-visualstar/persistent t)
     (global-evil-visualstar-mode t)
   #+END_SRC
**** evil-multicursor
   [[https://github.com/gabesoft/evil-mc]]
   =grm= create cursor for all matching selected
   =gru= undo all cursors
   =grs= pause cursor
   =grr= resume cursor
   =grh= make cursor here
   =C-p=, =C-n= previous cursor, next cursor

   #+BEGIN_SRC emacs-lisp
;     (require 'evil-mc)
;     (global-evil-mc-mode 1)
   #+END_SRC
**** evil-matchit

   #+BEGIN_SRC emacs-lisp
     (global-evil-matchit-mode t)
   #+END_SRC
**** evil-nerdcommenter
   [[https://github.com/redguardtoo/evil-nerd-commenter]]

   #+BEGIN_SRC emacs-lisp
     (require 'evil-nerd-commenter)
     (evilnc-default-hotkeys)
   #+END_SRC
**** evil-exchange
   Easy text exchange operator for Evil [[https://github.com/Dewdrops/evil-exchange]]

   Default bindings

   =gx= (evil-exchange)

   On the first use, define (and highlight) the first {motion} to exchange. On
   the second use, define the second {motion} and perform the exchange.

   =gX= (evil-exchange-cancel)

   Clear any {motion} pending for exchange.

   Notes

   1. =gx= (and =gX=) can also be used from visual mode, which is sometimes easier
      than coming up with the right {motion}
   2. If you're using the same motion again (e.g. exchanging two words using
      =gxiw=), you can use . (evil-repeat) the second time.
   3. =gxx= works as you expect.

   I.e. to exchange two words, place your cursor on the first word and type
   =gxiw=. Then move to the second word and type =gxiw= again.


   #+BEGIN_SRC emacs-lisp
     (evil-exchange-install)
   #+END_SRC

**** bind-map
   An evil-leader replacement

[[https://github.com/justbur/emacs-bind-map][GitHub - justbur/emacs-bind-map: Bind personal keymaps in multiple locations]]
   +https://github.com/noctuid/general.el+

   #+BEGIN_SRC emacs-lisp
     (require 'bind-map)
     (bind-map qq/base-leader-map
       :keys ("M-m")
       :evil-keys ("SPC")
       :evil-states (normal motion visual))
   #+END_SRC

*** Common Settings
   Set the cursor color for different evil mode:

   #+BEGIN_SRC emacs-lisp
     (setq evil-search-module 'evil-search
           evil-magic 'very-magic
   #+END_SRC

**** Set the cursor color for different evil mode:

   #+BEGIN_SRC emacs-lisp
           evil-emacs-state-cursor '("red" box)
           evil-normal-state-cursor '("green" box)
           evil-visual-state-cursor '("orange" box)
           evil-insert-state-cursor '("red" bar)
           evil-replace-state-cursor '("red" bar)
           evil-operator-state-cursor '("red" hollow)
   #+END_SRC

**** Search word instead of symbol
   [[https://bitbucket.org/lyro/evil/issue/360/possible-evil-search-symbol-forward]]

   #+BEGIN_SRC emacs-lisp
           evil-symbol-word-search t
   #+END_SRC

**** Miscellaneous

   #+BEGIN_SRC emacs-lisp
           evilnc-hotkey-comment-operator "gc"

           evil-want-fine-undo 'fine

           evil-jumper-auto-center t
           evil-jumper-file (concat qq/cache-directory "evil-jumps")
           evil-jumper-auto-save-interval 3600)
   #+END_SRC

*** Git-Timemachine
   Gives all bindings of =git-timemachine= higher priority than any =Evil= binding (but only in normal state).
   Refer [[https://bitbucket.org/lyro/evil/issues/511/let-certain-minor-modes-key-bindings][here]]

   #+BEGIN_SRC emacs-lisp
      (evil-make-overriding-map git-timemachine-mode-map 'normal)
      (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps)
   #+END_SRC

*** Command =*= and =#=
   The =evil-mode= command =*= and =#= behave differently than the way I used to
   know in =Vim=. It only search subword not the whole word. I.e, if a cursor is
   in 'mamb' for keyword mamb_ctrl_scaleConversion. Then only 'mamb' will be
   search. I wanted to have both behaviour around, so I made a toggle function:

   #+BEGIN_SRC emacs-lisp
     (defun qq/toggle-evil-search ()
       "Toggle Evil search mode between symbol search or word search"
       (interactive)
       (setq-default evil-symbol-word-search
                     (if (eq evil-symbol-word-search t) nil t)))
   #+END_SRC

*** Initial evil state for some major mode

   #+BEGIN_SRC emacs-lisp
     (cl-loop for (mode . state) in
           '((minibuffer-inactive-mode . emacs)
             (ggtags-global-mode . emacs)
             (grep-mode . emacs)
             (Info-mode . emacs)
             (term-mode . emacs)
             (refine-mode . emacs)
;             (anaconda-nav-mode . emacs)
             (log-edit-mode . emacs)
             (vc-log-edit-mode . emacs)
             (magit-log-edit-mode . emacs)
;             (inf-ruby-mode . emacs)
;             (direx:direx-mode . emacs)
;             (yari-mode . emacs)
;             (erc-mode . emacs)
             (neotree-mode . normal)
             (rtags-mode . emacs)
;             (w3m-mode . emacs)
             (gud-mode . normal)
;             (help-mode . emacs)
             (eshell-mode . emacs)
             (shell-mode . emacs)
;             (message-mode . emacs)
;             (fundamental-mode . emacs)
;             (weibo-timeline-mode . emacs)
;             (weibo-post-mode . emacs)
;             (sr-mode . emacs)
;             (dired-mode . emacs)
;             (compilation-mode . emacs)
             (speedbar-mode . emacs)
             (messages-buffer-mode . normal)
             (magit-commit-mode . insert)
             (magit-diff-mode . normal)
             (browse-kill-ring-mode . normal)
             (etags-select-mode . normal)
;             (js2-error-buffer-mode . emacs)
             )
           do (evil-set-initial-state mode state))
   #+END_SRC

*** Define my own text objects
   Works on evil v1.0.9 using older method
   @see [[http://stackoverflow.com/questions/18102004/emacs-evil-mode-how-to-create-a-new-text-object-to-select-words-with-any-non-sp]]

   #+BEGIN_SRC emacs-lisp
     (defmacro define-and-bind-text-object (key start-regex end-regex)
       (let ((inner-name (make-symbol "inner-name"))
             (outer-name (make-symbol "outer-name")))
         `(progn
            (evil-define-text-object ,inner-name (count &optional beg end type)
              (evil-select-paren ,start-regex ,end-regex beg end type count nil))
            (evil-define-text-object ,outer-name (count &optional beg end type)
              (evil-select-paren ,start-regex ,end-regex beg end type count t))
            (define-key evil-inner-text-objects-map ,key (quote ,inner-name))
            (define-key evil-outer-text-objects-map ,key (quote ,outer-name)))))
   #+END_SRC

**** between dollar signs:
   #+BEGIN_SRC emacs-lisp
     (define-and-bind-text-object "$" "\\$" "\\$")
   #+END_SRC
**** between pipe characters:
   #+BEGIN_SRC emacs-lisp
     (define-and-bind-text-object "|" "|" "|")
   #+END_SRC
**** trimmed line
   #+BEGIN_SRC emacs-lisp
     (define-and-bind-text-object "l" "^ *" " *$")
   #+END_SRC
**** angular template
   #+BEGIN_SRC emacs-lisp
     (define-and-bind-text-object "r" "\{\{" "\}\}")
   #+END_SRC

*** Term Settings
   #+BEGIN_SRC emacs-lisp
     (defun qq/send-string-to-terminal (string)
       (unless (display-graphic-p) (send-string-to-terminal string)))

     (defun qq/evil-terminal-cursor-change ()
       (when (string= (getenv "TERM_PROGRAM") "iTerm.app")
        (add-hook 'evil-insert-state-entry-hook (lambda () (qq/send-string-to-terminal "\e]50;CursorShape=1\x7")))
        (add-hook 'evil-insert-state-exit-hook (lambda () (qq/send-string-to-terminal "\e]50;CursorShape=0\x7"))))
       (when (and (getenv "TMUX") (string= (getenv "TERM_PROGRAM") "iTerm.app"))
        (add-hook 'evil-insert-state-entry-hook (lambda () (qq/send-string-to-terminal "\ePtmux;\e\e]50;CursorShape=1\x7\e\\")))
        (add-hook 'evil-insert-state-exit-hook (lambda () (qq/send-string-to-terminal "\ePtmux;\e\e]50;CursorShape=0\x7\e\\")))))

     (add-hook 'after-make-frame-functions (lambda (frame) (qq/evil-terminal-cursor-change)))
     (qq/evil-terminal-cursor-change)
   #+END_SRC

*** evil-ex-search behaviour
   #+BEGIN_SRC emacs-lisp
     (defadvice evil-ex-search-next (after advice-for-evil-ex-search-next activate)
       (recenter))

     (defadvice evil-ex-search-previous (after advice-for-evil-ex-search-previous activate)
       (recenter))
   #+END_SRC

*** Bindings
**** Global Mode Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-global-binding
    :END:
   Using The table below as the source for generating [[Evil Global Bindings][Evil Global Bindings]]

   #+TBLNAME: evil_global_keys
      | Combo | Description                  | Command          |
      |-------+------------------------------+------------------|
      | C-w   | Prefix for windows operation | 'evil-window-map |

**** Normal Mode Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-normal-binding
    :END:
   Using The table below as the source for generating [[Evil Normal Bindings][Evil Normal Bindings]]

   #+TBLNAME: evil_std_keys
      | Combo       | Description                                | Command                                              |
      |-------------+--------------------------------------------+------------------------------------------------------|
      | C-b         | Scroll one page up                         | 'evil-scroll-up                                      |
      | C-f         | Scroll one page down                       | 'evil-scroll-down                                    |
      | [ SPC       | Insert empty line above current line       | (bind (evil-insert-newline-above) (forward-line))    |
      | ] SPC       | Insert empty line below current line       | (bind (evil-insert-newline-below) (forward-line -1)) |
      | [ e         | Move current line up one line              | (kbd "ddkP")                                         |
      | ] e         | Move current line down one line            | (kbd "ddp")                                          |
      | [ b         | Jump to the previous buffer                | 'previous-buffer                                     |
      | ] b         | Jump to the next buffer                    | 'next-buffer                                         |
      | [ q         | Jump to the previous error                 | 'previous-error                                      |
      | ] q         | Jump to the next error                     | 'next-error                                          |
      | C-j         | Navigate cursor to the lower window        | 'windmove-down                                       |
      | C-k         | Navigate cursor to the upper window        | 'windmove-up                                         |
      | C-h         | Navigate cursor to the window on the left  | 'windmove-left                                       |
      | C-l         | Navigate cursor to the window on the right | 'windmove-right                                      |
      | C-a         | Increment number at cursor                 | 'evil-numbers/inc-at-pt                              |
      | -           | Decrement number at cursor                 | 'evil-numbers/dec-at-pt                              |
      | Q           | Close a window                             | 'qq/window-killer                                    |
      | Y           |                                            | (kbd "y$")                                           |
      | g ]         |                                            | 'ggtags-find-definition                              |
      | g [         |                                            | 'ggtags-find-reference                               |
      | g p         |                                            | 'hydra-projectile/body                               |

**** Motion Mode Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-motion-binding
    :END:
   Using The table below as the source for generating [[Evil Motion Bindings][Evil Motion Bindings]]

   #+TBLNAME: evil_motion_keys
      | Combo | Description                                | Command                    |
      |-------+--------------------------------------------+----------------------------|
      | C-j   | Navigate cursor to the lower window        | 'windmove-down             |
      | C-k   | Navigate cursor to the upper window        | 'windmove-up               |
      | C-h   | Navigate cursor to the window on the left  | 'windmove-left             |
      | C-l   | Navigate cursor to the window on the right | 'windmove-right            |
      | j     |                                            | 'evil-next-visual-line     |
      | k     |                                            | 'evil-previous-visual-line |

**** Visual Mode Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-visual-binding
    :END:
   Using The table below as the source for generating [[Evil Visual Bindings][Evil Visual Bindings]]

   #+TBLNAME: evil_visual_keys
      | Combo | Description                      | Command      |
      |-------+----------------------------------+--------------|
      | , e   | Execute selected lisp expression | 'eval-region |

**** Ex Mode Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-ex-binding
    :END:
   Using The table below as the source for generating [[Evil Ex Bindings][Evil Ex Bindings]]

   #+TBLNAME: evil_ex_keys
      | Combo | Description   | Command        |
      |-------+---------------+----------------|
      | Q     | Butter finger | 'evil-quit     |
      | QA    | Butter finger | 'evil-quit-all |
      | Qa    | Butter finger | 'evil-quit-all |

**** Buffer Selection Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-bs-binding
    :END:
   Using The table below as the source for generating [[Evil BS Bindings][Evil BS Bindings]]

   #+TBLNAME: evil_bs_keys
      | Combo | Mode        | Evil Mode | Description | Command             |
      | h     | bs-mode-map | normal    |             | 'evil-backward-char |
      | q     | bs-mode-map | normal    |             | 'bs-abort           |
      | j     | bs-mode-map | normal    |             | 'bs-down            |
      | k     | bs-mode-map | normal    |             | 'bs-up              |
      | l     | bs-mode-map | normal    |             | 'evil-forwared-char |
      | RET   | bs-mode-map | normal    |             | 'bs-select          |

**** Evil-Leader Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-leader-binding
    :END:
   Using The table below as the source for generating [[Evil Leader Bindings][Evil Leader Bindings]]

       | bf | | 'beginning-of-defun |
       | bu | | 'backward-up-list |
       | bb | | 'back-to-previous-buffer |
       | ef | | 'end-of-defun |
       | ddb | | 'sdcv-search-pointer ; in buffer |
       | ddt | | 'sdcv-search-input+ ;; in tip |
       | ddd | | 'my-lookup-dict-org |
       | ddw | | 'define-word |
       | ddp | | 'define-word-at-point |
       | mf | | 'mark-defun |
       | em | | 'erase-message-buffer |
       | sd | | 'sudo-edit |
       | sc | | 'shell-command |
       | aa | | 'copy-to-x-clipboard ; used frequently |
       | aw | | 'ace-swap-window |
       | af | | 'ace-maximize-window |
        zz | | 'paste-from-x-clipboard ; used frequently |
       | cy | | 'strip-convert-lines-into-one-big-string |
       | bs | | '(lambda () (interactive) (goto-edge-by-comparing-font-face -1)) |
       | es | | 'goto-edge-by-comparing-font-face |
       | fl | | 'cp-filename-line-number-of-current-buffer |
       | fn | | 'cp-filename-of-current-buffer |
       | fp | | 'cp-fullpath-of-current-buffer |
       | dj | | 'dired-jump ;; open the dired from current file |
       | ff | | 'toggle-full-window ;; I use WIN+F in i3 |
       | trm | | 'get-term |
       | epy | | 'emmet-expand-yas |
       | epl | | 'emmet-expand-line |
       | rd | | 'evilmr-replace-in-defun |
       | rb | | 'evilmr-replace-in-buffer |
       | tt | | 'evilmr-tag-selected-region ;; recommended |
       | rt | | 'evilmr-replace-in-tagged-region ;; recommended |
       | tua | | 'artbollocks-mode |
       | cby | | 'cb-switch-between-controller-and-view |
       | cbu | | 'cb-get-url-from-controller |
       | ht | | 'etags-select-find-tag-at-point ; better than find-tag C-] |
       | hp | | 'etags-select-find-tag |
       | hm | | 'counsel-bookmark-goto |
       | yy | | 'browse-kill-ring |
       | rjs | | 'run-js |
       | rmz | | 'run-mozilla |
       | rpy | | 'run-python |
       | rlu | | 'run-lua |
       | tci | | 'toggle-company-ispell |
       | kb | | 'kill-buffer-and-window ;; "k" is preserved to replace "C-g" |
       | it | | 'issue-tracker-increment-issue-id-under-cursor |
       | ls | | 'highlight-symbol |
       | lq | | 'highlight-symbol-query-replace |
       | ln | | 'highlight-symbol-nav-mode ; use M-n/M-p to navigation between symbols |
       | im | | 'counsel-imenu-goto |
       | ii | | 'ido-imenu |
       | ij | | 'rimenu-jump |
       ;; @see https://github.com/pidu/git-timemachine
       ;; p: previous; n: next; w:hash; W:complete hash; g:nth version; q:quit
       | tdb | | 'tidy-buffer |
       | tdl | | 'tidy-current-line |
       ;; toggle overview,  @see http://emacs.wordpress.com/2007/01/16/quick-and-dirty-code-folding/
       | ov | | 'my-overview-of-current-buffer |
       | or | | 'open-readme-in-git-root-directory |
       | oo | | 'compile |
       | c$ | | 'org-archive-subtree ; `C-c $' |
       ;; org-do-demote/org-do-premote support selected region
       | c< | | 'org-do-promote ; `C-c C-<' |
       | c> | | 'org-do-demote ; `C-c C->' |
       | cam | | 'org-tags-view ; `C-c a m': search items in org-file-apps by tag |
       | cxi | | 'org-clock-in ; `C-c C-x C-i' |
       | cxo | | 'org-clock-out ; `C-c C-x C-o' |
       | cxr | | 'org-clock-report ; `C-c C-x C-r' |
       | mq | | 'lookup-doc-in-man |
       | sgg | | 'w3m-google-search |
       | sgf | | 'w3m-google-by-filetype |
       | sgd | | 'w3m-search-financial-dictionary |
       | sgq | | 'w3m-stackoverflow-search |
       | sgj | | 'w3m-search-js-api-mdn |
       | sga | | 'w3m-java-search |
       | sgh | | 'w3mext-hacker-search ; code search in all engines with firefox |
       | qq | | 'my-grep |
       | xc | | 'save-buffers-kill-terminal |
       | rr | | 'counsel-recentf-goto |
       | rh | | 'counsel-yank-bash-history ; bash history command => yank-ring |
       | dfa | | 'diff-region-tag-selected-as-a |
       | dfb | | 'diff-region-compare-with-b |
       | di | | 'evilmi-delete-items |
       | si | | 'evilmi-select-items |
       | jb | | 'js-beautify |
       | jpp | | 'js2-print-json-path |
       | se | | 'string-edit-at-point |
       | xe | | 'eval-last-sexp |
       | x0 | | 'delete-window |
       | x1 | | 'delete-other-windows |
       | x2 | | 'split-window-vertically |
       | x3 | | 'split-window-horizontally |
       | xrw | | 'rotate-windows |
       | xt | | 'toggle-window-split |
       | su | | 'winner-undo |
       | xu | | 'winner-undo |
       | to | | 'toggle-web-js-offset |
       | sl | | 'sort-lines |
       | lo | | 'moz-console-log-var |
       | lj | | 'moz-load-js-file-and-send-it |
       | lk | | 'latest-kill-to-clipboard |
       | mr | | 'moz-console-clear |
       | hst | | 'hs-toggle-fold |
       | hsa | | 'hs-toggle-fold-all |
       | hsh | | 'hs-hide-block |
       | hss | | 'hs-show-block |
       | gt | | 'ggtags-find-tag-dwim |
       | gr | | 'ggtags-find-reference |
       | fb | | 'flyspell-buffer |
       | fe | | 'flyspell-goto-next-error |
       | fa | | 'flyspell-auto-correct-word |
       | pe | | 'flymake-goto-prev-error |
       | ne | | 'flymake-goto-next-error |
       | fw | | 'ispell-word |
       | bc | | '(lambda () (interactive) (wxhelp-browse-class-or-api (thing-at-point 'symbol))) |
       | ma | | 'mc/mark-all-like-this-in-defun |
       | mw | | 'mc/mark-all-words-like-this-in-defun |
       | ms | | 'mc/mark-all-symbols-like-this-in-defun |
       | md | | 'mc/mark-all-like-this-dwim |
       | me | | 'mc/edit-lines |
       | otl | | 'org-toggle-link-display |
       | om | | 'toggle-org-or-message-mode |
       | ar | | 'align-regexp |
       | ww | | 'save-buffer |
       | wrn | | 'httpd-restart-now |
       | wrd | | 'httpd-restart-at-default-directory |
       | so | | 'sos |
       | xx | | 'er/expand-region |
       | vv | | 'scroll-other-window |
       | vu | | 'scroll-other-window-up |

   #+TBLNAME: evil_leader_keys
      | Combo | Description                     | Command                                          |
      |-------+---------------------------------+--------------------------------------------------|
      | %     |                                 | 'ctl-x-5-prefix                                  |
      | \\    |                                 | 'evil-execute-in-emacs-state                     |
      | 0     |                                 | 'select-window-0                                 |
      | 1     |                                 | 'select-window-1                                 |
      | 2     |                                 | 'select-window-2                                 |
      | 3     |                                 | 'select-window-3                                 |
      | 4     |                                 | 'select-window-4                                 |
      | 5     |                                 | 'select-window-5                                 |
      | 6     |                                 | 'select-window-6                                 |
      | 7     |                                 | 'select-window-7                                 |
      | 8     |                                 | 'select-window-8                                 |
      | 9     |                                 | 'select-window-9                                 |
      | b b   |                                 | 'switch-to-buffer                                |
      | b k   | Kill current buffer             | 'ido-kill-buffer                                 |
      | b S   |                                 | 'bs-show                                         |
      | b d   |                                 | 'kill-this-buffer                                |
      | b e   |                                 | 'evil-buffer                                     |
      | b i   |                                 | 'ibuffer                                         |
      | b q   |                                 | 'kill-buffer-and-window                          |
      | b f   |                                 | 'ido-find-file                                   |
      | b x   |                                 | 'ido-switch-buffer                               |
      | C     |                                 | 'customize-group                                 |
      | c i   |                                 | 'evilnc-comment-or-uncomment-lines               |
      | c l   |                                 | 'evilnc-comment-or-uncomment-to-the-line         |
      | c c   |                                 | 'evilnc-copy-and-comment-lines                   |
      | c p   |                                 | 'evilnc-comment-or-uncomment-paragraphs          |
      | d     |                                 | 'dired-jump                                      |
      | e l   |                                 | 'eval-last-sexp                                  |
      | e b   |                                 | 'eval-buffer                                     |
      | e e   |                                 | 'eval-expression                                 |
      | e d   |                                 | 'eval-defun                                      |
      | j c   |                                 | 'evil-ace-jump-char-mode                         |
      | j l   |                                 | 'evil-ace-jump-line-mode                         |
      | j w   |                                 | 'evil-ace-jump-word-mode                         |
      | h     |                                 | help-map                                         |
      | h x   | Describe character under cursor | 'describe-char                                   |
      | h h   |                                 | 'help-for-help-internal                          |
      | h j   |                                 | 'helm-dash-at-point                              |
      | i     |                                 | 'swiper                                          |
      | q     |                                 | 'evil-window-delete                              |
      | P     |                                 | 'package-list-packages                           |
      | s     |                                 | 'save-buffer                                     |
      | t SPC |                                 | 'whitespace-mode                                 |
      | t TAB |                                 | 'c-toggle-syntactic-indentation                  |
      | t w   |                                 | 'toggle-truncate-lines                           |
      | t s   |                                 | 'qq/toggle-evil-search                           |
      | t o   |                                 | 'origami-mode                                    |
      | t f   |                                 | 'toggle-frame-fullscreen                         |
      | t m   |                                 | 'toggle-frame-maximized                          |
      | t g   |                                 | 'gdb-many-windows                                |
      | u u   |                                 | 'undo-tree-visualize                             |
      | u s   |                                 | 'undo-tree-save-state-to-register ; C-x r u      |
      | u r   |                                 | 'undo-tree-restore-state-from-register ; C-x r U |
      | V     |                                 | (bind (term "vim"))                              |
      | v d   |                                 | 'gdb                                             |
      | v k   |                                 | 'gud-kill-yes                                    |
      | v r   |                                 | 'gud-remove                                      |
      | v b   |                                 | 'gud-break                                       |
      | v u   |                                 | 'gud-run                                         |
      | v p   |                                 | 'gud-print                                       |
      | v e   |                                 | 'gud-cls                                         |
      | v n   |                                 | 'gud-next                                        |
      | v s   |                                 | 'gud-step                                        |
      | v i   |                                 | 'gud-stepi                                       |
      | v c   |                                 | 'gud-cont                                        |
      | v f   |                                 | 'gud-finish                                      |
      | x h   |                                 | 'mark-whole-buffer                               |
      | x x   |                                 | 'smex                                            |
      | x n n |                                 | 'narrow-or-widen-dwim                            |
      | x n w |                                 | 'widen                                           |
      | x n d |                                 | 'narrow-to-defun                                 |
      | x n r |                                 | 'narrow-to-region                                |
      | x z   |                                 | 'suspend-frame                                   |
      | y h   |                                 | 'cliphist-paste-item                             |
      | y u   |                                 | 'cliphist-select-item                            |

** Helm
   =Helm= is incremental completion and selection narrowing framework for Emacs.
   It will help steer in the right direction when looking for stuff in Emacs
   (like buffers, files etc)
   Set helm command prefix key, otherwise helm use default prefix "C-x c",
   which is inconvenient because you can accidentially pressed "C-x C-c". Must
   set before helm-config,

   https://github.com/emacs-helm/helm
   http://amitp.blogspot.com/2012/10/emacs-helm-for-finding-files.html

   temporary note:
   if helm is exited uncleanly and starts complaining "Error: Trying to run helm
   within a running helm session," try:
   M-C-c, C-], C-u M-x helm-resume, or (setq helm-alive-p nil)
   https://github.com/emacs-helm/helm/issues/208

*** Init

   #+BEGIN_SRC emacs-lisp
     (require 'helm)

     ;; must set before helm-config,  otherwise helm use default
     ;; prefix "C-x c", which is inconvenient because you can
     ;; accidentially pressed "C-x C-c"
     (setq helm-command-prefix-key "C-c h")

     (require 'helm-config)
     (require 'helm-eshell)
     (require 'helm-files)
     (require 'helm-grep)
     (require 'helm-dash)
   #+END_SRC

*** Settings
   Preferred initial settings for Helm

   #+BEGIN_SRC emacs-lisp

     (setq helm-net-prefer-curl t
           helm-bookmark-show-location t          ; display bookmark location
           helm-scroll-amount 4                         ; scroll 4 lines other window using M-<next>/M-<prior>
           helm-quick-update t                   ; do not display invisible candidates
           helm-idle-delay 0.01                  ; be idle for this many seconds, before updating in delayed sources.
           helm-input-idle-delay 0.01            ; be idle for this many seconds, before updating candidate buffer
           helm-ff-search-library-in-sexp t      ; search for library in `require' and `declare-function' sexp.

           helm-display-header-line nil          ;

           helm-split-window-default-side 'other ; open helm buffer in another window
           helm-split-window-in-side-p t         ; open helm buffer inside current window, not occupy whole other window
           helm-buffers-favorite-modes (append helm-buffers-favorite-modes
                                               '(picture-mode artist-mode))
           helm-candidate-number-limit 200       ; limit the number of displayed canidates
           helm-M-x-requires-pattern 0           ; show all candidates when set to 0
           helm-boring-file-regexp-list          ; do not show these files in helm buffer
           '("\\.git$" "\\.hg$" "\\.svn$" "\\.CVS$" "\\._darcs$" "\\.la$" "\\.o$" "\\.i$")
           helm-ff-file-name-history-use-recentf t
           helm-move-to-line-cycle-in-source t   ; move to end or beginning of source
                                             ; when reaching top or bottom of source.
           ido-use-virtual-buffers t             ; Needed in helm-buffers-list
           helm-buffers-fuzzy-matching t         ; fuzzy matching buffer names when non--nil
                                             ; useful in helm-mini that lists buffers
           helm-dash-browser-func 'eww
           helm-dash-common-docsets '("Boost" "C++" "C")
           )
     (custom-set-variables
      '(helm-never-delay-on-input t)  ;; must be t on Mac OS X
      '(helm-yank-symbol-first t)
      '(helm-quick-update t)
      '(helm-full-frame nil)
      '(helm-locate-command "locate %s '%s'")
      '(helm-ff-auto-update-initial-value nil)
      ;; multi3 instead of strict so i can use multiple regexps separated by spaces.
      '(helm-mp-matching-method 'multi3)
      '(helm-buffer-max-length 20)
      ;; use file-name-history, not recentf
      ;;'(helm-ff-file-name-history-use-recentf nil)
      ;; don't use helm for tab completion in shell buffers
      ;; https://groups.google.com/d/msg/emacs-helm/jmiTit83VhE/ZgTkuf83lQEJ
      '(helm-mode-handle-completion-in-region nil)
      )

   #+END_SRC

     Save current position to mark ring when jumping to a different place and
     enable helm-mode.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)
     (helm-mode 1)
     (diminish 'helm-mode)
   #+END_SRC
*** helm-descbinds configuration

   #+BEGIN_SRC emacs-lisp
     (setq helm-descbinds-window-style 'split-window)
     (helm-descbinds-mode +1)
   #+END_SRC

*** helm-M-x configuration

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-x") 'helm-M-x)
   #+END_SRC

*** Enter search pattern in the header line
   Via: [[https://www.reddit.com/r/emacs/comments/3asbyn/new_and_very_useful_helm_feature_enter_search/][Reddit post]]

   #+BEGIN_SRC emacs-lisp
     (setq helm-echo-input-in-header-line t)
     (defun helm-hide-minibuffer-maybe ()
       (when (with-helm-buffer helm-echo-input-in-header-line)
         (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
           (overlay-put ov 'window (selected-window))
           (overlay-put ov 'face (let ((bg-color (face-background 'default nil)))
                                   `(:background ,bg-color :foreground ,bg-color)))
           (setq-local cursor-type nil))))
     (add-hook 'helm-minibuffer-set-up-hook 'helm-hide-minibuffer-maybe)
   #+END_SRC

*** Keybindings
    :PROPERTIES:
    :CUSTOM_ID: helm-key-binding
    :END:

   The code generated from this table is [[Helm%20Bindings][here]].
   #+TBLNAME: helm_combo
      | Combo    | Mode               | Description                        | Command                                    |
      |----------+--------------------+------------------------------------+--------------------------------------------|
      | <tab>    | helm-map           | Rebind tab to do persistent action | 'helm-execute-persistent-action            |
      | C-i      | helm-map           | Make TAB works in terminal         | 'helm-execute-persistent-action            |
      | C-z      | helm-map           | List actions using C-z             | 'helm-select-action                        |
      | C-j      | helm-map           | navigation down key in helm buffer | 'helm-next-line                            |
      | C-k      | helm-map           | navigation up key in helm buffer   | 'helm-previous-line                        |
      | C-l      | helm-map           | change helm source                 | 'helm-previous-source                      |
      | <return> | helm-grep-mode-map |                                    | 'helm-grep-mode-jump-other-window          |
      | n        | helm-grep-mode-map |                                    | 'helm-grep-mode-jump-other-window-forward  |
      | p        | helm-grep-mode-map |                                    | 'helm-grep-mode-jump-other-window-backward |

*** Keybindings with Evil Leader
    :PROPERTIES:
    :CUSTOM_ID: helm-evil-key-binding
    :END:

   Check for =evil-mode= and =helm-autoloads= before keybindings. Refer to this code
   #+TBLNAME: helm-evil-combo
      | Combo with Evil Leader | Description | Command                 |
      | b s                    |             | 'helm-mini              |
      | f                      |             | 'helm-find-files        |
      | o                      |             | 'helm-imenu             |
      | r t                    |             | 'helm-etags-select      |
      | y s                    |             | 'helm-show-kill-ring    |
      | m                      |             | 'helm-bookmarks         |
      | r r                    |             | 'helm-register          |
      | SPC                    |             | 'helm-M-x               |
      | a                      |             | 'helm-all-mark-rings    |
      | h w                    |             | 'helm-wikipedia-suggest |
      | l                      |             | 'helm-swoop             |
      | L                      |             | 'helm-multi-swoop       |

** Irony
   A alternate Client/Server application that indexes C/C++ code and keeps a persistent
   in-memory database for references

   [[https://github.com/Sarcasm/irony-mode]]

   #+begin_src emacs-lisp
     (add-hook 'c++-mode-hook 'irony-mode)
     (add-hook 'c-mode-hook 'irony-mode)
     (add-hook 'objc-mode-hook 'irony-mode)

     (setq irony-additional-clang-options '("-std=c++11"))

     ;; replace the `completion-at-point' and `complete-symbol' bindings in
     ;; irony-mode's buffers by irony-mode's function
     (defun my-irony-mode-hook ()
     (define-key irony-mode-map [remap completion-at-point]
         'irony-completion-at-point-async)
     (define-key irony-mode-map [remap complete-symbol]
         'irony-completion-at-point-async))
     (add-hook 'irony-mode-hook 'my-irony-mode-hook)
     (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
   #+end_src

*** Irony Eldoc
 #+begin_src emacs-lisp
   (add-hook 'irony-mode-hook 'irony-eldoc)
 #+end_src

*** Company integration
 #+begin_src emacs-lisp
   ;;(eval-after-load 'company
   ;;  '(add-to-list 'company-backends 'company-irony))

   ;;;; (optional) adds CC special commands to `company-begin-commands' in order to
   ;;;; trigger completion at interesting places, such as after scope operator
   ;;;;     std::|
   ;;(add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
 #+end_src

*** C-Headers
   #+begin_src emacs-lisp
     ;;(require 'company-irony-c-headers)
     ;;;; Load with `irony-mode` as a grouped backend
     ;;(eval-after-load 'company
     ;;  '(add-to-list
     ;;    'company-backends '(company-irony-c-headers company-irony)))
   #+end_src

*** Flycheck integration
 #+begin_src emacs-lisp
   (eval-after-load 'flycheck
    '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
 #+end_src

*** Bind TAB for indent-or-complete
 #+begin_src emacs-lisp
   (defun irony--check-expansion ()
   (save-excursion
     (if (looking-at "\\_>") t
       (backward-char 1)
       (if (looking-at "\\.") t
         (backward-char 1)
         (if (looking-at "->") t nil)))))
   (defun irony--indent-or-complete ()
   "Indent or Complete"
   (interactive)
   (cond ((and (not (use-region-p))
               (irony--check-expansion))
          (message "complete")
          (company-complete-common))
         (t
          (message "indent")
          (call-interactively 'c-indent-line-or-region))))
   (defun irony-mode-keys ()
   "Modify keymaps used by `irony-mode'."
   (local-set-key (kbd "TAB") 'irony--indent-or-complete)
   (local-set-key [tab] 'irony--indent-or-complete))
   (add-hook 'c-mode-common-hook 'irony-mode-keys)
 #+end_src

** Git/Magit
*** Settings
   #+BEGIN_SRC emacs-lisp
     (require 'magit)
     (require 'magit-gerrit)
     (require 'evil-magit)
     (setq magit-diff-options '("--histogram"))
     (setq magit-push-always-verify nil)
     (setq magit-stage-all-confirm nil)
     (defadvice magit-status (around qq/magit-fullscreen activate)
         (window-configuration-to-register :magit-fullscreen)
         ad-do-it
         (delete-other-windows))
     (defun qq/magit-quit-session ()
       (interactive)
       (kill-buffer)
       (jump-to-register :magit-fullscreen))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
     (unless (display-graphic-p)
       (diff-hl-margin-mode))
   #+END_SRC

   Setup for =magit-gerrit=

   #+BEGIN_SRC emacs-lisp
     (after 'magit
         (require 'magit-gerrit))
     (setq-default magit-gerrit-ssh-creds qq/gerrit-creds)
   #+END_SRC
*** magit-commit-mode

   #+BEGIN_SRC emacs-lisp
     (setq git-commit-finish-query-functions nil)
     (add-hook 'git-commit-mode-hook
               '(lambda () (auto-fill-mode 0)
                  (evil-insert-state))
               ;; append rather than prepend to git-commit-mode-hook, since the
               ;; thing that turns auto-fill-mode on in the first place is itself
               ;; another hook on git-commit-mode.
               t)

     (custom-set-faces
      '(git-commit-overlong-summary ((t (:inherit nil))))
      '(git-commit-nonempty-second-line ((t (:inherit nil))))
      '(git-commit-summary ((t nil))))
   #+END_SRC

*** Miscellaneous git functions

   [[https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-ivy.el]]

   #+BEGIN_SRC emacs-lisp
     (defun counsel-git-grep-or-find-api (fn git-cmd hint open-another-window)
       "Apply FN on the output lines of GIT-CMD.  HINT is hint when user input.
     IF OPEN-ANOTHER-WINDOW is true, open the file in another window."
       (let ((default-directory (locate-dominating-file
                                 default-directory ".git"))
             (keyword (if (region-active-p)
                          (buffer-substring-no-properties (region-beginning) (region-end))
                        (read-string (concat "Enter " hint " pattern:" ))))
             collection val lst)

         (setq collection (split-string (shell-command-to-string (format git-cmd keyword))
                                        "\n"
                                        t))

         (when (and collection (> (length collection) 0))
           (setq val (if (= 1 (length collection)) (car collection)
                         (ivy-read (format " matching \"%s\":" keyword) collection)))
           (funcall fn open-another-window val))))

     (defun counsel-git-grep (&optional open-another-window)
       "Grep in the current git repository.
     If OPEN-ANOTHER-WINDOW is not nil, results are displayed in new window."
       (interactive "P")
       (let (fn)
         (setq fn (lambda (open-another-window val)
                    (let ((lst (split-string val ":")))
                      (funcall (if open-another-window 'find-file-other-window 'find-file)
                               (car lst))
                      (let ((linenum (string-to-number (cadr lst))))
                        (when (and linenum (> linenum 0))
                          (goto-char (point-min))
                          (forward-line (1- linenum)))))))

         (counsel-git-grep-or-find-api fn
                                       "git --no-pager grep --full-name -n --no-color -i -e \"%s\""
                                       "grep"
                                       open-another-window)))

     (defun counsel-git-find-file (&optional open-another-window)
       "Find file in the current git repository.
     If OPEN-ANOTHER-WINDOW is not nil, results are displayed in new window."
       (interactive "P")
       (let (fn)
         (setq fn (lambda (open-another-window val)
                    (funcall (if open-another-window 'find-file-other-window 'find-file) val)))
         (counsel-git-grep-or-find-api fn
                                       "git ls-tree -r HEAD --name-status | grep \"%s\""
                                       "file"
                                       open-another-window)))

     (defun counsel-git-grep-yank-line (&optional insert-line)
       "Grep in the current git repository and yank the line.
     If INSERT-LINE is not nil, insert the line grepped"
       (interactive "P")
       (let (fn)
         (setq fn (lambda (unused-param val)
                    (let ((lst (split-string val ":")) text-line)
                      ;; the actual text line could contain ":"
                      (setq text-line (replace-regexp-in-string (format "^%s:%s:" (car lst) (nth 1 lst)) "" val))
                      ;; trim the text line
                      (setq text-line (replace-regexp-in-string (rx (* (any " \t\n")) eos) "" text-line))
                      (kill-new text-line)
                      (if insert-line (insert text-line))
                      (message "line from %s:%s => kill-ring" (car lst) (nth 1 lst)))))

         (counsel-git-grep-or-find-api fn
                                       "git --no-pager grep --full-name -n --no-color -i -e \"%s\""
                                       "grep"
                                       nil)))

     (defvar counsel-my-name-regex ""
       "My name used by `counsel-git-find-my-file', support regex like '[Tt]om [Cc]hen'.")

     (defun counsel-git-find-my-file (&optional num)
       "Find my files in the current git repository.
     If NUM is not nil, find files since NUM weeks ago.
     Or else, find files since 24 weeks (6 months) ago."
       (interactive "P")
       (let (fn cmd)
         (setq fn (lambda (open-another-window val)
                    (find-file val)))
         (unless (and num (> num 0))
           (setq num 24))
         (setq cmd (concat "git log --pretty=format: --name-only --since=\""
                                               (number-to-string num)
                                               " weeks ago\" --author=\""
                                               counsel-my-name-regex
                                               "\" | grep \"%s\" | sort | uniq"))
         ;; (message "cmd=%s" cmd)
         (counsel-git-grep-or-find-api fn cmd "file" nil)))
   #+END_SRC

*** git-blame-line
   This function runs git blame on the line the cursor is on. It prints the
   short commit id, author, and commit date into the =minibuffer=. It also
   copies the short commit id to the kill ring so you can paste it
   somewhere else if you need to. From [[http://jayconrod.com/posts/67/emacs-run-gitblame-on-the-current-line][here]].

   #+BEGIN_SRC emacs-lisp
     (defun git-blame-line ()
       "Runs `git blame` on the current line and
        adds the commit id to the kill ring"
       (interactive)
       (let* ((line-number (save-excursion
                             (goto-char (point-at-bol))
                             (+ 1 (count-lines 1 (point)))))
              (line-arg (format "%d,%d" line-number line-number))
              (commit-buf (generate-new-buffer "*git-blame-line-commit*")))
         (call-process "git" nil commit-buf nil
                       "blame" (buffer-file-name) "-L" line-arg)
         (let* ((commit-id (with-current-buffer commit-buf
                             (buffer-substring 1 9)))
                (log-buf (generate-new-buffer "*git-blame-line-log*")))
           (kill-new commit-id)
           (call-process "git" nil log-buf nil
                         "log" "-1" "--pretty=%h   %an   %s" commit-id)
           (with-current-buffer log-buf
             (message "Line %d: %s" line-number (buffer-string)))
           (kill-buffer log-buf))
         (kill-buffer commit-buf)))
   #+END_SRC

*** git-gutter-fringe
   Enable =Git-Gutter+= globally

   #+BEGIN_SRC emacs-lisp
     (require 'git-gutter-fringe)
     (global-git-gutter-mode +1)

     (add-hook 'git-gutter:update-hooks 'magit-revert-buffer-hook)
   #+END_SRC
*** git-messenger

   #+BEGIN_SRC emacs-lisp
     ;; show details to play `git blame' game
     (setq git-messenger:show-detail t)
     (add-hook 'git-messenger:after-popup-hook
               (lambda (msg)
                 ;; extract commit id and put into the kill ring
                 (when (string-match "\\(commit *: *\\)\\([0-9a-z]+\\)" msg)
                   (copy-yank-str (match-string 2 msg))
                   (message "commit hash %s => clipboard & kill-ring" (match-string 2 msg))
                   )))
   #+END_SRC

*** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: evil-magit-binding
    :END:
   Using The table below as the source for generating [[Evil Magit Bindings][Evil Magit Bindings]]

   #+TBLNAME: evil_magit_keys
      | Evil Leader Combo | Description | Command                                                   |
      |-------------------+-------------+-----------------------------------------------------------|
      | g =               |             | 'git-gutter:popup-hunk                                    |
      | g a               |             | 'vc-annotate                                              |
      | g b               |             | 'magit-blame                                              |
      | g C               |             | 'magit-commit                                             |
      | g f               |             | 'counsel-git-find-file                                    |
      | g g               |             | 'counsel-git-grep ; quickest grep should be easy to press |
      | g i               |             | 'git-blame-line                                           |
      | g j               |             | 'git-gutter:next-hunk                                     |
      | g k               |             | 'git-gutter:previous-hunk                                 |
      | g L               |             | 'vc-print-log                                             |
      | g l               |             | 'magit-log                                                |
      | g m               |             | 'git-messenger:popup-message                              |
      | g n               |             | 'counsel-git-find-my-file                                 |
      | g p               |             | 'git-gutter:stage-hunk                                    |
      | g r               |             | 'git-gutter:revert-hunk                                   |
      | g y               |             | 'counsel-git-grep-yank-line                               |
      | g s               |             | 'magit-status                                             |
      | g t               |             | 'git-timemachine                                          |
      | g u               |             | 'git-gutter:toggle                                        |
      | g x               |             | 'vc-next-action                                           |
      | g v               |             | 'git-gutter:set-start-revision                            |

** Keyfreq
   Track Emacs commands frequency, github [[https://github.com/dacap/keyfreq][here]].
   Use keyfreq-show to see how many times you used a command.

   #+begin_src emacs-lisp
     (require 'keyfreq)
     (keyfreq-mode 1)
     (keyfreq-autosave-mode 1)
   #+end_src

** Neotree
   A emacs tree plugin like =NERD tree= for =Vim=. Refer more [[http://www.emacswiki.org/emacs/NeoTree][here]].

   #+begin_src emacs-lisp
     (require 'neotree)
   #+end_src

   Every time when the neotree window is opened, let it find current file
   and jump to node.
   #+begin_src emacs-lisp
     (setq neo-smart-open t)
   #+end_src

*** Local keybindings with Evil
    :PROPERTIES:
    :CUSTOM_ID: evil-neotree-bindings
    :END:

   The table below will be generated as key-bindings [[Evil Neotree Bindings][here]].
   #+TBLNAME: neotree-evil-keys
      | Combo | Mode                        | Description | Command        |
      | TAB   | evil-normal-state-local-map |             | 'neotree-enter |
      | SPC   | evil-normal-state-local-map |             | 'neotree-enter |
      | q     | evil-normal-state-local-map |             | 'neotree-hide  |
      | RET   | evil-normal-state-local-map |             | 'neotree-enter |

*** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: evil-neotree2-binding
    :END:
   Using The table below as the source for generating [[Neotree with Evil Bindings][Neotree with Evil Bindings]]

   #+TBLNAME: evil_neotree_keys
      | Evil Leader Combo | Description | Command                                                   |
      |-------------------+-------------+-----------------------------------------------------------|
      | n n               |             | 'neotree-toggle                                           |
      | n f               |             | 'neotree-find ; open file in current buffer in neotree    |
      | n d               |             | 'neotree-project-dir                                      |
      | n h               |             | 'neotree-hide                                             |
      | n s               |             | 'neotree-show                                             |

** Origami
   Text folding solution for Emacs

   [[https://github.com/gregsexton/origami.el]]

   #+BEGIN_SRC emacs-lisp
       (require 'origami)
       (add-hook 'prog-mode-hook 'origami-mode)
   #+END_SRC

*** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: evil-origami-binding
    :END:
   Using The table below as the source for generating [[Evil Origami Bindings][Evil Origami Bindings]]

   #+TBLNAME: evil_origami_keys
      | Combo | Description                                                                                                                 | Command                         |
      |-------+-----------------------------------------------------------------------------------------------------------------------------+---------------------------------|
      | z o   | open fold node                                                                                                              | 'origami-open-node              |
      | z O   | open fold node and all of its children                                                                                      | 'origami-open-node-recursively  |
      | z s   | Like origami-open-node but also opens parent fold nodes recursively so as to ensure the position where point is is visible. | 'origami-show-node              |
      | z c   | Close a fold node.                                                                                                          | 'origami-close-node             |
      | z C   | Close a fold node and all of its children                                                                                   | 'origami-close-node-recursively |
      | z a   | Toggle open or closed a fold node.                                                                                          | 'origami-toggle-node            |
      | z m   | Close all fold in the buffer                                                                                                | 'origami-close-all-nodes        |
      | z r   | Open all fold in the buffer                                                                                                 | 'origami-open-all-nodes         |
      | z d   | Close all fold but the current one                                                                                          | 'origami-show-only-node         |
      | z n   | Move to the next fold.                                                                                                      | 'origami-next-fold              |
      | z p   | Move to the previous fold.                                                                                                  | 'origami-previous-fold          |

** Org
   =org-mode= is a plain text system for organising information and notes.
   [[http://orgmode.org]]
   [[http://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/]]

*** Settings
**** Enable =org-mode=
   #+BEGIN_SRC emacs-lisp
     (require 'org)
     (require 'org-bullets)
     (require 'org-eldoc)
   #+END_SRC

**** Change =org-directory= location
   And ensure the folder exist.

   #+BEGIN_SRC emacs-lisp
     (setq org-directory "~/Dropbox/org")
     (unless (file-exists-p org-directory)
       (make-directory org-directory))
   #+END_SRC

**** Enable =writegood-mode=

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
                    (lambda ()
                      (writegood-mode)))
   #+END_SRC

**** Enable flyspell and rainbow-mode

   #+BEGIN_SRC emacs-lisp
       (add-hook 'org-mode-hook (lambda ()
                                  (when (or (executable-find "aspell")
                                            (executable-find "ispell")

                                            (executable-find "hunspell"))
                                    (flyspell-mode))
                                  (diminish 'org-indent-mode)
                                  (rainbow-mode)
                                  ))
   #+END_SRC
**** Enable =markdown= export

   #+BEGIN_SRC emacs-lisp
       (require 'ox-md nil t)
   #+END_SRC

**** Use =ido= for completion

   #+BEGIN_SRC emacs-lisp
       (setq org-completion-use-ido t
   #+END_SRC

**** Elipsis appearance

   #+BEGIN_SRC emacs-lisp
             ;org-ellipsis "▼"
             org-ellipsis "⤵"
             org-columns-ellipses "…"
   #+END_SRC

**** Press =RET= follow links

   #+BEGIN_SRC emacs-lisp
             org-return-follows-link t
   #+END_SRC
**** refile-target

   #+BEGIN_SRC emacs-lisp
             org-refile-targets '((nil :maxlevel . 9)
                                  (org-agenda-files :maxlevel . 9))
   #+END_SRC
**** Default note file

   #+BEGIN_SRC emacs-lisp
             org-default-notes-file "organizer.org"
   #+END_SRC
**** Capture templates

   #+BEGIN_SRC emacs-lisp
             org-capture-templates
             '(("t" "Todo" entry (file+headline qq/inbox-org-file "TODO")
                "* TODO %?\n%U\n%a\n")
               ("n" "Note" entry (file+headline qq/inbox-org-file "NOTES")
                "* %? :NOTE:\n%U\n%a\n")
               ("m" "Meeting" entry (file qq/inbox-org-file)
                "* MEETING %? :MEETING:\n%U")
               ("j" "Journal" entry (file+datetree (concat org-directory "/journal.org"))
                "* %?\n%U\n"))
   #+END_SRC

**** Indentation

   #+BEGIN_SRC emacs-lisp
             org-startup-indented t
             org-indent-indentation-per-level 3
             org-src-tab-acts-natively t)
   #+END_SRC

**** Nice bulleted lists.

   #+begin_src emacs-lisp
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   #+end_src

**** Evil integration

   #+BEGIN_SRC emacs-lisp
       (after 'evil
         (add-hook 'org-capture-mode-hook 'evil-insert-state))
   #+END_SRC

*** org-todo
**** Enable logging when tasks are complete.
   This puts a time-stamp on the completed task. Since I usually am doing quite
   a few things at once, I added the INPROGRESS keyword and made the color blue.

   #+BEGIN_SRC emacs-lisp
     (setq org-log-done t
           org-todo-keywords '((sequence "TODO" "INPROGRESS" "DONE"))
           org-todo-keyword-faces '(("INPROGRESS" . (:foreground "blue" :weight bold))))

   #+END_SRC

**** Allow changing between todo stats directly by hotkey

   #+BEGIN_SRC emacs-lisp
     (setq org-use-fast-todo-selection t
             org-treat-S-cursor-todo-selection-as-state-change nil
             org-todo-keywords
             '((sequence "TODO(t)" "NEXT(n@)" "|" "DONE(d)")
               (sequence "WAITING(w@/!)" "|" "CANCELLED(c@/!)"))

             org-todo-state-tags-triggers
             ' (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("TODO" ("WAITING") ("CANCELLED"))
                ("NEXT" ("WAITING") ("CANCELLED"))
                ("DONE" ("WAITING") ("CANCELLED"))))
   #+END_SRC

*** org-agenda
   The agenda view requires that org files be added to it. The personal.org and
   groupon.org files are my daily files for review. I have a habit to plan the
   next day. I do this by assessing my calendar and my list of todo items. If a
   todo item is already scheduled or has a deadline, don't show it in the global
   todo list.

   For quick access of =org-agenda= I have [[orgmode-key-binding][added]] a global binding This allows it
   to be quickly accessed.

   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-show-log t
           org-agenda-todo-ignore-scheduled t
           org-agenda-todo-ignore-deadlines t)
     (setq org-agenda-files (list "personal.org" "groupon.org"))
   #+END_SRC

*** org-habit
   I have several habits that I also track. In order to take full advantage of
   this feature org-habit has to be required and added to org-modules. A few
   settings are also tweaked for habit mode to make the tracking a little more
   palatable. The most significant of these is org-habit-graph-column. This
   specifies where the graph should start. The default is too low and cuts off a
   lot, so I start it at 80 characters.

   #+BEGIN_SRC emacs-lisp
     (require 'org)
     (require 'org-install)
     (require 'org-habit)
     (add-to-list 'org-modules "org-habit")
     (setq org-habit-preceding-days 7
           org-habit-following-days 1
           org-habit-graph-column 80
           org-habit-show-habits-only-for-today t
           org-habit-show-all-today t)
   #+END_SRC

*** org-babel
   org-babel is a feature inside of org-mode that makes this document possible.
   It allows for embedding languages inside of an org-mode document with all the
   proper font-locking. It also allows you to extract and execute code. It isn't
   aware of Clojure by default, so the following sets that up.

   #+BEGIN_SRC emacs-lisp
     (require 'ob)
   #+END_SRC

**** Default languages accepted

   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((shell      . t)
        (js         . t)
        (emacs-lisp . t)
        (ditaa      . t)
        (perl       . t)
        (clojure    . t)
        (python     . t)
        (ruby       . t)
        (dot        . t)
        (css        . t)
        (C          . t)
        (plantuml   . t)))
   #+END_SRC

**** Graphviz support

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-src-lang-modes (quote ("dot". graphviz-dot)))
   #+END_SRC

**** PlantUML support

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))

     (setq org-plantuml-jar-path
             (concat user-emacs-directory "extern/org/plantuml.jar"))
   #+END_SRC

**** ditaa support
   There's no substitute for real drawings, but it's nice to be able to sketch
   things out and produce a picture right from org-mode. This sets up ditaa for
   execution from inside a babel block.

   #+BEGIN_SRC emacs-lisp
     (setq org-ditaa-jar-path
           (concat user-emacs-directory "extern/org/ditaa0_9.jar"))
   #+END_SRC

**** Native font-lock
   When editing org-files with source-blocks, we want the source blocks to
   be themed as they would in their native mode.

   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
   #+END_SRC

**** Just Evaluate It
   I'm normally fine with having my code automatically evaluated.

   #+BEGIN_SRC emacs-lisp
     (setq org-confirm-babel-evaluate nil)
   #+END_SRC

**** Clojure support

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-babel-tangle-lang-exts '("clojure" . "clj"))

     (defvar org-babel-default-header-args:clojure
       '((:results . "silent") (:tangle . "yes")))

     (defun org-babel-execute:clojure (body params)
       (lisp-eval-string body)
       "Done!")

     (provide 'ob-clojure)
   #+END_SRC

**** Display inline image after execution

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-babel-after-execute-hook (lambda ()
                                               (condition-case nil
                                                   (org-display-inline-images)
                                                 (error nil)))
               'append)
   #+END_SRC

*** org-abbrev

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook (lambda () (abbrev-mode 1)))

     (define-skeleton skel-org-block-elisp
       "Insert an emacs-lisp block"
       ""
       "#+begin_src emacs-lisp\n"
       _ - \n
       "#+end_src\n")

     (define-abbrev org-mode-abbrev-table "elsrc" "" 'skel-org-block-elisp)

     (define-skeleton skel-org-block-js
       "Insert a JavaScript block"
       ""
       "#+begin_src js\n"
       _ - \n
       "#+end_src\n")

     (define-abbrev org-mode-abbrev-table "jssrc" "" 'skel-org-block-js)

     (define-skeleton skel-header-block
       "Creates my default header"
       ""
       "#+TITLE: " str "\n"
       "#+AUTHOR: Fikri Pribadi\n"
       "#+EMAIL: \n"
       "#+OPTIONS: toc:3 num:nil\n"
       "#+STYLE: <link rel=\"stylesheet\" type=\"text/css\" href=\"http://thomasf.github.io/solarized-css/solarized-light.min.css\" />\n")

     (define-abbrev org-mode-abbrev-table "sheader" "" 'skel-header-block)

     (define-skeleton skel-org-html-file-name
       "Insert an HTML snippet to reference the file by name"
       ""
       "#+HTML: <strong><i>"str"</i></strong>")

     (define-abbrev org-mode-abbrev-table "fname" "" 'skel-org-html-file-name)
   #+END_SRC

*** Bindings
    :PROPERTIES:
    :CUSTOM_ID: orgmode-key-binding
    :END:
   The table below will be generated as key-bindings [[Org%20Mode%20Bindings][here]].

   #+TBLNAME: org_keys
      | Combo | Description                                                  | Command         |
      |-------+--------------------------------------------------------------+-----------------|
      | C-c c | Capture and store note quickly                               | 'org-capture    |
      | C-c a | Display Org agenda                                           | 'org-agenda     |
      | C-c l | Correctly insert links into org files                        | 'org-store-link |
      | C-c b | iswitchb-like interface to switch to and between Org buffers | 'org-iswitchb   |

*** Evil Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-org-binding
    :END:
   Using The table below as the source for generating [[Evil Org Bindings][Evil Org Bindings]]

   #+TBLNAME: evil_org_keys
      | Combo   | Mode             | Evil Mode | Description | Command                                                       |
      | z c     | org-mode-map     | normal    |             | 'hide-subtree                                                 |
      | \\ TAB  | org-mode-map     | normal    |             | '(lambda () (interactive)(org-shiftmetadown) (evil-insert 0)) |
      | RET     | org-mode-map     | normal    |             | 'org-open-at-point                                            |
      | s-v     | org-mode-map     | insert    |             | 'org-cliplink                                                 |
      | -       | org-mode-map     | normal    |             | 'org-cycle-list-bullet                                        |
      | C-c .   | org-mode-map     | insert    |             | '(lambda () (interactive) (org-time-stamp-inactive t))        |
      | E       | org-mode-map     | normal    |             | 'org-edit-src-code                                            |
      | q       | org-src-mode-map | normal    |             | 'org-edit-src-exit                                            |
      | C-x C-s | org-src-mode-map | insert    |             | 'org-edit-src-exit                                            |
      | >       | org-mode-map     | normal    |             | 'org-metaright                                                |
      | <       | org-mode-map     | normal    |             | 'org-metaleft                                                 |
      | C->     | org-mode-map     | normal    |             | 'org-demote-subtree                                           |
      | C-<     | org-mode-map     | normal    |             | 'org-promote-subtree                                          |
      | SPC k   | org-mode-map     | normal    |             | 'outline-up-heading                                           |

** Projectile
   Project interaction module for Emacs.

   [[https://github.com/bbatsov/projectile]]

*** Settings
   #+BEGIN_SRC emacs-lisp
     (projectile-global-mode)
     (setq projectile-tags-command "gtags")
     (setq projectile-enable-caching t)
     (setq projectile-completion-system 'helm)
     (helm-projectile-on)
     ;; global ignores
     (add-to-list 'projectile-globally-ignored-files ".tern-port")
     (add-to-list 'projectile-globally-ignored-files "GTAGS")
     (add-to-list 'projectile-globally-ignored-files "GPATH")
     (add-to-list 'projectile-globally-ignored-files "GRTAGS")
     (add-to-list 'projectile-globally-ignored-files "GSYMS")
     (add-to-list 'projectile-globally-ignored-files ".DS_Store")
   #+END_SRC

*** Working with Neotree
   When running =projectile-switch-project=, =neotree= will change
   root automatically.
   #+BEGIN_SRC emacs-lisp
     (setq projectile-switch-project-action 'neotree-projectile-action)
   #+END_SRC

*** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: evil-projectile-binding
    :END:
   Using The table below as the source for generating [[Evil Projectile Bindings][Evil Projectile Bindings]]

   #+TBLNAME: evil_projectile_keys
      | Combo   | Description                               | Command                          |
      |---------+-------------------------------------------+----------------------------------|
      | SPC /   | Search using ag within projectile project | 'helm-projectile-ag              |
      | SPC p a |                                           | 'helm-projectile-find-other-file |
      | SPC p s |                                           | 'helm-projectile-switch-project  |
      | SPC p e |                                           | 'helm-projectile                 |
      | SPC p f |                                           | 'helm-projectile-find-file       |
      | g f     | Open file at point within active project  | 'helm-projectile-find-file-dwim  |

** Persp-mode
*** Keymap prefix

   #+begin_src emacs-lisp
       (setq persp-keymap-prefix (kbd "C-c o"))
   #+end_src
*** Rename main perspective

   #+begin_src emacs-lisp
     (setq persp-nil-name "Home")
   #+end_src

*** Create save folder if it doesn't exist

   #+begin_src emacs-lisp
     (unless (file-exists-p persp-save-dir)
       (make-directory persp-save-dir))
   #+end_src

*** Load persp-mode after init
   #+begin_src emacs-lisp
     (with-eval-after-load "persp-mode"
       (setq wg-morph-on nil)
       (add-hook 'after-init-hook #'(lambda () (persp-mode 1))))
     (require 'persp-mode)
   #+end_src

*** Auto perspective for dired

   #+begin_src emacs-lisp
     (with-eval-after-load "persp-mode-autoload"
       (with-eval-after-load "dired"
         (def-auto-persp "dired"
           :parameters '((dont-save-to-file . t))
           :mode dired-mode
           :dyn-env (after-switch-to-buffer-functions ;; prevent recursion
                     (persp-add-buffer-on-find-file nil)
                     persp-add-buffer-on-after-change-major-mode)
           :hooks (after-switch-to-buffer-functions)
           :after-match #'(lambda (p b h ha)
                            (persp-window-switch (safe-persp-name p))))))
   #+end_src

*** Keybindings
    :PROPERTIES:
    :CUSTOM_ID: persp-key-binding
    :END:

   The code generated from this table is [[Persp-mode Bindings][here]].
   #+TBLNAME: persp_combo
      | Combo | Description | Command        |
      |-------+-------------+----------------|
      | s-]   |             | 'persp-next    |
      | s-[   |             | 'persp-prev    |
      | s-e   |             | 'persp-add-new |

** RTags
   A Client/Server application that indexes C/C++ code and keeps a persistent
   in-memory database for references

   [[http://www.rtags.net]]

   #+begin_src emacs-lisp
     (require 'rtags)
     (rtags-enable-standard-keybindings c-mode-base-map)
   #+end_src

** Shell/Term/Fasd
   Launch shell/term within emacs

*** Add color to shell & eshell
   #+BEGIN_SRC emacs-lisp
     (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
     (add-hook 'eshell-preoutput-filter-functions
               'ansi-color-filter-apply)
   #+END_SRC

*** Highlight some text based on regexp (useful to see "OK" or warnings):
   #+BEGIN_SRC emacs-lisp
     (add-hook 'shell-mode-hook (lambda () (highlight-regexp "\\[OK\\]" "hi-green-b")))
   #+END_SRC

*** Make URLs clickable
   #+BEGIN_SRC emacs-lisp
     (add-hook 'shell-mode-hook (lambda () (goto-address-mode )))
   #+END_SRC

*** Make file paths clickable
   Every line representing a path to a file will be colorized and made
   clickable, so that you can jump to that file and that line, like in
   compilation-mode (specially useful when compiling a program or running
   tests):

   #+BEGIN_SRC emacs-lisp
     (add-hook 'shell-mode-hook 'compilation-shell-minor-mode)
   #+END_SRC

*** Shell completion with a nice menu à la zsh
   #+BEGIN_SRC emacs-lisp
     (add-hook 'shell-mode-hook #'company-mode)
     (define-key shell-mode-map (kbd "TAB") #'company-manual-begin)
   #+END_SRC

*** Change directory with =ido= and =fasd=
   In shell-mode, use ido-completion to cd to any directory already visited
   once. Choices are based on frequency and recency. We use the fasd command
   line utility: [[https://github.com/clvv/fasd]]

   #+BEGIN_SRC emacs-lisp
     (add-hook 'shell-mode-hook 'fasd-shell-mode)
   #+END_SRC

*** Find files with fasd
   An Emacs extension to integrate Fasd.

   [[https://github.com/steckerhalter/emacs-fasd]]

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-h C-/") 'fasd-find-file)
     (global-fasd-mode 1)
     (setq fasd-enable-initial-prompt nil)  ;; don't ask for first query but fire fuzzy completion straight away.
   #+END_SRC

*** Shared and persistent history
   #+BEGIN_SRC emacs-lisp
     (add-hook 'shell-mode-hook 'my-shell-mode-hook)
     (defun my-shell-mode-hook ()
       (setq comint-input-ring-file-name "~/.bash_history")  ;; or bash_history
       (comint-read-input-ring t))
   #+END_SRC

*** shell-here
   Open a shell buffer in (or relative to) default-directory, e.g. whatever
   directory the current buffer is in. If you have projectile or
   find-file-in-project installed, you can also move around relative to the root
   of the current project.

   [[https://github.com/ieure/shell-here]]

   #+BEGIN_SRC emacs-lisp
     (define-key (current-global-map) "\C-c!" 'shell-here)
   #+END_SRC

*** ansi-term
   =ansi-term= is a terminal emulator written in Emacs Lisp. It’s more like a
   traditional terminal emulator than =eshell=.

**** Force ansi-term to be UTF-8 after it launches

   #+BEGIN_SRC emacs-lisp
     (defadvice ansi-term (after bw/advise-ansi-term-coding-system activate)
       (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
   #+END_SRC

**** When exiting a terminal buffer (either with exit or EOF), automatically kill the buffer

   #+BEGIN_SRC emacs-lisp
     (defadvice term-sentinel (around bw/advice-term-sentinel (proc msg) activate)
       (if (memq (process-status proc) '(signal exit))
           (let ((buffer (process-buffer proc)))
             ad-do-it
             (kill-buffer buffer))
         ad-do-it))
     (ad-activate 'term-sentinel)
   #+END_SRC
**** Stop asking which shell program to use

   #+begin_src emacs-lisp
     (defadvice ansi-term (before force-bash)
       (interactive (list qq/shell-prog)))
     (ad-activate 'ansi-term)
   #+end_src
**** Make pasting work

   #+begin_src emacs-lisp
     (defun qq/term-paste (&optional string)
      (interactive)
      (process-send-string
       (get-buffer-process (current-buffer))
       (if string string (current-kill 0))))
   #+end_src
**** Enable URL clicking, disable yasnippet & proper color

   #+begin_src emacs-lisp
     (defun qq/term-hook ()
       (goto-address-mode)
       (setq yas-dont-activate t)
       (define-key term-raw-map "\C-y" 'qq/term-paste)
       ;(let ((base03  "#002b36")
       ;      (base02  "#073642")
       ;      (base01  "#586e75")
       ;      (base00  "#657b83")
       ;      (base0   "#839496")
       ;      (base1   "#93a1a1")
       ;      (base2   "#eee8d5")
       ;      (base3   "#fdf6e3")
       ;      (yellow  "#b58900")
       ;      (orange  "#cb4b16")
       ;      (red     "#dc322f")
       ;      (magenta "#d33682")
       ;      (violet  "#6c71c4")
       ;      (blue    "#268bd2")
       ;      (cyan    "#2aa198")
       ;      (green   "#859900"))
       ;  (setq ansi-term-color-vector
       ;        (vconcat `(unspecified ,base02 ,red ,green ,yellow ,blue
       ;                               ,magenta ,cyan ,base2))))
     )
     (add-hook 'term-mode-hook 'qq/term-hook)
   #+end_src
**** Improved term mode usage
   From: [[https://sourceforge.net/u/gavenkoa/dot-emacs/ci/default/tree/.emacs-my][Oleksandr Gavenko (aka gavenkoa) / Hg-Dot-Emacs / {ec4a06} /.emacs-my]]

   #+begin_src emacs-lisp
     (setq term-buffer-maximum-size (lsh 1 14))

     (eval-after-load 'term
       '(progn
         (defun my-term-send-delete-word-forward () (interactive) (term-send-raw-string "\ed"))
         (defun my-term-send-delete-word-backward () (interactive) (term-send-raw-string "\e\C-h"))
         (define-key term-raw-map [C-delete] 'my-term-send-delete-word-forward)
         (define-key term-raw-map [C-backspace] 'my-term-send-delete-word-backward)
         (defun my-term-send-forward-word () (interactive) (term-send-raw-string "\ef"))
         (defun my-term-send-backward-word () (interactive) (term-send-raw-string "\eb"))
         (define-key term-raw-map [C-left] 'my-term-send-backward-word)
         (define-key term-raw-map [C-right] 'my-term-send-forward-word)
         (defun my-term-send-m-right () (interactive) (term-send-raw-string "\e[1;3C"))
         (defun my-term-send-m-left () (interactive) (term-send-raw-string "\e[1;3D"))
         (define-key term-raw-map [M-right] 'my-term-send-m-right)
         (define-key term-raw-map [M-left] 'my-term-send-m-left)
         ))

     (defun my-term-mode-hook ()
       (goto-address-mode 1))
     (add-hook 'term-mode-hook #'my-term-mode-hook)
   #+end_src
*** Serial terminal
**** For serial port, default to 115200 b/s instead of 9600

   #+BEGIN_SRC emacs-lisp
     (setq serial-speed-history
           '("115200" ;; Given twice because 115200 b/s is the most common speed
             "1200" "2400" "4800" "9600" "14400" "19200"
             "28800" "38400" "57600" "115200"))
   #+END_SRC

**** Calling function
   =eterm-color= is the TERM used by Emacs when using =M-x term RET=

   On Debian-based systems you administer, you can =apt-get install
   ncurses-term=, which includes /usr/share/terminfo/e/eterm-color.

   #+BEGIN_SRC emacs-lisp
     (defun qq/serial-term ()
       (interactive)
       (serial-term "/dev/ttyUSB0" 115200)
       (term-send-string (get-buffer-process (current-buffer))
                         "export TERM=eterm-color\nclear\n"))
   #+END_SRC

**** Toggle u-boot auto stop
   Usefull if there are more than one serial terminal open. From [[https://www.fitzsim.org/blog/?p=44][here]].

   First, a variable to to keep track of whether the mode is enabled or not.

   #+BEGIN_SRC emacs-lisp
     ;; Detect U-Boot autoboot prompt and stop it.
     (defvar u-boot-stop-autoboot-mode nil
       "Non-nil if term-mode should prevent U-Boot from autobooting.
     Use the function u-boot-toggle-stop-autoboot-mode to toggle.")
   #+END_SRC

   Then the advice itself. It jacks into the term-emulate-terminal process
   filter to detect the U-Boot autoboot prompt, then sends a newline in
   response.

   #+BEGIN_SRC emacs-lisp
     (defadvice term-emulate-terminal
       (before u-boot-maybe-stop-autoboot activate disable)
       (with-current-buffer (process-buffer proc)
         (when (string-match "Hit any key to stop autoboot:" str)
           (message "U-Boot autoboot stopped in buffer %s"
                    (buffer-name (current-buffer)))
           (term-send-raw-string "\n"))))
   #+END_SRC

   And finally a function to toggle the advice on and off.

   #+BEGIN_SRC emacs-lisp
     (defun u-boot-toggle-stop-autoboot-mode ()
       "Toggle whether or not term-mode should interrupt U-Boot autoboot."
       (interactive)
       (if u-boot-stop-autoboot-mode
           (progn
             (ad-disable-advice
              'term-emulate-terminal 'before 'u-boot-maybe-stop-autoboot)
             (ad-update 'term-emulate-terminal)
             (setq u-boot-stop-autoboot-mode nil)
             (message "U-Boot autoboot will not be interrupted"))
         (progn
           (ad-enable-advice
            'term-emulate-terminal 'before 'u-boot-maybe-stop-autoboot)
           (ad-activate 'term-emulate-terminal)
           (setq u-boot-stop-autoboot-mode t)
           (message "U-Boot autoboot will be interrupted"))))
   #+END_SRC

**** Hook to update window size
   Pre-condition is to be in a serial term process buffer

   #+BEGIN_SRC emacs-lisp
     (defun qq/serial-term-update-window-size ()
       "Change process window size."
       (interactive)
       ;; effectively calls ioctl(TIOCSWINSZ ...)
       (set-process-window-size (get-buffer-process (current-buffer))
                                (window-height)
                                (window-width))
       ;; this is sad but we can't actually do this:
       ;;     (signal-process (get-buffer-process (current-buffer)) 'winch)
       ;; See Info node `(elisp)Serial Ports':
       ;;     ...
       ;;     A serial process object has no process ID, however, and you can't send
       ;;     signals to it, and the status codes are different from other types of
       ;;     processes.
       ;;
       ;; telling the shell to monitor the window size doesn't work either
       ;;     shopt -s checkwinsize
       ;; http://unix.stackexchange.com/a/61608/88925
       ;;
       ;; What seems to work is to call 'resize ; clear' explicitely on the shell


       ;; in case of error one can try to use stty:
       ;; sudo stty -F/dev/ttyS0 cols 180
       )
   #+END_SRC

   Add this hook as buffer local, so it runs once per window as opposed to
   once per frame

   -- [[http://stackoverflow.com/a/11255996/951426]]

   #+BEGIN_SRC emacs-lisp
     (defun qq/serial-term-mode-hook ()
       (when (and (derived-mode-p 'term-mode)
                  (eq (process-type nil) 'serial))
         (add-hook 'window-configuration-change-hook
                   'qq/serial-term-update-window-size nil t)))

     (add-hook 'shell-mode-hook 'qq/serial-term-mode-hook)
   #+END_SRC

**** Remap =ESC= key

   #+BEGIN_SRC emacs-lisp
     (add-hook 'term-mode-hook
               (lambda ()
                 (define-key term-mode-map (kbd "<escape>") 'term-char-mode)
                 (define-key term-raw-map (kbd "<escape>") 'term-line-mode)))
   #+END_SRC

** Smartparens
   Minor mode that deals with parens pairs.

   [[https://github.com/Fuco1/smartparens]]

*** Settings
   #+BEGIN_SRC emacs-lisp
     (require 'smartparens-config)
     (smartparens-global-mode t)
     ;(add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)

     (show-smartparens-global-mode t)
   #+END_SRC

*** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: smartparens-binding
    :END:
   Using The table below as the source for generating [[Smartparens Bindings][Smartparens Bindings]]

   #+TBLNAME: smartparens_keys
      | Combo | Description                             | Command          |
      |-------+-----------------------------------------+------------------|
      | C-'   | Jump after the next balance expressions | 'sp-forward-sexp |

** Swiper
   Visual regex search.

   [[https://github.com/abo-abo/swiper]]

   #+BEGIN_SRC emacs-lisp
       (require 'ivy)
       (require 'swiper)
   #+END_SRC

** Which key
   Show keybindings.

   [[https://github.com/justbur/emacs-which-key]]

*** Init
   #+BEGIN_SRC emacs-lisp
     (require 'which-key)
     (which-key-mode)
     (which-key-setup-side-window-right-bottom)
     ;(which-key-setup-minibuffer)

     (set-face-attribute 'which-key-local-map-description-face nil :weight 'bold)

     (setq which-key-special-keys nil)
   #+END_SRC

*** Replacements for how KEY is replaced when which-key displays
   KEY → FUNCTION
   Eg: After "C-c", display "right → winner-redo" as "▶ → winner-redo"

   #+BEGIN_SRC emacs-lisp
     (setq which-key-key-replacement-alist
           '(("<\\([[:alnum:]-]+\\)>" . "\\1")
             ("left"                . "◀")
             ("right"               . "▶")
             ("up"                  . "▲")
             ("down"                . "▼")
             ("delete"              . "DLT") ; delete key
             ("\\`DEL\\'"             . "BS") ; backspace key
             ("next"                . "PgDn")
             ("prior"               . "PgUp")))
   #+END_SRC

*** Use cool unicode characters if available

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'which-key-description-replacement-alist '("\\`calc-" . "🖩-"))
   #+END_SRC

*** Change what string to display for a given *complete* key binding
   Eg: After =C-x=, display =8 → +unicode= instead of =8 → +prefix=

   #+BEGIN_SRC emacs-lisp
     (which-key-add-key-based-replacements
       "SPC g"   "git/magit"
       "SPC b"   "buffer related"
       "SPC e"   "eval related"
       "SPC p"   "projectile related"
       "SPC h"   "help related"
       "SPC t"   "toggling thing"
       "SPC v"   "GUD related"
       "C-x 8"   "unicode"
       "C-x a"   "abbrev/expand"
       "C-x r"   "rect/reg"
       "C-c /"   "engine-mode-map"
       "C-c C-v" "org-babel"
       "C-x 8 0" "ZWS")
   #+END_SRC

*** Evil Leader Keybinding
    :PROPERTIES:
    :CUSTOM_ID: evil-whichkey-binding
    :END:
   Using The table below as the source for generating [[Evil%20Whichkey%20Bindings][Evil Whichkey Bindings]]

   #+TBLNAME: evil_whichkey_keys
      | Evil Leader Combo | Description | Command                   |
      |-------------------+-------------+---------------------------|
      | M                 |             | 'which-key-show-keymap    |
      | ?                 |             | 'which-key-show-top-level |

** Window numbering mode
   Number window shortcuts for emacs

   [[https://github.com/nschum/window-numbering.el]]

   #+BEGIN_SRC emacs-lisp
     (window-numbering-mode)
   #+END_SRC

** Yasnippet
   A template system for Emacs

   [[https://github.com/capitaomorte/yasnippet]]

   #+BEGIN_SRC emacs-lisp
     (yas-global-mode 1)
   #+END_SRC

*** Company integration
 #+begin_src emacs-lisp
   ;; Add yasnippet support for all company backends
   ;; https://github.com/syl20bnr/spacemacs/pull/179
   (defvar company-mode/enable-yas t "Enable yasnippet for all backends.")

   (defun company-mode/backend-with-yas (backend)
     (if (or (not company-mode/enable-yas) (and (listp backend)    (member 'company-yasnippet backend)))
     backend
   (append (if (consp backend) backend (list backend))
           '(:with company-yasnippet))))

   (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
 #+end_src
* Languages
** General
Some general settings that should apply to all programming mode. Highlight
=FIXME= and =TODO= so they stand out. Also enable =indent-guide-mode= and
=rainbow-delimiter-mode=

#+begin_src emacs-lisp
    (defun qq/add-watchwords ()
      (font-lock-add-keywords
       nil '(("\\<\\(FIXME\\|TODO\\|NOCOMMIT\\)\\>"
              1 '((:foreground "orange") (:weight bold)) t))))

    (add-hook 'prog-mode-hook
              '(lambda()
                 ;(nlinum-mode)
                 (qq/add-watchwords)
                 (rainbow-delimiters-mode)
                 (highlight-indent-guides-mode)
                 (smart-tabs-insinuate 'c++ 'c 'javascript)
                 ;darktooth-theme
                 (set-face-background 'highlight-indent-guides-odd-face "#323232")
                 (set-face-background 'highlight-indent-guides-even-face "#202020")
                 ;gruber-theme
                 ;(set-face-background 'highlight-indent-guides-odd-face "#151515")
                 ;(set-face-background 'highlight-indent-guides-even-face "#1d1d1d")
                 ;gotham-theme
                 ;(set-face-background 'highlight-indent-guides-odd-face "#11151c")
                 ;(set-face-background 'highlight-indent-guides-even-face "#071110")
                 (setq indent-guide-recursive t)
                 (color-identifiers-mode t)))
#+end_src

** Compilation
*** Compilation behaviour
**** Scroll down compilation messages

   #+BEGIN_SRC emacs-lisp
     (setq compilation-scroll-output t)
   #+END_SRC

**** Scroll to first error

   #+BEGIN_SRC emacs-lisp
     (setq compilation-scroll-output 'first-error)
   #+END_SRC

**** Kill compilation without reconfirmation

   #+BEGIN_SRC emacs-lisp
     (setq compilation-always-kill t)
   #+END_SRC

**** Unconditionally save all buffer before compiling

   #+BEGIN_SRC emacs-lisp
     (setq compilation-ask-about-save nil)
   #+END_SRC

*** Custom command

#+BEGIN_SRC emacs-lisp
  (defun qq/c-mode-compile()
    (interactive)
    (setq-local compilation-read-command nil)
    (call-interactively 'compile))

  (after "c-mode" (define-key c-mode-map (kbd "C-c C-c") 'qq/c-mode-compile))
  (after "c++-mode" (define-key c++-mode-map (kbd "C-c C-c") 'qq/c-mode-compile))
#+END_SRC

*** ANSI-escape coloring in compilation-mode
   =M-x compile= has some issues with ansi color codes. This fixes it. Found at [[http://stackoverflow.com/questions/3072648/cucumbers-ansi-colors-messing-up-emacs-compilation-buffer][StackOverflow]]

   #+BEGIN_SRC emacs-lisp
     (require 'ansi-color)
     (defun colorize-compilation-buffer ()
       (let ((inhibit-read-only t))
         (ansi-color-apply-on-region (point-min) (point-max))))
     (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
   #+END_SRC

*** Bury compilation buffer
If compilation is successful namely neither errors nor warnings, the compilation
buffer will disappear after 1 second. Stolen from [[http://stackoverflow.com/questions/11043004/emacs-compile-buffer-auto-close/11059012#11059012][stackoverflow]]

   #+BEGIN_SRC emacs-lisp
     (defun qq/bury-compile-buffer-if-successful (buffer string)
       "Bury a compilation buffer if succeeded without warnings "
       (alert string :title (buffer-name buffer))
       (if (and
            (string-match "compilation" (buffer-name buffer))
            (string-match "finished" string)
            (not
             (with-current-buffer buffer
               (search-forward "warning" nil t))))
           (run-with-timer 1 nil
                           (lambda (buf)
                             (bury-buffer buf)
                             (delete-window (get-buffer-window (get-buffer "*compilation*"))))
                           buffer)))
     (add-hook 'compilation-finish-functions 'qq/bury-compile-buffer-if-successful)
   #+END_SRC

** C and its derivative
*** Common
   The =c-mode-common-hook= is a general hook that work on all C-like languages
   (C, C++, Java, etc...). I like being able to quickly compile using =C-c C-c=
   (instead of =M-x compile=).

   #+BEGIN_SRC emacs-lisp
     (defun qq/c-mode-init ()
       (local-set-key (kbd "C-c C-c") 'compile)
       ;; To re-format c code. use C-x h M-C-\ (this puts the region around
       ;; the entire buffer, and then runs the indent-region command).
       (c-set-style "stroustrup")   ; C indenting style
       (c-set-offset 'inline-open 0)
   #+END_SRC
**** Underscore "_" is not a word character
   An underscore "_" is a word character in Vim. This means that word-motions
   like w skip over underlines in a sequence of letters as if it was a letter
   itself. In contrast, in Evil the underscore is often a non-word character
   like operators, e.g. +.

   Modifying its entry in the syntax-table will make the underscore to be
   recognized as word character:

   #+BEGIN_SRC emacs-lisp
     (modify-syntax-entry ?_ "w")
   #+END_SRC

**** Coding style via =clang-format=

   #+BEGIN_SRC emacs-lisp
     (require 'clang-format)
     (require 'rx)

     ;; Note, if a .dir-locals.el set some variables, it won't work, since local
     ;; variables are set after mode-hooks, they will be overriden, I think it make
     ;; sense to be able to override with .dir-locals.el so I'm not trying to counter
     ;; this. In case it appears to be necessary to counter it, see
     ;; http://stackoverflow.com/a/5148435/951426
     (defun qq/clang-format-set-c-style ()
       (let ((orig-path (or buffer-file-name default-directory))
             vars)
         (when (and orig-path
                    (string= clang-format-style "file")
                    (locate-dominating-file orig-path ".clang-format"))
           (with-temp-buffer
             (call-process clang-format-executable nil t nil
                           "-style" clang-format-style
                           "-dump-config")
             ;; TODO: narrow region to Langage Cpp?
             (goto-char (point-min))
             (when (re-search-forward (rx bol "IndentWidth"
                                          (zero-or-more blank)
                                          ":"
                                          (zero-or-more blank)
                                          (group (one-or-more digit)))
                                      nil t)
               (setq vars (cons (cons 'c-basic-offset
                                      (string-to-number (match-string 1)))
                                vars)))))
         (dolist (var vars)
           (set (car var) (cdr var)))))

     (add-hook 'c++-mode-hook 'qq/clang-format-set-c-style)
   #+END_SRC

   Add hook to =clang-format-buffer= when saving C++ files
   #+BEGIN_SRC emacs-lisp
     ;; Hook function
     (defun clang-format-before-save ()
       "Add this to .emacs to clang-format on save
      (add-hook 'before-save-hook 'clang-format-before-save)."

       (interactive)
       (when (eq major-mode 'c++-mode) (clang-format-buffer)))

     ;; Install hook to use clang-format on save
     (add-hook 'before-save-hook 'clang-format-before-save)
   #+END_SRC

**** Minor modes

   #+BEGIN_SRC emacs-lisp
     (eldoc-mode)
     (ggtags-mode 1)

     ;; Highlights suspicious C and C++ constructions
     (global-cwarn-mode 1)
     (diminish 'cwarn-mode)

     ;; slow
     ;;(flycheck-mode)
     ;;(setq flycheck-gcc-language-standard "c++11")
     ;;(flycheck-select-checker 'c/c++-gcc)
     ;;;(setq flycheck-clang-language-standard "c++11")
     ;;;(setq flycheck-clang-standard-library "libc++")
     ;;;(setq semantic-idle-scheduler-max-buffer-size 0)

     ;(setq rtags-completions-enabled t)
     ;(define-key c-mode-map  [(control tab)] 'company-complete)
     ;(define-key c++-mode-map  [(control tab)] 'company-complete)

     ; enable spell check in comment area
     (flyspell-prog-mode)
   #+END_SRC

**** End

   #+BEGIN_SRC emacs-lisp
     )
     (add-hook 'c-mode-hook 'qq/c-mode-init)
     (add-hook 'c++-mode-hook 'qq/c-mode-init)
   #+END_SRC

*** C++
**** Set C++ mode for *.h and *.ipp files (instead of plain-old C mode)

   #+BEGIN_SRC emacs-lisp
     (setq auto-mode-alist (cons '("\\.h$"   . c++-mode) auto-mode-alist))
     (setq auto-mode-alist (cons '("\\.ipp$" . c++-mode) auto-mode-alist))
   #+END_SRC

**** Highlight C++ member function
Highlight only member function calls in =c++-mode=, for examples
Object o;
o.getName();
getName();

Here only o.getName() will get highlighted.

#+begin_src emacs-lisp
  (defface font-lock-method-call-face
    '((t . (:foreground "orangered" :bold t)))
    "Face to display method calls in.")
  (font-lock-add-keywords 'c++-mode
                          `((,(concat
                               "\\<[_a-zA-Z][_a-zA-Z0-9]*\\>"       ; Object identifier
                               "\\s *"                              ; Optional white space
                               "\\(?:\\.\\|->\\)"                   ; Member access
                               "\\s *"                              ; Optional white space
                               "\\<\\([_a-zA-Z][_a-zA-Z0-9]*\\)\\>" ; Member identifier
                               "\\s *"                              ; Optional white space
                               "(")                                 ; Paren for method invocation
                             1 'font-lock-method-call-face t)))
#+end_src

**** No indentation within namespace block

   #+BEGIN_SRC emacs-lisp
     (defun qq/c-setup ()
        (c-set-offset 'innamespace [0]))
     (add-hook 'c++-mode-hook 'qq/c-setup)
   #+END_SRC

**** Automatically adding object name
   From http://oremacs.com/2015/01/15/c++-smart-dot/

   #+BEGIN_SRC emacs-lisp
     (defconst c++-var-regex "[A-Za-z][A-Za-z0-9_]*"
       "The regex for C++ variable name.")

     (defun c++-get-recent-var ()
       "Return the closest thing that looks like an object.
     The search is performed backwards through code."
       (save-excursion
         (when (or
                ;; variable dot chain
                (looking-back
                 (format " \\(%s\\)\\.%s.*\n[\t ]*"
                         c++-var-regex
                         c++-var-regex))
                ;; variable constructor init
                (looking-back
                 (format "[\t ]+\\(%s\\)\\(?:([^)]*)\\)?;[\t\n ]*"
                         c++-var-regex))
                ;; variable dot, first on line
                (re-search-backward
                 (format "^[ \t]*\\(%s\\)\\." c++-var-regex) nil t))
           (match-string-no-properties 1))))

     (defun c++-smart-dot ()
       "Insert a dot or an object name plus dot when appropriate."
       (interactive)
       (let (var-name)
         (if (and (looking-back "^[ \t]*")
                  (setq var-name (c++-get-recent-var)))
             (insert var-name ".")
           (insert "."))))
     (eval-after-load "cc-mode"
       `(define-key c++-mode-map "." 'c++-smart-dot))
   #+END_SRC

*** Java
Some statements in Java appear often, and become tedious to write
out. We can use abbrevs to speed this up.

#+BEGIN_SRC emacs-lisp
  (define-abbrev-table 'java-mode-abbrev-table
    '(("psv" "public static void main(String[] args) {" nil 0)
      ("sopl" "System.out.println" nil 0)
      ("sop" "System.out.printf" nil 0)))
#+END_SRC

To be able to use the abbrev table defined above, =abbrev-mode= must be
activated.

#+BEGIN_SRC emacs-lisp
  (defun java-setup ()
    (abbrev-mode t)
    (setq-local compile-command (concat "javac " (buffer-name))))

  (add-hook 'java-mode-hook 'java-setup)
#+END_SRC

*** Objective-C
Associate =.mm=-files with =objc-mode= instead of =nroff-mode=.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.mm\\'" . objc-mode))
#+END_SRC

*** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: evil-cc-mode-binding
    :END:
   Using The table below as the source for generating [[Evil CC Mode Bindings][Evil CC Mode Bindings]]

   #+TBLNAME: cc_mode_keys
      | Combo | Mode            | Evil Mode | Description | Command              |
      | RET   | c-mode-base-map | insert    |             | 'newline-and-indent  |
      | C-S-f | c-mode-base-map | visual    |             | 'clang-format-region |

** Lisp

   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
   #+END_SRC

** NXML
*** To have files automatically loaded with nxml-mode with various file extensions

   [[https://www.emacswiki.org/emacs/NxmlMode]]

   #+BEGIN_SRC emacs-lisp
     (require 'nxml-mode)

     (add-to-list 'auto-mode-alist
                  (cons (concat "\\." (regexp-opt '("xml" "xsd" "sch" "rng" "xslt" "svg" "rss") t) "\\'")
                        'nxml-mode))

      (unify-8859-on-decoding-mode)

        (setq magic-mode-alist
          (cons '("<＼＼?xml " . nxml-mode)
          magic-mode-alist))
       (fset 'xml-mode 'nxml-mode)
   #+END_SRC

*** Settings

   #+BEGIN_SRC emacs-lisp
     (add-hook 'nxml-mode-hook
               (lambda ()
                 (qq/set-font-to-fixed-width)
                 (setq auto-fill-mode -1)
                 (setq nxml-slash-auto-complete-flag t)      ; auto-complete the closing tag at the input of the slash
                 (setq nxml-child-indent 2)                  ; tag indentation
                 (setq nxml-attribute-indent 4)              ; attributes of the indentation width
                 (setq indent-tabs-mode t)
                 (setq nxml-bind-meta-tab-to-complete-flag t)
                 (setq nxml-slash-auto-complete-flag t)      ; </ of complementing the closing tag at the input
                 (setq nxml-sexp-element-flag t)             ; to kill the entire element, including the subordinate in CMk
                 (setq nxml-char-ref-display-glyph-flag nil) ; glyph is hidden
                 (setq tab-width 4)
                 ))
   #+END_SRC

*** Pretty printing xml region

   [[https://sinewalker.wordpress.com/2008/06/26/pretty-printing-xml-with-emacs-nxml-mode/]]

   #+BEGIN_SRC emacs-lisp
     (defun qq-pp-xml-region (begin end)
       "Pretty format XML markup in region. The function inserts linebreaks
     to separate tags that have nothing but whitespace between them.  It
     then indents the markup by using nxml's indentation rules."
       (interactive "r")
       (save-excursion
           (nxml-mode)
           (goto-char begin)
           (while (search-forward-regexp "\>[ \\t]*\<" nil t)
             (backward-char) (insert "\n"))
           (indent-region begin end)))
   #+END_SRC

*** Folding with HideShow

   [[http://stackoverflow.com/questions/944614/emacs-does-hideshow-work-with-xml-mode-sgml-mode]]

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'hs-special-modes-alist
                  (list 'nxml-mode
                        "<!--\\|<[^/>]*[^/]>"
                        "-->\\|</[^/>]*[^/]>"
                        "<!--"
                        'nxml-forward-element
                        nil))

     (add-hook 'nxml-mode-hook 'hs-minor-mode)

     ;; optional key bindings, easier than hs defaults
     (define-key nxml-mode-map (kbd "z t") 'hs-toggle-hiding)
   #+END_SRC
*** Enable nxml-mode when the user starts typing an xml document

   #+BEGIN_SRC emacs-lisp
     (setq magic-mode-alist
           (cons '("<\\?xml " . nxml-mode)
                magic-mode-alist))
   #+END_SRC

*** Rebind '>', so that it automatically inserts a closing xml tag (if appropriate)

   #+BEGIN_SRC emacs-lisp
     (defun qq/nxml-end-tag ()
       (interactive)
       (if (eq (face-at-point) 'default)
           (condition-case nil
               (nxml-balanced-close-start-tag-inline)
             (error
              (insert ">")))
         (insert ">")))

     (add-hook 'nxml-mode-hook
               (lambda ()
                 ;; rebind > to close the current tag
                 (define-key nxml-mode-map ">" 'qq/nxml-end-tag)))
   #+END_SRC

*** Color scheme

   #+BEGIN_SRC emacs-lisp
     ; (set-face-foreground 'nxml-attribute-local-name-face "#3387cc")
     ; (set-face-foreground 'nxml-attribute-colon-face "#e28964")
     ; (set-face-foreground 'nxml-attribute-prefix-face "#cf6a4c")
     ; (set-face-foreground 'nxml-attribute-value-face "#65b042")
     ; (set-face-foreground 'nxml-attribute-value-delimiter-face "#99cf50")
     ; (set-face-foreground 'nxml-namespace-attribute-prefix-face "#9b859d")
     ; (set-face-foreground 'nxml-comment-content-face "#666")
     ; (set-face-foreground 'nxml-comment-delimiter-face "#333")
     ; (set-face-foreground 'nxml-element-local-name-face "#e9c062")
     ; (set-face-foreground 'nxml-markup-declaration-delimiter-face "#aeaeae")
     ; (set-face-foreground 'nxml-namespace-attribute-xmlns-face "#8b98ab")
     ; (set-face-foreground 'nxml-prolog-keyword-face "#c5af75")
     ; (set-face-foreground 'nxml-prolog-literal-content-face "#dad085")
     ; (set-face-foreground 'nxml-tag-delimiter-face "#cda869")
     ; (set-face-foreground 'nxml-tag-slash-face "#cda869")
     ; (set-face-foreground 'nxml-text-face "#ddd")
   #+END_SRC

* Recipes
** Switch to Editing a File with SUDO
   Taken from [[http://irreal.org/blog/?p=4883][here]]

   #+BEGIN_SRC emacs-lisp
     (defun qq/find-file-as-sudo ()
       (interactive)
       (let ((file-name (buffer-file-name)))
         (when file-name
           (find-alternate-file (concat "/sudo::" file-name)))))
   #+END_SRC

** unfill-paragraph function
   Unfilling  a paragraph joins all the lines in a paragraph into a single line.

   [[https://www.emacswiki.org/emacs/UnfillParagraph]]

   #+BEGIN_SRC emacs-lisp
     ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
     (defun qq/unfill-paragraph ()
       "Takes a multi-line paragraph and makes it into a single line of text."
       (interactive)
       (let ((fill-column (point-max)))
         (fill-paragraph nil)))
   #+END_SRC

** Coloring regions with ANSI color codes
[[http://unix.stackexchange.com/a/19505/57923]]

   #+BEGIN_SRC emacs-lisp
     (defun ansi-color-apply-on-region-int (beg end)
       "Colorize using the ANSI color codes."
       (interactive "r")
       (ansi-color-apply-on-region beg end))
   #+END_SRC

** Diff two regions
   Step 1: Select a region and `M-x diff-region-tag-selected-as-a'
   Step 2: Select another region and `M-x diff-region-compare-with-b'

   #+BEGIN_SRC emacs-lisp
     (defun diff-region-format-region-boundary (b e)
       "Make sure lines are selected and B is less than E"
       (let (tmp rlt)
         ;; swap b e, make sure b < e
         (when (> b e)
           (setq tmp b)
           (setq b e)
           (set e tmp))

         ;; select lines
         (save-excursion
           ;; Another workaround for evil-visual-line bug:
           ;; In evil-mode, if we use hotkey V or `M-x evil-visual-line` to select line,
           ;; the (line-beginning-position) of the line which is after the last selected
           ;; line is always (region-end)! Don't know why.
           (if (and (> e b)
                    (save-excursion (goto-char e) (= e (line-beginning-position)))
                    (boundp 'evil-state) (eq evil-state 'visual))
               (setq e (1- e)))
           (goto-char b)
           (setq b (line-beginning-position))
           (goto-char e)
           (setq e (line-end-position)))
         (setq rlt (list b e))
         rlt))

     (defun diff-region-tag-selected-as-a ()
       "Select a region to compare"
       (interactive)
       (when (region-active-p)
         (let (tmp buf)
           ;; select lines
           (setq tmp (diff-region-format-region-boundary (region-beginning) (region-end)))
           (setq buf (get-buffer-create "*Diff-regionA*"))
           (save-current-buffer
             (set-buffer buf)
             (erase-buffer))
           (append-to-buffer buf (car tmp) (cadr tmp))))
       (message "Now select other region to compare and run `diff-region-compare-with-b`"))

     (defun diff-region-compare-with-b ()
       "Compare current region with region selected by `diff-region-tag-selected-as-a' "
       (interactive)
       (if (region-active-p)
           (let (rlt-buf
                 diff-output
                 (fa (make-temp-file (expand-file-name "scor"
                                                       (or small-temporary-file-directory
                                                           temporary-file-directory))))
                 (fb (make-temp-file (expand-file-name "scor"
                                                       (or small-temporary-file-directory
                                                           temporary-file-directory)))))
             ;;  save current content as file B
             (when fb
               (setq tmp (diff-region-format-region-boundary (region-beginning) (region-end)))
               (write-region (car tmp) (cadr tmp) fb))

             (setq rlt-buf (get-buffer-create "*Diff-region-output*"))
             (when (and fa (file-exists-p fa) fb (file-exists-p fb))
               ;; save region A as file A
               (save-current-buffer
                 (set-buffer (get-buffer-create "*Diff-regionA*"))
                 (write-region (point-min) (point-max) fa))
               ;; diff NOW!
               (setq diff-output (shell-command-to-string (format "diff -Nabur %s %s" fa fb)))
               ;; show the diff output
               (if (string= diff-output "")
                   ;; two regions are same
                   (message "Two regions are SAME!")
                 ;; show the diff
                 (save-current-buffer
                   (switch-to-buffer-other-window rlt-buf)
                   (set-buffer rlt-buf)
                   (erase-buffer)
                   (insert diff-output)
                   (diff-mode))))

             ;; clean the temporary files
             (if (and fa (file-exists-p fa))
                 (delete-file fa))
             (if (and fb (file-exists-p fb))
                 (delete-file fb)))
         (message "Please select region at first!")))
   #+END_SRC
** Narrow or widen region
   See [[https://gist.github.com/mwfogleman/95cc60c87a9323876c6c]]

   #+BEGIN_SRC emacs-lisp
     (defun narrow-or-widen-dwim ()
       "If the buffer is narrowed, it widens. Otherwise, it narrows to region, or Org subtree."
       (interactive)
       (cond ((buffer-narrowed-p) (widen))
             ((region-active-p) (narrow-to-region (region-beginning) (region-end)))
             ((equal major-mode 'org-mode) (org-narrow-to-subtree))
             (t (error "Please select a region to narrow to"))))
   #+END_SRC
** Abort minibuffer when it lose focus

   #+BEGIN_SRC emacs-lisp
     (defun stop-using-minibuffer ()
       "kill the minibuffer"
       (when (and (>= (recursion-depth) 1) (active-minibuffer-window))
         (abort-recursive-edit)))

     (add-hook 'mouse-leave-buffer-hook 'stop-using-minibuffer)
   #+END_SRC
** Inline PlantUML image

   #+BEGIN_SRC emacs-lisp
     (require 'iimage)
     (autoload 'iimage-mode "iimage" "Support Inline image minor mode." t)
     (autoload 'turn-on-iimage-mode "iimage" "Turn on Inline image minor mode." t)
     (add-to-list 'iimage-mode-image-regex-alist '("@startuml\s+\\(.+\\)" . 1))

     ;; Rendering plantuml
     (defun plantuml-render-buffer ()
       (interactive)
       (message "PLANTUML Start rendering")
       (shell-command (concat "java -jar " org-plantuml-jar-path " "
                              buffer-file-name))
       (message (concat "PLANTUML Rendered:  " (buffer-name))))

     ;; Image reloading
     (defun reload-image-at-point ()
       (interactive)
       (message "reloading image at point in the current buffer...")
       (image-refresh (get-text-property (point) 'display)))

     ;; Image resizing and reloading
     (defun resize-image-at-point ()
       (interactive)
       (message "resizing image at point in the current buffer123...")
       (let* ((image-spec (get-text-property (point) 'display))
              (file (cadr (member :file image-spec))))
         (message (concat "resizing image..." file))
         (shell-command (format "convert -resize %d %s %s "
                                (* (window-width (selected-window)) (frame-char-width))
                                file file))
         (reload-image-at-point)))
   #+END_SRC

** KeyBindings
    :PROPERTIES:
    :CUSTOM_ID: recipes-binding
    :END:
   Using The table below as the source for generating [[Recipes Bindings][Recipes Bindings]]

   #+TBLNAME: recipes_keys
      | Combo   | Description                        | Command               |
      |---------+------------------------------------+-----------------------|
      | C-x C-v | Switch to Editing a File with SUDO | 'qq/find-file-as-sudo |

* Bindings
   Generate all the bindings here.

** Basic Bindings
   Generate binding using table from [[#default-key-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(tname=std_keys)>>
   #+END_SRC

** Evil Global Bindings
   Generate binding using table from [[#evil-global-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pre="after 'evil")>>
     <<gen-keys(tname=evil_global_keys)>>
   #+END_SRC

** Evil Normal Bindings
   Generate binding using table from [[#evil-normal-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(mmap="ev-nor", tname=evil_std_keys)>>
   #+END_SRC

** Evil Motion Bindings
   Generate binding using table from [[#evil-motion-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(mmap="ev-mot", tname=evil_motion_keys)>>
   #+END_SRC

** Evil Visual Bindings
   Generate binding using table from [[#evil-visual-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(mmap="ev-vis", tname=evil_visual_keys)>>
   #+END_SRC

** Evil Ex Bindings
   Generate binding using table from [[#evil-ex-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(moda="xvil", tname=evil_ex_keys)>>
   #+END_SRC

** Evil BS Bindings
   Generate binding using table from [[#evil-bs-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pre="defadvice bs-mode (before bs-mode-override-keybindings activate)\n (evil-make-overriding-map bs-mode-map 'normal t)")>>
     <<gen-keys(moda="evil", tname=evil_bs_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

** Evil Leader Bindings
Generate binding using table from [[#evil-leader-binding][here]]
   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pre="bind-map-set-keys qq/base-leader-map")>>
     <<gen-keys(moda="lead", tname=evil_leader_keys)>>
   #+END_SRC

** Evil Whichkey Bindings
   Generate binding using table from [[#evil-whichkey-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(moda="lead", tname=evil_whichkey_keys)>>
   #+END_SRC

** Helm with Evil Bindings
   Binding code generation for [[#helm-evil-key-binding][this]] table

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :result silent
     <<gen-keys(moda="lead", tname=helm-evil-combo)>>
   #+END_SRC

** Neotree with Evil Bindings
   Binding code generation for [[#evil-neotree2-binding][this]] table

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :result silent
     <<gen-keys(moda="lead", tname=evil_neotree_keys)>>
   #+END_SRC

** Evil Magit Bindings
   Generate binding using table from [[#evil-magit-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(moda="lead", tname=evil_magit_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

** Evil iBuffer Bindings
   Generate binding using table from [[#evil-ibuffer-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(moda="normalmap", mvar="ibuffer-mode-map", tname=evil_ibuffer_keys)>>
   #+END_SRC

** Evil Projectile Bindings
   Generate binding using table from [[#evil-projectile-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pre="after \"projectile-autoloads\"")>>
     <<gen-keys(mmap="ev-nor", tname=evil_projectile_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

** Evil Origami Bindings
   Generate binding using table from [[#evil-origami-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pre="after \"origami-autoloads\"")>>
     <<gen-keys(mmap="ev-nor", tname=evil_origami_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

** Evil CC Mode Bindings
   Generate binding using table from [[#evil-cc-mode-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(moda="evil", tname=cc_mode_keys)>>
   #+END_SRC

** Evil Org Bindings
   Generate binding using table from [[#evil-org-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(moda="evil", tname=evil_org_keys)>>
   #+END_SRC

** Evil Neotree Bindings
   Binding code generation for [[#evil-neotree-bindings][this]] table

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :result silent
     <<gen-fix(pre="add-hook 'neotree-mode-hook\n(lambda()")>>
     <<gen-keys(mmap="t", tname=neotree-evil-keys)>>
     <<gen-fix(pos=")))\n")>>
   #+END_SRC

** Helm Bindings
   Binding code generation for [[#helm-key-binding][this]] table

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :result silent
     <<gen-keys(mmap="t", tname=helm_combo)>>
   #+END_SRC

** Persp-mode Bindings
   Binding code generation for [[#persp-key-binding][this]] table

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :result silent
     <<gen-keys(tname=persp_combo)>>
   #+END_SRC

** Org Mode Bindings
   =org_keys= table is [[#orgmode-key-binding][here]].

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(tname=org_keys)>>
   #+END_SRC

** Recipes Bindings
   =recipes_keys= table is [[#recipes-binding][here]].

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(tname=recipes_keys)>>
   #+END_SRC

** Company Bindings
   Binding code generation for [[#company-binding][this]] table

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :result silent
     <<gen-keys(mmap="mvar", mvar="company-active-map", tname=company_keys)>>
   #+END_SRC

** Undo-tree Bindings
   Generate binding using table from [[#undo-tree-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pre="eval-after-load 'undo-tree\n'(with-no-warnings")>>
     <<gen-keys(mmap="mvar", mvar="undo-tree-visualizer-mode-map", tname=undo_tree_keys)>>
     <<gen-fix(pos="))\n")>>
   #+END_SRC

** Smartparens Bindings
   Binding code generation for [[#smartparens-binding][this]] table

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :result silent
     <<gen-keys(mmap="mvar", mvar="smartparens-mode-map", tname=smartparens_keys)>>
   #+END_SRC

   #+RESULTS:
   : sp-forward-sexp
