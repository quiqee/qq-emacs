#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el :comments org
#+DATE:  <2015-11-26 Thu>
 
#+TITLE: Emacs configuration file
#+AUTHOR: QuiQee

* About
   This is an Emacs configuration file written in =org-mode=. There are a few
   reasons why I wanted to do this. I wanted to learn =org-mode=, one way to do
   this is by practicing on file I'm often work with. I just started using emacs
   a couple of weeks ago. When I saw an Emacs configuration done in =org-mode=,
   I knew this is what I wanted to do. This way I could gain more knowledge of
   Emacs as I added new stuff here from where ever I can gather from the web.

   *This is live document, always work in progress*

** How does it work?
   =org-mode= support code block exports through a process called =tangle=. This
   document have a global setting that will enable =tangle= on all code block
   except for code block marked with =:tangle no=. The resulting code is stored
   in =~/.emacs.d/init.el=. A compiled code will also be produced. Take a look
   at [[Tangling Function]] for more details.

   You can find more information about *Literate Programming* and *org-mode*
   here:
   [[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming]]

** Dot Emacs
   Most of the settings below are taken from all over the interweb. Some
   notable dot-emacs that I copied most are from:

   - [[https://github.com/larstvei/dot-emacs][larstvei dot-emacs]] :: this is where I get the idea to start using
        =org-mode= as my dot-emacs file
   - [[https://github.com/dakrone/dakrone-dotfiles/blob/master/.emacs.d/settings.org][dakrone-dotfiles]] :: some of the settings there are a bit outdated, but
        there are still plenty of gems to reuse.
   - [[https://github.com/bling/dotemacs][bling/dotemacs]] :: Knowing =evil-mode= is what I made me switch from Vim to
        Emacs. Bling =evil-mode= settings are used extensively here.
   - [[https://github.com/waymondo/hemacs][waymondo/hemacs]] :: Another dot-emacs settings that I refer to. Make me
        think hard about using =use-package=
   - [[https://github.com/steckerhalter/steckemacs/blob/master/steckemacs.org][steckerhalter/steckemacs]] :: I love the way he use table for keybindings
   - [[https://github.com/joedicastro/dotfiles/tree/master/emacs][joedicastro/emacs]] :: just found out about this.
   - [[https://github.com/christophermaier/emacs.d][christophermaier/emacs.d]] :: another dot-emacs source to utilize
   - [[https://github.com/dabrahams/dwamacs][dabrahams/dwamacs]] ::
   - [[https://github.com/magnars/.emacs.d][magnars/.emacs.d]] ::
   - [[https://github.com/wasamasa/dotemacs][wasamasa/dotemacs]] ::
   - [[https://github.com/noahfrederick/dots/tree/master/emacs.d][noahfrederick/dots]] ::
   - [[https://github.com/kovan/dopemacs][kovan/dopemacs]] :: Emacs configuration that aims to add lots of
        enabled-by-default, non-intrusive useful features while keeping traditional
        Emacs keybindings and workflow.
   - [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][sachac/.emacs.d]] ::
   - [[https://github.com/masaaki1001/.emacs.d][masaaki1001/.emacs.d]] ::
   - [[https://github.com/Fuco1/.emacs.d][Fuco1/.emacs.d]] ::
   - [[http://www.reddit.com/r/emacs/comments/2edbau/what_are_some_great_emacsd_examples/][dot-emacs from reddit]] ::
   - [[http://www.aaronbedra.com/emacs.d/][aaronbedra .emacs.d]] ::
   - [[https://gitlab.com/bodil/emacs-d/blob/master/README.md][bodil .emacs.d]] ::
   - [[https://github.com/jimeh/.emacs.d][jimeh/.emacs.d]] ::
   - [[https://github.com/ubolonton/.emacs.d][ubolonton/.emacs.d]] :: extensive use of variable-width font (for non-code texts)
   - [[http://milkbox.net/note/single-file-master-emacs-configuration/][milkyman's init file]] ::
   - [[https://github.com/tach4n/tommydots/tree/master/emacs][tach4n/tommydots]] :: he have added more syntax hilighting
   - [[https://github.com/ghoseb/dotemacs][ghoseb/dotemacs]] :: easy and well documented dotemacs
   - [[http://zeekat.nl/articles/making-emacs-work-for-me.html][Making emacs work for me]] ::
   - [[https://github.com/sugyan/dotfiles/tree/master/.emacs.d][sugyan/dotemacs]] ::

* Basic
** Meta
*** Tangling Function
   Emacs can only load =.el=-files. We can use =C-c C-v t= to run
   =org-babel-tangle=, which extracts the code blocks from the current file
   into a source-specific file (in this case a =.el=-file).

   To avoid doing this each time a change is made we can add a function to
   the =after-save-hook= ensuring to always tangle and byte-compile the
   =org=-document after changes.

   #+BEGIN_SRC emacs-lisp
     (defun qq/tangle-init ()
       "If the current buffer is 'init.org' the code-blocks are
     tangled, and the tangled file is compiled."
     (when (or
              (equal (buffer-file-name)
                  (expand-file-name (concat user-emacs-directory "init.org")))
              (equal (buffer-file-name)
                     (expand-file-name "~/Documents/qq-emacs/init.org")))
         (org-babel-tangle)
         (byte-compile-file (concat user-emacs-directory "init.el"))))

     (add-hook 'after-save-hook 'qq/tangle-init)
   #+END_SRC

   #+RESULTS:
   : byte-compile-file

   To export to other format, just press =C-c C-e=, which will display further
   option to choose output format like HTML, PDF or LaTeX.

*** Personal Custom group
   Create a custom group to group any custom variable so it will not
   polute built in variable space

   #+BEGIN_SRC emacs-lisp
     (defgroup qq nil
       "Personal Custom configuration."
       :group 'local)
   #+END_SRC

   Add a cache-directory root folder custom variable

   #+BEGIN_SRC emacs-lisp
     (defcustom qq/cache-directory
       (concat user-emacs-directory ".cache/")
       "The storage location for various persistent files."
       :group 'qq)
   #+END_SRC

*** Custom =load-path=
   The variable =load-path= lists all the directories where Emacs should look
   for Elisp files. The first file found is used, therefore the order of the
   directories is relevant.

   =load-path= is documented in the [[info:emacs#Lisp%20Libraries][Emacs Manual]] or [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Libraries.html][Emacs Online Manual]], in
   chapter *Libraries of Lisp Code for Emacs*. Useful tips are also on
   [[http://www.emacswiki.org/emacs/LoadPath][EmacsWiki]].

   #+BEGIN_SRC emacs-lisp
     (let ((default-directory (concat user-emacs-directory "elisp")))
       (unless (file-exists-p default-directory)
         (make-directory default-directory))
       (add-to-list 'load-path default-directory))
   #+END_SRC

Here we create the directory =~/.emacs.d/elisp= if it does not exist, add it to
the =load-path=. Doing that any =.el= or =.elc= files in this directory can be
required from *emacs*.

*** Miscelaneaus Macros & Functions
   Convenient macro to allow processing after checking existing pre-condition

   #+BEGIN_SRC emacs-lisp
     (defmacro after (feature &rest body)
                    "After FEATURE is loaded, evaluate BODY."
                    (declare (indent defun))
                    `(eval-after-load ,feature
                       '(progn ,@body)))
   #+END_SRC

*** Custom Cache
   By default, Emacs saves the options you set via the `customize-*` functions
   in the user init file, which is “~/.emacs.d/init.el” in this setup. I prefer
   to have it put that data in a seperate file.

   Set custom file config to store any cutomized settings. Create one when not
   exist.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (concat user-emacs-directory "custom.el"))
     (when (file-exists-p custom-file)
       (load custom-file))
   #+END_SRC

** Packages
   =Cask= is package manager for emacs. The reason I use cask is that it offer
   update feature that I don't find it in any other solutions for emacs.

   #+BEGIN_SRC emacs-lisp
     (require 'cask "~/.emacs.d/extern/cask/cask.el")
     (cask-initialize)
   #+END_SRC

   Cask packages configuration for Mac OS X: [[file:Cask-mac][Cask]]
   For Linux: [[file:Cask-linux][Cask]]
   To use =Cask= inside emacs, I install =pallet=, which has a simple interface:

   - =M-x pallet-init= creates a Cask file using information about installed
     packages from the package.el system
   - =M-x pallet-install= installs packages listed in your Cask file
   - =M-x pallet-update= updates installed packages

   Pallet's main job, though, is to add and delete package references from your
   Cask file as you install and delete them using the built-in Emacs package
   management system. It does this automatically and silently.

** Require
   Some features are not loaded by default to minimize initialization time,
   so they have to be required (or loaded, if you will). =require=-calls
   tends to lead to the largest bottleneck's in a
   configuration. =idle-reqire= delays the =require=-calls to a time where
   Emacs is in idle. So this is great for stuff you eventually want to load,
   but is not a high priority.

   #+BEGIN_SRC emacs-lisp
     (dolist (feature
              '(
                ample-theme
                auto-compile          ; auto-compile .el files
                diminish
                git-timemachine   ; walkthrough git revisions of a file
                hlinum                ; highlight current line in line number column
                info+
                linum-off             ; provides interface for turning line numbering off.
                moe-theme
                monokai-theme
                saveplace
                spaceline-config
                ))
       (require feature))
   #+END_SRC

** Default Settings
*** Dired
   Set =Dired-Dwim-Target= to true to activate default value of =C= or =R=
   commands to another dired window.

   #+BEGIN_SRC emacs-lisp
     (setq dired-dwim-target t)
   #+END_SRC

*** 24.4.50 bug
   Emacs 24.4.50 have a bug in which horizontal scroll bar a turn on by default.
   Code below will hide it

   #+begin_src emacs-lisp
     (when (fboundp 'horizontal-scroll-bar-mode)
       (horizontal-scroll-bar-mode -1))
   #+end_src

*** Startup behaviour
   Inhibit some of those annoying startup display.

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-splash-screen t
           inhibit-startup-echo-area-message t
           inhibit-startup-message t                    ; No splash screen please.
           initial-scratch-message nil)                 ; Clean scratch buffer.
   #+END_SRC

*** Auto split vertically

   #+BEGIN_SRC emacs-lisp
     (setq split-height-threshold 0
           split-width-threshold nil)
   #+END_SRC

*** Better scrolling

   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 9999
           scroll-preserve-screen-position t)
   #+END_SRC

*** Compilation behaviour

   #+BEGIN_SRC emacs-lisp
     (setq compilation-scroll-output 'first-error       ; scroll to first error
           compilation-always-kill t                    ; kill compilation without reconfirmation
           compilation-ask-about-save nil)              ; unconditionally save all buffer before
                                                        ; compiling
   #+END_SRC

*** Side by side =ediff= and no extra frames

   #+BEGIN_SRC emacs-lisp
     (setq ediff-split-window-function
              'split-window-horizontally                ; side-by-side diffs
           ediff-window-setup-function
              'ediff-setup-windows-plain)               ; no extra frames
   #+END_SRC

*** Undo Tree

   #+BEGIN_SRC emacs-lisp
     (setq undo-tree-history-directory-alist            ; cache for undo tree
              `(("." . ,(concat qq/cache-directory "undo")))
           undo-tree-visualizer-timestamps t            ; show timestamps
           undo-tree-visualizer-diff t                  ; show diff
           undo-tree-auto-save-history t)               ; Save undo history between sessions.
   #+END_SRC

*** Other Settings

   #+BEGIN_SRC emacs-lisp
     (setq default-input-method "TeX"                   ; Use TeX when toggeling input method.
           doc-view-continuous t                        ; At page edge goto next/previous.
           global-mark-ring-max 128
           ring-bell-function 'ignore                   ; Quiet.
           mark-ring-max 64
           sentence-end-double-space nil
           save-interprogram-paste-before-kill t

           which-func-unknown ""                        ; don't display if there's no
                                                        ; function to display

           savehist-autosave-interval 60                ; interval between save in seconds

           bookmark-save-flag 1                         ; save after every change

           ;; re-builder, nice interactive tool for building regular expressions
           reb-re-syntax 'string)                       ; fix backslash madness
   #+END_SRC

*** Setq-Defaults
   Some variables are buffer-local, so changing them using =setq= will only
   change them in a single buffer. Using =setq-default= we change the
   buffer-local variable's default value.

   #+BEGIN_SRC emacs-lisp
   (setq-default fill-column 80                         ; Maximum line width.
                 indent-tabs-mode nil                   ; Use spaces instead of tabs.
                 tab-width 4                            ; default-tab
                 split-width-threshold 100              ; Split verticly by default.
                 save-place t                           ; enable saving cursor last position in a file
                 history-length 1000                    ; savehist history length
                 imenu-auto-rescan t                    ; automatically rescan the buffer contents so
                                                        ; that new jump targets appear in the menu as
                                                        ; they are added
                 )
   #+END_SRC

*** Emacs Garbage Collector
   We don't really need to garbage collect as frequently as Emacs would like to
   by default, so set the threshold up hight.

   #+begin_src emacs-lisp
     (setq gc-cons-threshold 20000000)
   #+end_src

*** Echo commands quicker than the default 1 second

   #+begin_src emacs-lisp
     (setq echo-keystrokes 0.1)
   #+end_src

*** Ignore case when using completion for file names

   #+begin_src emacs-lisp
     (setq read-file-name-completion-ignore-case t)
   #+end_src

*** Long Line movement
   It's so much easier to move around lines based on how they are displayed,
   rather than the actual line. This helps a tone with long log file lines that
   may be wrapped:

   #+begin_src emacs-lisp
     (setq line-move-visual t)
   #+end_src

*** Hide the mouse while typing

   #+begin_src emacs-lisp
     (setq make-pointer-invisible t)
   #+end_src

*** Turn on auto-fill mode in text buffers

   #+begin_src emacs-lisp
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
   #+end_src

*** Set the internal calculator not to go to scientific form

   #+begin_src emacs-lisp
     (setq calc-display-sci-low -5)
   #+end_src

*** Emacs Server
   Start a server if not running, but a different server for GUI versus text-only

   #+begin_src emacs-lisp
     (add-hook 'after-init-hook
               (lambda ()
                 (require 'server)
                 (if (window-system)
                     (if (server-running-p server-name)
                         nil
                       (progn
                         (setq server-name "server-gui")
                         (server-start)))
                   (if (server-running-p server-name)
                       nil
                     (progn
                       (setq server-name "server-nw")
                       (server-start))))))
   #+end_src

*** Proced
   Display all processes, not just my own processes

   #+BEGIN_SRC emacs-lisp
     (setq-default proced-filter 'all)
   #+END_SRC

*** Yes or No
   Answering /yes/ and /no/ to each question from Emacs can be tedious, a
   single /y/ or /n/ will suffice.

   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

*** Better buffer names for duplicates

   #+BEGIN_SRC emacs-lisp
     (setq uniquify-buffer-name-style 'forward
           uniquify-separator "/"
           uniquify-ignore-buffers-re "^\\*" ; leave special buffers alone
           uniquify-after-kill-buffer-p t)
   #+END_SRC

*** Automatically revert =doc-view= buffers when the file changes on disk.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'doc-view-mode-hook 'auto-revert-mode)
   #+END_SRC

*** Add color in compilation buffer

   #+BEGIN_SRC emacs-lisp
     (add-hook 'compilation-filter-hook
               (lambda ()
                 (when (eq major-mode 'compilation-mode)
                   (require 'ansi-color)
                   (let ((inhibit-read-only t))
                     (ansi-color-apply-on-region (point-min) (point-max))))))
   #+END_SRC

*** Hook for find-file
   this will check for large file set it to read only,
   display trailing whitespace and enable visual-line-mode

   #+BEGIN_SRC emacs-lisp
     (defun qq/find-file-check-large-file ()
       (when (> (buffer-size) (* 2048 2048))
         (setq buffer-read-only t)
         (buffer-disable-undo)
         (fundamental-mode)))


     (add-hook 'find-file-hook (lambda ()
                                 (qq/find-file-check-large-file)
                                 (visual-line-mode)
                                 (unless (eq major-mode 'org-mode)
                                   (setq show-trailing-whitespace t))))
   #+END_SRC

*** Leave scratch buffers alone

   #+BEGIN_SRC emacs-lisp
     (defun qq/do-not-kill-scratch-buffer ()
       (if (member (buffer-name (current-buffer)) '("*scratch*" "*Messages*"))
           (progn
             (bury-buffer)
             nil)
         t))
     (add-hook 'kill-buffer-query-functions 'qq/do-not-kill-scratch-buffer)
   #+END_SRC

*** UTF-8
   Set =utf-8= as preferred coding system.

   #+BEGIN_SRC emacs-lisp
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
     (set-language-environment "UTF-8")

     (when (display-graphic-p)
       (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
   #+END_SRC

*** Customize linum format

   #+BEGIN_SRC emacs-lisp
     (hlinum-activate)
     (setq linum-format (lambda (line)
                          (propertize (format
                                       (let ((w (length (number-to-string
                                                         (count-lines (point-min) (point-max))))))
                                         (concat "%" (number-to-string w) "d ")) line) 'face 'linum)))
   #+END_SRC

*** Security
   Tells the auth-source library to store netrc file here: [[file:~/.emacs.d/authinfo.gpg::testt][authinfo.gpg]]

   #+begin_src emacs-lisp
     (setq epg-gpg-program "/usr/local/bin/gpg")
     (setq auth-sources '((:source "~/.emacs.d/authinfo.gpg")))
   #+end_src

*** System Environment
   Tells emacs to use path from shell

   #+begin_src emacs-lisp
      (exec-path-from-shell-initialize)
   #+end_src

*** Temporary files
   To avoid file system clutter we put all auto saved files in a single
   directory.

   #+BEGIN_SRC emacs-lisp
     (defvar autosave-dir
       (concat qq/cache-directory "backups/"))
     (defun auto-save-file-name-p (filename)
       (string-match "^#.*#$" (file-name-nondirectory filename)))

     (defun make-auto-save-file-name ()
       (concat autosave-dir
               (if buffer-file-name
                   (concat "#" (file-name-nondirectory buffer-file-name) "#")
                 (expand-file-name
          (concat "#%" (buffer-name) "#")))))

    (setq
          abbrev-file-name
             (concat qq/cache-directory "abbrev_defs") ; cache for abbrev_defs
          save-place-file
             (concat qq/cache-directory "places")      ; cache for save-place
          savehist-file
             (concat qq/cache-directory "savehist")    ; cache for minibuffer history
          savehist-additional-variables
             '(search ring regexp-search-ring)
          recentf-save-file
             (concat qq/cache-directory "recentf")     ; cache folder for recently open files
          recentf-max-saved-items 1000                 ; maximum saved items in recentf
          recentf-max-menu-items 500

          bookmark-default-file
             (concat qq/cache-directory "bookmarks")   ; cache for bookmark
          backup-directory-alist
          `(("." . ,(concat qq/cache-directory "backups")))
          auto-save-file-name-transforms
          `(("." ,(concat qq/cache-directory "backups/") t))
          auto-save-list-file-prefix
          (concat qq/cache-directory "auto-save-list/saves-"))
    (setq delete-auto-save-files t)
   #+END_SRC

*** Start emacs window maximized
   #+begin_src emacs-lisp
     (custom-set-variables
      '(initial-frame-alist (quote ((fullscreen . maximized))))) ;; start maximized
   #+end_src
   
** Visual
*** Theme & Default Face
   Change the color-theme to =moe-theme= (downloaded using =package=).

   #+BEGIN_SRC emacs-lisp
     ;;; Show highlighted buffer-id as decoration. (Default: nil)
     ;(setq moe-theme-highlight-buffer-id nil)

     ;;; Resize titles (optional).
     ;(setq moe-theme-resize-markdown-title '(1.5 1.4 1.3 1.2 1.0 1.0))
     ;(setq moe-theme-resize-org-title '(1.5 1.4 1.3 1.2 1.1 1.0 1.0 1.0 1.0))
     ;(setq moe-theme-resize-rst-title '(1.5 1.4 1.3 1.2 1.1 1.0))

     ;(load-theme 'moe-dark t)
     ;(moe-theme-set-color 'blue)
       ;; (Available colors: blue, orange, green ,magenta, yellow, purple, red, cyan, w/b.)

     (load-theme 'gruber-darker t)

     ;(load-theme 'gotham t)

     ;(load-theme 'ample t t)
     ;(load-theme 'ample-flat t t)
     ;(load-theme 'ample-light t t)
     ;; choose one to enable
     ;(enable-theme 'ample)

     ;(enable-theme 'monokai)
   #+END_SRC

   My preferred font.

   #+BEGIN_SRC emacs-lisp
     ;(when (member "Inconsolata-g" (font-family-list))
     (cond ((eq system-type 'darwin)
            ;; Set font for Mac OS X
            (set-face-attribute 'default nil :font "PragmataPro for Powerline-12"))
           ((eq system-type 'windows-nt)
            ;; Set font for Win32 application
            (set-face-attribute 'default nil :font "PragmataPro for Powerline-11"))
           (t
            ;; Emacs version 22.3 or later.
            (set-frame-font "PragmataPro for Powerline-11" t) ; set font for all frames
            (set-face-attribute 'default nil :font "PragmataPro for Powerline-11")))
   #+END_SRC

*** Modeline
   [[https://github.com/milkypostman/powerline][Powerline]] is an extension to customize the mode line. This is modified
   version =powerline-nano-theme=.

   #+BEGIN_SRC emacs-lisp
     (spaceline-spacemacs-theme)
     (spaceline-helm-mode)
     (spaceline-info-mode)
     (setq-default powerline-default-separator 'contour)
     (setq-default spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)

   #+END_SRC
   
**** Clean Modeline

   #+BEGIN_SRC emacs-lisp
     (defvar mode-line-cleaner-alist
       `((auto-complete-mode . " α")
         (yas-minor-mode . " γ")
         (paredit-mode . " Φ")
         (eldoc-mode . "")
         (abbrev-mode . "")
         ;;(undo-tree-mode . " τ")
         (wrap-region-mode . "")
         ;;(volatile-highlights-mode . " υ")
         (elisp-slime-nav-mode . " δ")
         (nrepl-interaction-mode . " ηζ")
         (auto-fill-function . " φ")
         (autopair-mode . "")
         (lambda-mode . "")
         (projectile-mode . "")
         (kibit-mode . " κ")
         ;; Major modes
         (nrepl-mode . "ηζ")
         (clojure-mode . "λ")
         (hi-lock-mode . "")
         (python-mode . "Py")
         (emacs-lisp-mode . "ε")
         (markdown-mode . "md")
         (org-mode . "Ο")
         (processing-mode . "P5"))
       "Alist for `clean-mode-line'.
     When you add a new element to the alist, keep in mind that you
     must pass the correct minor/major mode symbol and a string you
     want to use in the modeline *in lieu of* the original.")
     
     
     (defun clean-mode-line ()
       (interactive)
       (cl-loop for cleaner in mode-line-cleaner-alist
             do (let* ((mode (car cleaner))
                      (mode-str (cdr cleaner))
                      (old-mode-str (cdr (assq mode minor-mode-alist))))
                  (when old-mode-str
                      (setcar old-mode-str mode-str))
                    ;; major mode
                  (when (eq mode major-mode)
                    (setq mode-name mode-str)))))
     
     
     (add-hook 'after-change-major-mode-hook 'clean-mode-line)
     
     
     ;;; Greek letters - C-u C-\ greek ;; C-\ to revert to default
     ;;; α β ψ δ ε φ γ η ι ξ κ λ μ ν ο π ρ σ τ θ ω ς χ υ ζ
     ;;; Α Β Ψ Δ Ε Φ Γ Η Ι Ξ Κ Λ Μ Ν Ο Π Ρ Σ Τ Θ Ω Σ Χ Υ Ζ
   #+END_SRC

*** Highlight
   Enable highlighting similar word under the cursor (point)

   #+BEGIN_SRC emacs-lisp
     (setq idle-highlight-idle-time 0.3)
     (add-hook 'prog-mode-hook 'idle-highlight-mode)
   #+END_SRC

   Highlight current line mode

   #+BEGIN_SRC emacs-lisp
     ;(global-hl-line-mode)
   #+END_SRC

*** Fixed/Variable Width Faces
   I love monospaced fonts (I used =PragmataPro= extensively), but they can be
   harder to read when it comes to documentation or simple conversation.

   So, let's make Emacs use different fonts (monospaced and variable) depending
   on the mode we're in (eg: Info and ERC should not be monospaced)

   #+begin_src emacs-lisp
     (add-hook 'text-mode-hook 'variable-pitch-mode)
     (add-hook 'erc-mode-hook 'variable-pitch-mode)
     (add-hook 'Info-mode-hook 'variable-pitch-mode)
   #+end_src

   For =org-mode= we'll be using monospace font for formula, meta-line, tables
   and code blocks, while still using =variable-pitch-mode= in the rest of
   =org-mode= buffers

   #+BEGIN_SRC emacs-lisp
     (defun qq/adjoin-to-list-or-symbol (element list-or-symbol)
       (let ((list (if (not (listp list-or-symbol))
                       (list list-or-symbol)
                     list-or-symbol)))
         (require 'cl-lib)
         (cl-adjoin element list)))

     (eval-after-load "org"
       '(mapc
         (lambda (face)
           (if (memq window-system '(mac ns))
               (set-face-attribute face nil :font "PragmataPro for Powerline-11"
                                   :inherit (qq/adjoin-to-list-or-symbol
                                             'fixed-pitch
                                             (face-attribute face :inherit)))
             (set-face-attribute face nil :font "PragmataPro for Powerline-9"
                                 :inherit (qq/adjoin-to-list-or-symbol
                                           'fixed-pitch
                                           (face-attribute face :inherit))))
           )
         (list 'org-meta-line 'org-code 'org-formula 'org-block
               'org-block-begin-line 'org-block-end-line 'org-verbatim
               'org-table)))
   #+END_SRC

   Same settings applied for =Info buffers= as well. Code examples will be using
   monospace font

   #+begin_src emacs-lisp
     (defvar qq/rx-info-code (rx bol "     " (* not-newline) eol))
     (add-hook 'Info-mode-hook 'qq/Info-font-lock)
     (defun qq/Info-font-lock ()
       (interactive)
       (require 'org)
       (font-lock-add-keywords
        nil
        `((,qq/rx-info-code
           .
           ;; let's just use org-block
           (quote org-block)
           ))))
   #+end_src

   Display source code blocks or pre blocks in monospace for =markdown-mode=
   buffers

   #+begin_src emacs-lisp
     (eval-after-load "markdown-mode"
       '(mapc
         (lambda (face)
           (set-face-attribute
            face nil
            :inherit
            (qq/adjoin-to-list-or-symbol
             'fixed-pitch
             (face-attribute face :inherit))))
         (list 'markdown-pre-face 'markdown-inline-code-face)))
   #+end_src

*** Pretty Symbol
   Displaying sequences of characters as fancy characters or symbols
   for example, showing -> as →

   May need to revisit the code below since new Emacs 24.4 support built-in
   =prettify-symbols-mode=

   #+BEGIN_SRC emacs-lisp
     (global-prettify-symbols-mode 1)
     ;(global-pretty-lambda-mode 1) ; enabling this will conflict with helm
                               ; such that helm-buffer will have no color
     (setq coq-symbols
           '(("forall" ?∀)
             ("->" ?→)
             ("exists" ?∃)
             ("=>" ?⇒)
             ("False" ?⊥)
             ("True" ?⊤)))

     (add-hook 'coq-mode-hook
               (lambda ()
                 (setq prettify-symbols-alist coq-symbols)))
     (add-hook 'js2-mode-hook
               (lambda ()
                 (push '("function" . 955) prettify-symbols-alist)
                 (push '("return" . 8592) prettify-symbols-alist)))
   #+END_SRC

** Advice
   An advice can be given to a function to make it behave differently. This
   advice makes =eval-last-sexp= (bound to =C-x C-e=) replace the sexp with
   the value.

   #+BEGIN_SRC emacs-lisp
   (defadvice eval-last-sexp (around replace-sexp (arg) activate)
     "Replace sexp when called with a prefix argument."
     (if arg
         (let ((pos (point)))
           ad-do-it
           (goto-char pos)
           (backward-kill-sexp)
           (forward-sexp))
       ad-do-it))
   #+END_SRC

   When interactively changing the theme (using =M-x load-theme=), the
   current custom theme is not disabled. This often gives weird-looking
   results; we can advice =load-theme= to always disable themes currently
   enabled themes.

   #+BEGIN_SRC emacs-lisp
     (defadvice load-theme
       (before disable-before-load (theme &optional no-confirm no-enable) activate)
       (mapc 'disable-theme custom-enabled-themes))
   #+END_SRC

* Site-Specific
** Greenwave Build Server

   #+BEGIN_SRC emacs-lisp
     (defvar qq/system-name system-name)
     (cond
      ((string-equal qq/system-name "firmware-OptiPlex-7010") ; Greenwave Build Server
       (progn
   #+END_SRC

*** C-Headers path
    Used by =company-c-headers=

   #+BEGIN_SRC emacs-lisp
     (defvar qq/c-headers-path "/usr/include/c++/4.8.4")
   #+END_SRC

*** Gerrit Identitiy
    Used by =company-c-headers=

   #+BEGIN_SRC emacs-lisp
     (defvar qq/gerrit-creds "fikri.pribadi@greenwavereality.com")
   #+END_SRC

*** LibClang path

   #+BEGIN_SRC emacs-lisp
     (exec-path-from-shell-copy-env "LD_LIBRARY_PATH")
     (setq exec-path (append exec-path '("/home/fikri/local/lib")))
   #+END_SRC

*** End
   #+BEGIN_SRC emacs-lisp
     ))
   #+END_SRC

** Other Sites
   #+BEGIN_SRC emacs-lisp
      ((string-equal system-type "darwin") ; Mac OS X
       (progn
         (message "Mac OS X")))
      ((string-equal system-type "gnu/linux") ; linux
       (progn
         (message "Linux"))))
   #+END_SRC

* Modes
** Default
*** Disabled Modes
   There are some modes that are enabled by default that I don't find
   particularly useful. We create a list of these modes, and disable all of
   these.

   #+BEGIN_SRC emacs-lisp
   (dolist (mode
            '(tool-bar-mode       ; No toolbars, more room for text.
              scroll-bar-mode     ; No scroll bars either.
              menu-bar-mode       ; same for menu bar
              blink-cursor-mode)) ; The blinking cursor gets old.
     (funcall mode 0))
   #+END_SRC

*** Enabled Modes
   Let's apply the same technique for enabling modes that are disabled by
   default.

   #+BEGIN_SRC emacs-lisp
     (dolist (mode
              '(abbrev-mode                ; E.g. sopl -> System.out.println.
                column-number-mode         ; Show column number in mode line.
                delete-selection-mode      ; Replace selected text.
                recentf-mode               ; Recently opened files.
                show-paren-mode            ; Highlight matching parentheses.

                xterm-mouse-mode
                which-function-mode        ; show function where cursor reside
                                           ; in mode line

                global-auto-revert-mode

                ;; Enabled by default in 24.4:
                ;electric-indent-mode
                transient-mark-mode
                delete-selection-mode

                line-number-mode
                column-number-mode
                display-time-mode
                size-indication-mode

                global-linum-mode          ; turn on line number globally

                global-undo-tree-mode))    ; Undo as a tree.
       (funcall mode 1))

;;     (eval-after-load 'auto-compile
;;       '((auto-compile-on-save-mode)))   ; compile .el files on save.

   #+END_SRC

   =hunglry-delete-mode= makes =backspace= and =C-d= erase /all/ consecutive
   white space in a given direction (instead of just one). Use it everywhere.

   #+BEGIN_SRC emacs-lisp
     (global-hungry-delete-mode)
   #+END_SRC

   Plenty editors (e.g. Vim) have the feature of saving minibuffer
   history to an external file after exit. savehist provide the same
   feature for Emacs. (refer to setq & setq-default for configuration)
   Enabling Recentf mode, the file open includes a submenu containing a list
   of recently opened files.

   #+BEGIN_SRC emacs-lisp
     (savehist-mode +1)
     (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
     (recentf-mode +1)
   #+END_SRC

   Column mode editing provde ways to ways to insert sequence of numbers easily.
   One reason I enable this mode.

   #+BEGIN_SRC emacs-lisp
     (setq cua-enable-cua-keys nil)
     (cua-mode)
   #+END_SRC

   If you change buffer, or focus, disable the current buffer's mark:

   #+begin_src emacs-lisp
     (transient-mark-mode t)
   #+end_src

   Set fringe width on each side to 12 and add few indications

   #+BEGIN_SRC emacs-lisp
     (fringe-mode 12)

     ; Indicate where a buffer stars and stops
     (setq-default indicate-buffer-boundaries 'right)
     (setq-default indicate-empty-lines +1)
     (let ((hook (lambda ()
                   (setq indicate-empty-lines       nil
                         indicate-buffer-boundaries nil)))
           (mode-hooks '(shell-mode-hook term-mode-hook gnus-article-mode-hook
                         gnus-summary-mode-hook gnus-group-mode-hook
                         eshell-mode-hook)))
       (mapc (lambda (mode-hook)
               (add-hook mode-hook hook))
             mode-hooks))
     (defun my/set-fringe-background ()
       "Set the fringe background to the same color as the regular background."
       (interactive)
       (setq my/fringe-background-color
             (face-background 'default))
       (custom-set-faces
        `(fringe ((t (:background ,my/fringe-background-color))))))
     
     (add-hook 'after-init-hook #'my/set-fringe-background)
   #+END_SRC

*** Keybindings
    :PROPERTIES:
    :CUSTOM_ID: default-key-binding
    :END:
   Using The table below as the source for generating [[Basic Bindings]]

   #+TBLNAME: std_keys
      | Combo    | Description                                                                | Command                  |
      |----------+----------------------------------------------------------------------------+--------------------------|
      | C-s      | Do incremental search forward for regular expression                       | 'isearch-forward-regexp  |
      | C-M-s    | Do incremental search forward                                              | 'isearch-forward         |
      | C-r      | Do incremental search backward for regular expression                      | 'isearch-backward-regexp |
      | C-M-r    | Do incremental search backward                                             | 'isearch-backward        |
      | C-c s    | Jump to *scratch* buffer                                                   | 'qq/goto-scratch-buffer  |
      | C-x C-b  | Use iBuffer to replace built-in buffer manager                             | 'ibuffer                 |
      | C-x C-k  | Kill the current buffer. When called in the minibuffer, will get out of it | 'kill-this-buffer        |
      | C-c e    |                                                                            | 'qq/eval-and-replace     |
      | C-(      | In selected window switch to previous buffer                               | 'previous-buffer         |
      | C-)      | In selected window switch to next buffer                                   | 'next-buffer             |
      | [escape] | Work as C-g in cases where it does something, and as C-x 1 in other cases  | 'keyboard-escape-quit    |

** Company
   #+BEGIN_SRC emacs-lisp
     (require 'company)
     (add-hook 'after-init-hook 'global-company-mode)
     (delete 'company-semantic company-backends)
   #+END_SRC

** Diminish
   Diminish will remove the minor mode indicators from the mode line (or powerline). 

   #+begin_src emacs-lisp
     (diminish 'visual-line-mode)
     (diminish 'hungry-delete-mode)
     (after 'hi-lock '(diminish 'hi-lock-mode))
     (after 'ggtags (diminish 'ggtags-mode))
     (after 'flyspell (diminish 'flyspell-mode))
     (after 'which-key (diminish 'which-key-mode))
     (after 'abbrev (diminish 'abbrev-mode))
     (after 'irony (diminish 'irony-mode))
     (after 'autopair (diminish 'autopair-mode))
     (after 'undo-tree (diminish 'undo-tree-mode))
     (after 'auto-complete (diminish 'auto-complete-mode))
     (after 'projectile (diminish 'projectile-mode))
     (after 'yasnippet (diminish 'yas-minor-mode))
     (after 'guide-key (diminish 'guide-key-mode))
     (after 'eldoc (diminish 'eldoc-mode))
     (after 'smartparens (diminish 'smartparens-mode))
     (after 'evil-smartparens (diminish 'evil-smartparens-mode))
     (after 'company (diminish 'company-mode))
     (after 'elisp-slime-nav (diminish 'elisp-slime-nav-mode))
     (after 'git-gutter-fringe (diminish 'git-gutter-mode))
     (after 'indent-guide (diminish 'indent-guide-mode))
     ;(after 'magit (diminish 'magit-auto-revert-mode))
     (after 'hs-minor-mode (diminish 'hs-minor-mode))
     (after 'color-identifiers-mode (diminish 'color-identifiers-mode))
   #+end_src
** Evil
   As a long time Vim user, =evil-mode= is essential tools in order for Emacs
   to be my default text editor.

*** Init
   #+BEGIN_SRC emacs-lisp
     (dolist (feature
              '(evil evil-indent-textobject
                evil-jumper ;;evil-nerd-commenter
                evil-smartparens
                evil-visualstar
                ))
       (require feature))
   #+END_SRC

*** Common Settings
   Set the cursor color for different evil mode:

   #+BEGIN_SRC emacs-lisp
     (setq evil-search-module 'evil-search
           evil-magic 'very-magic

           evil-emacs-state-cursor '("red" box)
           evil-normal-state-cursor '("green" box)
           evil-visual-state-cursor '("orange" box)
           evil-insert-state-cursor '("red" bar)
           evil-replace-state-cursor '("red" bar)
           evil-operator-state-cursor '("red" hollow)

           evilnc-hotkey-comment-operator "gc"

           evil-jumper-auto-center t
           evil-jumper-file (concat qq/cache-directory "evil-jumps")
           evil-jumper-auto-save-interval 3600)
   #+END_SRC

*** Git-Timemachine
   Gives all bindings of =git-timemachine= higher priority than any =Evil= binding (but only in normal state).
   Refer [[https://bitbucket.org/lyro/evil/issues/511/let-certain-minor-modes-key-bindings][here]]

   #+BEGIN_SRC emacs-lisp
      (evil-make-overriding-map git-timemachine-mode-map 'normal)
      (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps)
   #+END_SRC
   
*** Command =*= and =#=
   The =evil-mode= command =*= and =#= behave differently than the way I used to
   know in =Vim=. It only search subword not the whole word. I.e, if a cursor is
   in 'mamb' for keyword mamb_ctrl_scaleConversion. Then only 'mamb' will be
   search. I wanted to have both behaviour around, so I made a toggle function:

   #+BEGIN_SRC emacs-lisp
     (defun qq/toggle-evil-search ()
       "Toggle Evil search mode between symbol search or word search"
       (interactive)
       (setq-default evil-symbol-word-search
                     (if (eq evil-symbol-word-search t) nil t)))
   #+END_SRC

*** When Evil not allowed
   Do not turn =evil-mode= on certain modes.

   #+BEGIN_SRC emacs-lisp
     (defcustom qq/evil-state-modes
                '(epa-key-list-mode
                  comint-mode
                  )
                "List of modes that should start up in Evil state."
                :type '(repeat (symbol))
                :group 'qq)

     (defun qq/disable-evil-mode ()
       (if (apply 'derived-mode-p qq/evil-state-modes)
           (turn-off-evil-mode)
         (set-cursor-color "red")))
     (add-hook 'after-change-major-mode-hook 'qq/disable-evil-mode)
     (evil-mode 1)
   #+END_SRC

*** Make HJKL keys work in special buffers

   #+BEGIN_SRC emacs-lisp
      (evil-add-hjkl-bindings occur-mode 'emacs)
   #+END_SRC

*** Further Settings
   #+BEGIN_SRC emacs-lisp
     (global-evil-visualstar-mode)
     (global-evil-leader-mode t)
     (evil-leader/set-leader "SPC")
     (global-evil-surround-mode t)
     (setq evil-want-fine-undo t)
     (evil-exchange-install)

     (global-evil-matchit-mode t)

     (defun qq/send-string-to-terminal (string)
       (unless (display-graphic-p) (send-string-to-terminal string)))

     (defun qq/evil-terminal-cursor-change ()
       (when (string= (getenv "TERM_PROGRAM") "iTerm.app")
        (add-hook 'evil-insert-state-entry-hook (lambda () (qq/send-string-to-terminal "\e]50;CursorShape=1\x7")))
        (add-hook 'evil-insert-state-exit-hook (lambda () (qq/send-string-to-terminal "\e]50;CursorShape=0\x7"))))
       (when (and (getenv "TMUX") (string= (getenv "TERM_PROGRAM") "iTerm.app"))
        (add-hook 'evil-insert-state-entry-hook (lambda () (qq/send-string-to-terminal "\ePtmux;\e\e]50;CursorShape=1\x7\e\\")))
        (add-hook 'evil-insert-state-exit-hook (lambda () (qq/send-string-to-terminal "\ePtmux;\e\e]50;CursorShape=0\x7\e\\")))))

     (add-hook 'after-make-frame-functions (lambda (frame) (qq/evil-terminal-cursor-change)))
     (qq/evil-terminal-cursor-change)

     (defadvice evil-ex-search-next (after advice-for-evil-ex-search-next activate)
       (recenter))

     (defadvice evil-ex-search-previous (after advice-for-evil-ex-search-previous activate)
       (recenter))
   #+END_SRC

*** Global Mode Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-global-binding
    :END:
   Using The table below as the source for generating [[Evil Global Bindings][Evil Global Bindings]]

   #+TBLNAME: evil_global_keys
      | Combo | Description                  | Command          |
      |-------+------------------------------+------------------|
      | C-w   | Prefix for windows operation | 'evil-window-map |
   
*** Normal Mode Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-normal-binding
    :END:
   Using The table below as the source for generating [[Evil Normal Bindings][Evil Normal Bindings]]

   #+TBLNAME: evil_std_keys
      | Combo       | Description                                | Command                                              |
      |-------------+--------------------------------------------+------------------------------------------------------|
      | [backspace] | Disable the active search highlightings    | 'evil-ex-nohighlight                                 |
      | DEL         | Disable the active search highlightings    | 'evil-ex-nohighlight                                 |
      | SPC b b     |                                            | 'switch-to-buffer                                    |
      | C-b         | Scroll one page up                         | 'evil-scroll-up                                      |
      | C-f         | Scroll one page down                       | 'evil-scroll-down                                    |
      | [ SPC       | Insert empty line above current line       | (bind (evil-insert-newline-above) (forward-line))    |
      | ] SPC       | Insert empty line below current line       | (bind (evil-insert-newline-below) (forward-line -1)) |
      | [ e         | Move current line up one line              | (kbd "ddkP")                                         |
      | ] e         | Move current line down one line            | (kbd "ddp")                                          |
      | [ b         | Jump to the previous buffer                | 'previous-buffer                                     |
      | ] b         | Jump to the next buffer                    | 'next-buffer                                         |
      | [ q         | Jump to the previous error                 | 'previous-error                                      |
      | ] q         | Jump to the next error                     | 'next-error                                          |
      | C-j         | Navigate cursor to the lower window        | 'windmove-down                                       |
      | C-k         | Navigate cursor to the upper window        | 'windmove-up                                         |
      | C-h         | Navigate cursor to the window on the left  | 'windmove-left                                       |
      | C-l         | Navigate cursor to the window on the right | 'windmove-right                                      |
      | C-a         | Increment number at cursor                 | 'evil-numbers/inc-at-pt                              |
      | -           | Decrement number at cursor                 | 'evil-numbers/dec-at-pt                              |
      | Q           | Close a window                             | 'qq/window-killer                                    |
      | Y           |                                            | (kbd "y$")                                           |
      | g ]         |                                            | 'ggtags-find-definition                              |
      | g [         |                                            | 'ggtags-find-reference                               |
      | g p         |                                            | 'hydra-projectile/body                               |
   
*** Motion Mode Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-motion-binding
    :END:
   Using The table below as the source for generating [[Evil Motion Bindings][Evil Motion Bindings]]

   #+TBLNAME: evil_motion_keys
      | Combo | Description                                | Command                    |
      |-------+--------------------------------------------+----------------------------|
      | C-j   | Navigate cursor to the lower window        | 'windmove-down             |
      | C-k   | Navigate cursor to the upper window        | 'windmove-up               |
      | C-h   | Navigate cursor to the window on the left  | 'windmove-left             |
      | C-l   | Navigate cursor to the window on the right | 'windmove-right            |
      | j     |                                            | 'evil-next-visual-line     |
      | k     |                                            | 'evil-previous-visual-line |
   
*** Visual Mode Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-visual-binding
    :END:
   Using The table below as the source for generating [[Evil Visual Bindings][Evil Visual Bindings]]

   #+TBLNAME: evil_visual_keys
      | Combo | Description                      | Command      |
      |-------+----------------------------------+--------------|
      | , e   | Execute selected lisp expression | 'eval-region |
   
*** Ex Mode Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-ex-binding
    :END:
   Using The table below as the source for generating [[Evil Ex Bindings][Evil Ex Bindings]]

   #+TBLNAME: evil_ex_keys
      | Combo | Description   | Command        |
      |-------+---------------+----------------|
      | Q     | Butter finger | 'evil-quit     |
      | QA    | Butter finger | 'evil-quit-all |
      | Qa    | Butter finger | 'evil-quit-all |
   
*** Buffer Selection Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-bs-binding
    :END:
   Using The table below as the source for generating [[Evil BS Bindings][Evil BS Bindings]]

   #+TBLNAME: evil_bs_keys
      | Combo | Mode        | Evil Mode | Description | Command             |
      | h     | bs-mode-map | normal    |             | 'evil-backward-char |
      | q     | bs-mode-map | normal    |             | 'bs-abort           |
      | j     | bs-mode-map | normal    |             | 'bs-down            |
      | k     | bs-mode-map | normal    |             | 'bs-up              |
      | l     | bs-mode-map | normal    |             | 'evil-forwared-char |
      | RET   | bs-mode-map | normal    |             | 'bs-select          |
   
*** Evil-Leader Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-leader-binding
    :END:
   Using The table below as the source for generating [[Evil Leader Bindings][Evil Leader Bindings]]

   #+TBLNAME: evil_leader_keys
      | Combo | Description                     | Command                         |
      |-------+---------------------------------+---------------------------------|
      | s     |                                 | 'save-buffer                    |
      | a     |                                 | 'ack-and-a-half                 |
      | j     |                                 | 'dired-jump                     |
      | i     |                                 | 'swiper                         |
      | x     |                                 | 'execute-extended-command       |
      | e     |                                 | 'eval-last-sexp                 |
      | E     |                                 | 'eval-defun                     |
      | 5     |                                 | 'ctl-x-5-prefix                 |
      | q     |                                 | 'evil-window-delete             |
      | C     |                                 | 'customize-group                |
      | b S   |                                 | 'bs-show                        |
      | b d   |                                 | 'kill-this-buffer               |
      | b e   |                                 | 'evil-buffer                    |
      | b i   |                                 | 'ibuffer                        |
      | b q   |                                 | 'kill-buffer-and-window         |
      | \\    |                                 | 'evil-execute-in-emacs-state    |
      | P     |                                 | 'package-list-packages          |
      | V     |                                 | (bind (term "vim"))             |
      | g t   |                                 | 'git-timemachine                |
      | t SPC |                                 | 'whitespace-mode                |
      | t TAB |                                 | 'c-toggle-syntactic-indentation |
      | t b   |                                 | 'sr-speedbar-toggle             |
      | t w   |                                 | 'toggle-truncate-lines          |
      | t s   |                                 | 'qq/toggle-evil-search          |
      | t o   |                                 | 'origami-mode                   |
      | h     |                                 | help-map                        |
      | h x   | Describe character under cursor | 'describe-char                  |
      | h h   |                                 | 'help-for-help-internal         |
   
** Helm
   =Helm= is incremental completion and selection narrowing framework for Emacs.
   It will help steer in the right direction when looking for stuff in Emacs
   (like buffers, files etc)
   Set helm command prefix key, otherwise helm use default prefix "C-x c",
   which is inconvenient because you can accidentially pressed "C-x C-c". Must
   set before helm-config,

   https://github.com/emacs-helm/helm
   http://amitp.blogspot.com/2012/10/emacs-helm-for-finding-files.html
  
   temporary note:
   if helm is exited uncleanly and starts complaining "Error: Trying to run helm
   within a running helm session," try:
   M-C-c, C-], C-u M-x helm-resume, or (setq helm-alive-p nil)
   https://github.com/emacs-helm/helm/issues/208

*** Init

   #+BEGIN_SRC emacs-lisp
     (require 'helm)

     ;; must set before helm-config,  otherwise helm use default
     ;; prefix "C-x c", which is inconvenient because you can
     ;; accidentially pressed "C-x C-c"
     (setq helm-command-prefix-key "C-c h")

     (require 'helm-config)
     (require 'helm-eshell)
     (require 'helm-files)
     (require 'helm-grep)
     (require 'helm-dash)
   #+END_SRC

*** Settings
   Preferred initial settings for Helm

   #+BEGIN_SRC emacs-lisp

     (setq helm-net-prefer-curl t
           helm-bookmark-show-location t          ; display bookmark location
           helm-scroll-amount 4                         ; scroll 4 lines other window using M-<next>/M-<prior>
           helm-quick-update t                   ; do not display invisible candidates
           helm-idle-delay 0.01                  ; be idle for this many seconds, before updating in delayed sources.
           helm-input-idle-delay 0.01            ; be idle for this many seconds, before updating candidate buffer
           helm-ff-search-library-in-sexp t      ; search for library in `require' and `declare-function' sexp.

           helm-display-header-line nil          ;

           helm-split-window-default-side 'other ; open helm buffer in another window
           helm-split-window-in-side-p t         ; open helm buffer inside current window, not occupy whole other window
           helm-buffers-favorite-modes (append helm-buffers-favorite-modes
                                               '(picture-mode artist-mode))
           helm-candidate-number-limit 200       ; limit the number of displayed canidates
           helm-M-x-requires-pattern 0           ; show all candidates when set to 0
           helm-boring-file-regexp-list          ; do not show these files in helm buffer
           '("\\.git$" "\\.hg$" "\\.svn$" "\\.CVS$" "\\._darcs$" "\\.la$" "\\.o$" "\\.i$")
           helm-ff-file-name-history-use-recentf t
           helm-move-to-line-cycle-in-source t   ; move to end or beginning of source
                                             ; when reaching top or bottom of source.
           ido-use-virtual-buffers t             ; Needed in helm-buffers-list
           helm-buffers-fuzzy-matching t         ; fuzzy matching buffer names when non--nil
                                             ; useful in helm-mini that lists buffers
           helm-dash-browser-func 'eww
           helm-dash-common-docsets '("Boost" "C++" "C")
           )
     (custom-set-variables
      '(helm-never-delay-on-input t)  ;; must be t on Mac OS X
      '(helm-yank-symbol-first t)
      '(helm-quick-update t)
      '(helm-full-frame nil)
      '(helm-locate-command "locate %s '%s'")
      '(helm-ff-auto-update-initial-value nil)
      ;; multi3 instead of strict so i can use multiple regexps separated by spaces.
      '(helm-mp-matching-method 'multi3)
      '(helm-buffer-max-length 20)
      ;; use file-name-history, not recentf
      ;;'(helm-ff-file-name-history-use-recentf nil)
      ;; don't use helm for tab completion in shell buffers
      ;; https://groups.google.com/d/msg/emacs-helm/jmiTit83VhE/ZgTkuf83lQEJ
      '(helm-mode-handle-completion-in-region nil)
      )

   #+END_SRC

     Save current position to mark ring when jumping to a different place and
     enable helm-mode.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)
     (helm-mode 1)
     (diminish 'helm-mode)
   #+END_SRC

*** Enter search pattern in the header line
   Via: [[https://www.reddit.com/r/emacs/comments/3asbyn/new_and_very_useful_helm_feature_enter_search/][Reddit post]]

   #+BEGIN_SRC emacs-lisp
     (setq helm-echo-input-in-header-line t)
     (defun helm-hide-minibuffer-maybe ()
       (when (with-helm-buffer helm-echo-input-in-header-line)
         (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
           (overlay-put ov 'window (selected-window))
           (overlay-put ov 'face (let ((bg-color (face-background 'default nil)))
                                   `(:background ,bg-color :foreground ,bg-color)))
           (setq-local cursor-type nil))))
     (add-hook 'helm-minibuffer-set-up-hook 'helm-hide-minibuffer-maybe)
   #+END_SRC

*** Keybindings
    :PROPERTIES:
    :CUSTOM_ID: helm-key-binding
    :END:
      (define-key helm-map (kbd "C-j") 'helm-next-line)
      (define-key helm-map (kbd "C-k") 'helm-previous-line)
      (define-key helm-map (kbd "C-h") 'helm-next-source)
      (define-key helm-map (kbd "C-l") 'helm-previous-source)


   The code generated from this table is [[Helm%20Bindings][here]].
   #+TBLNAME: helm_combo
      | Combo    | Mode               | Description                        | Command                                    |
      |----------+--------------------+------------------------------------+--------------------------------------------|
      | <tab>    | helm-map           | Rebind tab to do persistent action | 'helm-execute-persistent-action            |
      | C-i      | helm-map           | Make TAB works in terminal         | 'helm-execute-persistent-action            |
      | C-z      | helm-map           | List actions using C-z             | 'helm-select-action                        |
      | C-j      | helm-map           | navigation down key in helm buffer | 'helm-next-line                            |
      | C-k      | helm-map           | navigation up key in helm buffer   | 'helm-previous-line                        |
      | C-l      | helm-map           | change helm source                 | 'helm-previous-source                      |
      | <return> | helm-grep-mode-map |                                    | 'helm-grep-mode-jump-other-window          |
      | n        | helm-grep-mode-map |                                    | 'helm-grep-mode-jump-other-window-forward  |
      | p        | helm-grep-mode-map |                                    | 'helm-grep-mode-jump-other-window-backward |

*** Keybindings with Evil
    :PROPERTIES:
    :CUSTOM_ID: helm-evil-key-binding
    :END:

   Check for =evil-mode= and =helm-autoloads= before keybindings. Refer to this code
   #+TBLNAME: helm-evil-combo
      | Combo   | Mode                  | Description | Command                 |
      | SPC b s | evil-normal-state-map |             | 'helm-mini              |
      | SPC f   | evil-normal-state-map |             | 'helm-find-files        |
      | SPC o   | evil-normal-state-map |             | 'helm-imenu             |
      | SPC t   | evil-normal-state-map |             | 'helm-etags-select      |
      | SPC y   | evil-normal-state-map |             | 'helm-show-kill-ring    |
      | SPC m   | evil-normal-state-map |             | 'helm-bookmarks         |
      | SPC r   | evil-normal-state-map |             | 'helm-register          |
      | SPC SPC | evil-normal-state-map |             | 'helm-M-x               |
      | SPC SPC | evil-visual-state-map |             | 'helm-M-x               |
      | SPC a   | evil-normal-state-map |             | 'helm-all-mark-rings    |
      | SPC w   | evil-normal-state-map |             | 'helm-wikipedia-suggest |
      | SPC l   | evil-normal-state-map |             | 'helm-swoop             |
      | SPC L   | evil-normal-state-map |             | 'helm-multi-swoop       |

** Hydra
*** Init

   #+BEGIN_SRC emacs-lisp
     (require 'hydra)
   #+END_SRC

*** Compilation
   With this hydra, you can press =C-x `= as usual to go to the next compilation
   error. Subsequently, you can use =h=, =j=, =k= or =l= respectively to
   navigate to the first, next, previous or last error.

   #+BEGIN_SRC emacs-lisp
     (defhydra hydra-next-error
         (global-map "C-x")
         "
     Compilation errors:
     _j_: next error        _h_: first error    _q_uit
     _k_: previous error    _l_: last error
     "
         ("`" next-error     nil)
         ("j" next-error     nil :bind nil)
         ("k" previous-error nil :bind nil)
         ("h" first-error    nil :bind nil)
         ("l" (condition-case err
                  (while t
                    (next-error))
                (user-error nil))
          nil :bind nil)
         ("q" nil            nil :color blue))
   #+END_SRC

*** Info
   #+BEGIN_SRC emacs-lisp
     (defhydra hydra-info (:color blue :hint nil :idle 0.4)
             "
                                                                       ╭────────────┐
         Nav Files             Navi Nodes          Action              │ Info-mode  │
       ╭───────────────────────────────────────────────────────────────┴────────────╯
         [_?_] summary       [_[_] forward          [_g_] goto node
         [_<_] top node      [_]_] backward         [_s_] search
         [_>_] final node    [_f_] follow ref       [_S_] case-search
         [_d_] info dir      [_l_] hist back        [_m_] menu
         [_i_] index         [_r_] hist forward     [_h_] help
         [_I_] virtual index [_n_] next             [_t_] info-to
         [_L_] hist          [_p_] previous
         [_T_] TOC           [_u_] up
             "
             ("?" Info-summary)
             ("]" Info-forward-node)
             ("[" Info-backward-node)
             ("<" Info-top-node)
             (">" Info-final-node)
             ;; ("b" beginning-of-buffer)
             ;; ("e" end-of-buffer)
             ("h" Info-help)
             ("d" Info-directory)
             ("f" Info-follow-reference)
             ("g" Info-goto-node)
             ("l" Info-history-back)
             ("r" Info-history-forward)
             ("i" Info-index)
             ("I" Info-virtual-index)
             ("L" Info-history)
             ("n" Info-next)
             ("p" Info-prev)
             ("s" Info-search)
             ("S" Info-search-case-sensitively)
             ("T" Info-toc)
             ("u" Info-up)
             ("m" Info-menu)
             ("t" hydra-info-to/body))
     
     (define-key Info-mode-map "." 'hydra-info/body)
   #+END_SRC

*** Helm
   #+BEGIN_SRC emacs-lisp
     (defhydra hydra-helm (:hint nil :color pink)
             "
                                                                               ╭──────┐
        Navigation   Other  Sources     Mark             Do             Help   │ Helm │
       ╭───────────────────────────────────────────────────────────────────────┴──────╯
             ^_k_^         _K_       _p_   [_m_] mark         [_v_] view         [_H_] helm help
             ^^↑^^         ^↑^       ^↑^   [_t_] toggle all   [_d_] delete       [_s_] source help
         _h_ ←   → _l_     _c_       ^ ^   [_u_] unmark all   [_f_] follow: %(helm-attr 'follow)
             ^^↓^^         ^↓^       ^↓^    ^ ^               [_y_] yank selection
             ^_j_^         _J_       _n_    ^ ^               [_w_] toggle windows
       --------------------------------------------------------------------------------
             "
             ("<tab>" helm-keyboard-quit "back" :exit t)
             ("<escape>" nil "quit")
             ("\\" (insert "\\") "\\" :color blue)
             ("h" helm-beginning-of-buffer)
             ("j" helm-next-line)
             ("k" helm-previous-line)
             ("l" helm-end-of-buffer)
             ("g" helm-beginning-of-buffer)
             ("G" helm-end-of-buffer)
             ("n" helm-next-source)
             ("p" helm-previous-source)
             ("K" helm-scroll-other-window-down)
             ("J" helm-scroll-other-window)
             ("c" helm-recenter-top-bottom-other-window)
             ("m" helm-toggle-visible-mark)
             ("t" helm-toggle-all-marks)
             ("u" helm-unmark-all)
             ("H" helm-help)
             ("s" helm-buffer-help)
             ("v" helm-execute-persistent-action)
             ("d" helm-persistent-delete-marked)
             ("y" helm-yank-selection)
             ("w" helm-toggle-resplit-and-swap-windows)
             ("f" helm-follow-mode))
     (define-key helm-map (kbd "C-a") 'hydra-helm/body)
   #+END_SRC
*** Projectile
   #+BEGIN_SRC emacs-lisp
     (defhydra hydra-projectile-other-window (:color teal)
       "projectile-other-window"
       ("f"  projectile-find-file-other-window        "file")
       ("g"  projectile-find-file-dwim-other-window   "file dwim")
       ("d"  projectile-find-dir-other-window         "dir")
       ("b"  projectile-switch-to-buffer-other-window "buffer")
       ("q"  nil                                      "cancel" :color blue))

     (defhydra hydra-projectile (:color teal :hint nil)
       "
          PROJECTILE: %(projectile-project-root)

          Find File            Search/Tags          Buffers                Cache
     ------------------------------------------------------------------------------------------
     _s-f_: file            _a_: ag                _i_: Ibuffer           _c_: cache clear
      _ff_: file dwim       _g_: update gtags      _b_: switch to buffer  _x_: remove known project
      _fd_: file curr dir   _o_: multi-occur     _s-k_: Kill all buffers  _X_: cleanup non-existing
       _r_: recent file                                               ^^^^_z_: cache current
       _d_: dir

     "
       ("a"   projectile-ag)
       ("b"   projectile-switch-to-buffer)
       ("c"   projectile-invalidate-cache)
       ("d"   projectile-find-dir)
       ("s-f" projectile-find-file)
       ("ff"  projectile-find-file-dwim)
       ("fd"  projectile-find-file-in-directory)
       ("g"   ggtags-update-tags)
       ("s-g" ggtags-update-tags)
       ("i"   projectile-ibuffer)
       ("K"   projectile-kill-buffers)
       ("s-k" projectile-kill-buffers)
       ("m"   projectile-multi-occur)
       ("o"   projectile-multi-occur)
       ("s-p" projectile-switch-project "switch project")
       ("p"   projectile-switch-project)
       ("s"   projectile-switch-project)
       ("r"   projectile-recentf)
       ("x"   projectile-remove-known-project)
       ("X"   projectile-cleanup-known-projects)
       ("z"   projectile-cache-current-file)
       ("`"   hydra-projectile-other-window/body "other window")
       ("q"   nil "cancel" :color blue))
   #+END_SRC

** Irony
   A alternate Client/Server application that indexes C/C++ code and keeps a persistent
   in-memory database for references

   #+begin_src emacs-lisp
     (add-hook 'c++-mode-hook 'irony-mode)
     (add-hook 'c-mode-hook 'irony-mode)
     (add-hook 'objc-mode-hook 'irony-mode)

     (setq irony-additional-clang-options '("-std=c++11"))

     ;; replace the `completion-at-point' and `complete-symbol' bindings in
     ;; irony-mode's buffers by irony-mode's function
     (defun my-irony-mode-hook ()
     (define-key irony-mode-map [remap completion-at-point]
         'irony-completion-at-point-async)
     (define-key irony-mode-map [remap complete-symbol]
         'irony-completion-at-point-async))
     (add-hook 'irony-mode-hook 'my-irony-mode-hook)
     (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
   #+end_src

*** Irony Eldoc
 #+begin_src emacs-lisp
   (add-hook 'irony-mode-hook 'irony-eldoc)
 #+end_src

*** Company integration
 #+begin_src emacs-lisp
   (eval-after-load 'company
     '(add-to-list 'company-backends 'company-irony))

   ;; (optional) adds CC special commands to `company-begin-commands' in order to
   ;; trigger completion at interesting places, such as after scope operator
   ;;     std::|
   (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
 #+end_src

*** C-Headers
   #+begin_src emacs-lisp
     (require 'company-irony-c-headers)
     ;; Load with `irony-mode` as a grouped backend
     (eval-after-load 'company
       '(add-to-list
         'company-backends '(company-irony-c-headers company-irony)))
   #+end_src

*** Flycheck integration
 #+begin_src emacs-lisp
   (eval-after-load 'flycheck
    '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
 #+end_src

*** Bind TAB for indent-or-complete
 #+begin_src emacs-lisp
   (defun irony--check-expansion ()
   (save-excursion
     (if (looking-at "\\_>") t
       (backward-char 1)
       (if (looking-at "\\.") t
         (backward-char 1)
         (if (looking-at "->") t nil)))))
   (defun irony--indent-or-complete ()
   "Indent or Complete"
   (interactive)
   (cond ((and (not (use-region-p))
               (irony--check-expansion))
          (message "complete")
          (company-complete-common))
         (t
          (message "indent")
          (call-interactively 'c-indent-line-or-region))))
   (defun irony-mode-keys ()
   "Modify keymaps used by `irony-mode'."
   (local-set-key (kbd "TAB") 'irony--indent-or-complete)
   (local-set-key [tab] 'irony--indent-or-complete))
   (add-hook 'c-mode-common-hook 'irony-mode-keys)
 #+end_src

** Git/Magit
*** Settings
   #+BEGIN_SRC emacs-lisp
     (require 'magit)
     (require 'magit-gerrit)
     (require 'evil-magit)
     (setq magit-diff-options '("--histogram"))
     (setq magit-stage-all-confirm nil)
     (defadvice magit-status (around qq/magit-fullscreen activate)
         (window-configuration-to-register :magit-fullscreen)
         ad-do-it
         (delete-other-windows))
     (defun qq/magit-quit-session ()
       (interactive)
       (kill-buffer)
       (jump-to-register :magit-fullscreen))
     (after 'evil
       (after 'git-commit-mode
         (add-hook 'git-commit-mode-hook 'evil-emacs-state))
       (after 'magit-blame
         (defadvice magit-blame-file-on (after advice-for-magit-blame-file-on activate)
           (evil-emacs-state))
         (defadvice magit-blame-file-off (after advice-for-magit-blame-file-off activate)
           (evil-exit-emacs-state))))
     (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
     (unless (display-graphic-p)
       (diff-hl-margin-mode))
   #+END_SRC

   Setup for =magit-gerrit=

   #+BEGIN_SRC emacs-lisp
     (after 'magit
         (require 'magit-gerrit))
     (setq-default magit-gerrit-ssh-creds qq/gerrit-creds)
   #+END_SRC

*** git-blame-line
   This function runs git blame on the line the cursor is on. It prints the
   short commit id, author, and commit date into the =minibuffer=. It also
   copies the short commit id to the kill ring so you can paste it
   somewhere else if you need to. From [[http://jayconrod.com/posts/67/emacs-run-gitblame-on-the-current-line][here]].

   #+BEGIN_SRC emacs-lisp
     (defun git-blame-line ()
       "Runs `git blame` on the current line and
        adds the commit id to the kill ring"
       (interactive)
       (let* ((line-number (save-excursion
                             (goto-char (point-at-bol))
                             (+ 1 (count-lines 1 (point)))))
              (line-arg (format "%d,%d" line-number line-number))
              (commit-buf (generate-new-buffer "*git-blame-line-commit*")))
         (call-process "git" nil commit-buf nil 
                       "blame" (buffer-file-name) "-L" line-arg)
         (let* ((commit-id (with-current-buffer commit-buf
                             (buffer-substring 1 9)))
                (log-buf (generate-new-buffer "*git-blame-line-log*")))
           (kill-new commit-id)
           (call-process "git" nil log-buf nil 
                         "log" "-1" "--pretty=%h   %an   %s" commit-id)
           (with-current-buffer log-buf
             (message "Line %d: %s" line-number (buffer-string)))
           (kill-buffer log-buf))
         (kill-buffer commit-buf)))
   #+END_SRC

*** git-gutter-fringe
   Enable =Git-Gutter+= globally

   #+BEGIN_SRC emacs-lisp
     (require 'git-gutter-fringe)
     (global-git-gutter-mode +1)

     (add-hook 'git-gutter:update-hooks 'magit-revert-buffer-hook)
   #+END_SRC

*** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: evil-magit-binding
    :END:
   Using The table below as the source for generating [[Evil Magit Bindings][Evil Magit Bindings]]

   #+TBLNAME: evil_magit_keys
      | Combo | Description | Command         |
      |-------+-------------+-----------------|
      | g s   |             | 'magit-status   |
      | g b   |             | 'magit-blame    |
      | g C   |             | 'magit-commit   |
      | g i   |             | 'git-blame-line |
      | g l   |             | 'magit-log      |

** Origami
   Text folding solution for Emacs

   #+BEGIN_SRC emacs-lisp
       (require 'origami)
       (add-hook 'prog-mode-hook 'origami-mode)
   #+END_SRC

*** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: evil-origami-binding
    :END:
   Using The table below as the source for generating [[Evil Origami Bindings][Evil Origami Bindings]]

   #+TBLNAME: evil_origami_keys
      | Combo | Description                                                                                                                 | Command                         |
      |-------+-----------------------------------------------------------------------------------------------------------------------------+---------------------------------|
      | z o   | open fold node                                                                                                              | 'origami-open-node              |
      | z O   | open fold node and all of its children                                                                                      | 'origami-open-node-recursively  |
      | z s   | Like origami-open-node but also opens parent fold nodes recursively so as to ensure the position where point is is visible. | 'origami-show-node              |
      | z c   | Close a fold node.                                                                                                          | 'origami-close-node             |
      | z C   | Close a fold node and all of its children                                                                                   | 'origami-close-node-recursively |
      | z a   | Toggle open or closed a fold node.                                                                                          | 'origami-toggle-node            |
      | z m   | Close all fold in the buffer                                                                                                | 'origami-close-all-nodes        |
      | z r   | Open all fold in the buffer                                                                                                 | 'origami-open-all-nodes         |
      | z d   | Close all fold but the current one                                                                                          | 'origami-show-only-node         |
      | z n   | Move to the next fold.                                                                                                      | 'origami-next-fold              |
      | z b   | Move to the previous fold.                                                                                                  | 'origami-previous-fold          |

** Org
*** Enable Org Mode
   #+BEGIN_SRC emacs-lisp
     (require 'org-bullets)
   #+END_SRC


   When editing org-files with source-blocks, we want the source blocks to
   be themed as they would in their native mode.

   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
     (setq org-src-tab-acts-natively t)
   #+END_SRC

   Other settings for org.

   #+BEGIN_SRC emacs-lisp
     (after 'org
       (unless (file-exists-p org-directory)
         (make-directory org-directory))

       (require 'ox-md nil t)

       (setq qq/inbox-org-file (concat org-directory "/inbox.org")

             org-startup-indented t
             org-mobile-directory (concat org-directory "/MobileOrg")
             org-mobile-inbox-for-pull (concat org-directory "/from-mobile.org")

             org-default-notes-file qq/inbox-org-file
             org-log-done t
             org-completion-use-ido t
             org-return-follows-link t

             org-ellipsis "▼"

             org-indent-indentation-per-level 3

             org-agenda-files `(,org-directory)
             org-capture-templates
             '(("t" "Todo" entry (file+headline qq/inbox-org-file "TODO")
                "* TODO %?\n%U\n%a\n")
               ("n" "Note" entry (file+headline qq/inbox-org-file "NOTES")
                "* %? :NOTE:\n%U\n%a\n")
               ("m" "Meeting" entry (file qq/inbox-org-file)
                "* MEETING %? :MEETING:\n%U")
               ("j" "Journal" entry (file+datetree (concat org-directory "/journal.org"))
                "* %?\n%U\n"))

             ;; allow changing between todo stats directly by hotkey
             org-use-fast-todo-selection t
             org-treat-S-cursor-todo-selection-as-state-change nil
             org-todo-keywords
             '((sequence "TODO(t)" "NEXT(n@)" "|" "DONE(d)")
               (sequence "WAITING(w@/!)" "|" "CANCELLED(c@/!)"))

             org-todo-state-tags-triggers
             ' (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("TODO" ("WAITING") ("CANCELLED"))
                ("NEXT" ("WAITING") ("CANCELLED"))
                ("DONE" ("WAITING") ("CANCELLED")))

             org-refile-targets '((nil :maxlevel . 9)
                                  (org-agenda-files :maxlevel . 9))
             )

       (unless (file-exists-p org-mobile-directory)
         (make-directory org-mobile-directory))

       (after 'evil
         (add-hook 'org-capture-mode-hook 'evil-insert-state))

       (when (boundp 'org-plantuml-jar-path)
         (org-babel-do-load-languages
          'org-babel-load-languages
          '((plantuml . t))))

       (add-hook 'org-mode-hook (lambda ()
                                  (when (or (executable-find "aspell")
                                            (executable-find "ispell")

                                            (executable-find "hunspell"))
                                    (flyspell-mode))
                                  (rainbow-mode)
                                  )))
   #+END_SRC

   Fix =yasnippet= when =org-mode= is on.

   #+BEGIN_SRC emacs-lisp
     ;(defun yas-org-very-safe-expand ()
     ;  (let ((yas-fallback-behavior 'return-nil)) (yas-expand)))
   #+END_SRC

   Then, tell Org mode what to do with the new function:

   #+BEGIN_SRC emacs-lisp
     ;(add-hook 'org-mode-hook
     ;          (lambda ()
     ;            (make-variable-buffer-local 'yas/trigger-key)
     ;            (setq yas/trigger-key [tab])
     ;            (writegood-mode)
     ;            (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)
     ;            (define-key yas-keymap [tab] 'yas-next-field)))

   #+END_SRC

   Nice bulleted lists.

   #+begin_src emacs-lisp
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   #+end_src

*** Just Evaluate It
   I'm normally fine with having my code automatically evaluated.

   #+BEGIN_SRC emacs-lisp
     (setq org-confirm-babel-evaluate nil)
   #+END_SRC

*** Bindings
    :PROPERTIES:
    :CUSTOM_ID: orgmode-key-binding
    :END:
   The table below will be generated as key-bindings [[Org%20Mode%20Bindings][here]].

   #+TBLNAME: org_keys
      | Combo | Description                                                  | Command         |
      |-------+--------------------------------------------------------------+-----------------|
      | C-c c | Capture and store note quickly                               | 'org-capture    |
      | C-c a | Display Org agenda                                           | 'org-agenda     |
      | C-c l | Correctly insert links into org files                        | 'org-store-link |
      | C-c b | iswitchb-like interface to switch to and between Org buffers | 'org-iswitchb   |

*** Evil Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-org-binding
    :END:
   Using The table below as the source for generating [[Evil Org Bindings][Evil Org Bindings]]

   #+TBLNAME: evil_org_keys
      | Combo  | Mode         | Evil Mode | Description | Command                                                       |
      | z c    | org-mode-map | normal    |             | 'hide-subtree                                                 |
      | \\ TAB | org-mode-map | normal    |             | '(lambda () (interactive)(org-shiftmetadown) (evil-insert 0)) |
      | -      | org-mode-map | normal    |             | 'org-cycle-list-bullet                                        |
      | C-c .  | org-mode-map | insert    |             | '(lambda () (interactive) (org-time-stamp-inactive t))        |
   
** Projectile
   Project interaction module for Emacs.

*** Settings
   #+BEGIN_SRC emacs-lisp
     (projectile-global-mode)
     (setq projectile-tags-command "gtags")
     (setq projectile-enable-caching t)
     (setq projectile-completion-system 'helm)
     (helm-projectile-on)
     ;; global ignores
     (add-to-list 'projectile-globally-ignored-files ".tern-port")
     (add-to-list 'projectile-globally-ignored-files "GTAGS")
     (add-to-list 'projectile-globally-ignored-files "GPATH")
     (add-to-list 'projectile-globally-ignored-files "GRTAGS")
     (add-to-list 'projectile-globally-ignored-files "GSYMS")
     (add-to-list 'projectile-globally-ignored-files ".DS_Store")
   #+END_SRC

*** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: evil-projectile-binding
    :END:
   Using The table below as the source for generating [[Evil Projectile Bindings][Evil Projectile Bindings]]

   #+TBLNAME: evil_projectile_keys
      | Combo   | Description                               | Command                          |
      |---------+-------------------------------------------+----------------------------------|
      | SPC /   | Search using ag within projectile project | 'helm-projectile-ag              |
      | SPC p a |                                           | 'helm-projectile-find-other-file |
      | SPC p s |                                           | 'helm-projectile-switch-project  |
      | SPC p e |                                           | 'helm-projectile                 |
      | SPC p f |                                           | 'helm-projectile-find-file       |

** RTags
   A Client/Server application that indexes C/C++ code and keeps a persistent
   in-memory database for references

   #+begin_src emacs-lisp
     (require 'rtags)
     (rtags-enable-standard-keybindings c-mode-base-map)
   #+end_src

** Smartparens
   Minor mode that deals with parens pairs

*** Settings
   #+BEGIN_SRC emacs-lisp
     (require 'smartparens-config)
     (smartparens-global-mode t)
     (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)

     (show-smartparens-global-mode t)

     (custom-set-faces
         '(sp-show-pair-match-face ((t (
                         :inherit nil
                         :background "#00ffff"
                         :bold t
                         :foreground "#000000"))))

         '(sp-pair-overlay-face ((t (
                         :inherit nil
                         :background nil
                         :foreground "#7cfc00"))))

         '(sp-wrap-overlay-face ((t (
                         :inherit nil
                         :background nil
                         :foreground "#ff4500"))))

         '(sp-wrap-tag-overlay-face ((t (
                         :inherit nil
                         :background nil
                         :foreground "#ff1493"))))

         '(sp-show-pair-enclosing ((t (
                         :inherit nil
                         :foreground "#000000"
                         :background "#ff6347"))))
     )
   #+END_SRC
*** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: smartparens-binding
    :END:
   Using The table below as the source for generating [[Smartparens Bindings][Smartparens Bindings]]

   #+TBLNAME: smartparens_keys
      | Combo | Description                             | Command          |
      |-------+-----------------------------------------+------------------|
      | C-'   | Jump after the next balance expressions | 'sp-forward-sexp |

** Swiper
   Visual regex search
   #+BEGIN_SRC emacs-lisp
       (require 'ivy)
       (require 'swiper)
   #+END_SRC

** Which key
   Show keybindings. [[https://github.com/justbur/emacs-which-key]]
*** Init
   #+BEGIN_SRC emacs-lisp
     (require 'which-key)
     (which-key-mode)
     (which-key-setup-side-window-right-bottom)
   #+END_SRC

* Language  Modes
** General
Some general settings that should apply to all programming mode. Highlight
=FIXME= and =TODO= so they stand out. Also enable =indent-guide-mode= and
=rainbow-delimiter-mode=

#+begin_src emacs-lisp
  (defun qq/add-watchwords ()
    (font-lock-add-keywords
     nil '(("\\<\\(FIXME\\|TODO\\|NOCOMMIT\\)\\>"
            1 '((:foreground "orange") (:weight bold)) t))))

  (add-hook 'prog-mode-hook
            '(lambda()
               (qq/add-watchwords)
               (rainbow-delimiters-mode)
               (require 'highlight-indent-guides)
               (highlight-indent-guides-mode)
               (smart-tabs-insinuate 'c++ 'c 'javascript)
               ;gruber-theme
               (set-face-background 'highlight-indent-guides-odd-face "#151515")
               (set-face-background 'highlight-indent-guides-even-face "#1d1d1d")
               ;gotham-theme
               ;(set-face-background 'highlight-indent-guides-odd-face "#11151c")
               ;(set-face-background 'highlight-indent-guides-even-face "#071110")
               (setq indent-guide-recursive t)
               (color-identifiers-mode t)))
#+end_src

** C and its derivative
*** Common
The =c-mode-common-hook= is a general hook that work on all C-like
languages (C, C++, Java, etc...). I like being able to quickly compile
using =C-c C-c= (instead of =M-x compile=), a habit from =latex-mode=.

#+BEGIN_SRC emacs-lisp
  (defun qq/c-mode-init ()
    (local-set-key (kbd "C-c C-c") 'compile)
    ;; To re-format c code. use C-x h M-C-\ (this puts the region around
    ;; the entire buffer, and then runs the indent-region command).
    (c-set-style "stroustrup")   ; C indenting style
    (c-set-offset 'inline-open 0)

    ;; Greenwave coding style
    (setq c-default-style "stroustrup"
          c-basic-offset 4)
    (setq-default c-basic-offset 4
                  tab-width 4
                  indent-tabs-mode t)
    (c-set-offset 'innamespace 0)

    (eldoc-mode)
    (ggtags-mode 1)

    ;; slow
    ;;(flycheck-mode)
    ;;(setq flycheck-gcc-language-standard "c++11")
    ;;(flycheck-select-checker 'c/c++-gcc)
    ;;;(setq flycheck-clang-language-standard "c++11")
    ;;;(setq flycheck-clang-standard-library "libc++")
    ;;;(setq semantic-idle-scheduler-max-buffer-size 0)

    ;(setq rtags-completions-enabled t)
    ;(define-key c-mode-map  [(control tab)] 'company-complete)
    ;(define-key c++-mode-map  [(control tab)] 'company-complete)

    ; enable spell check in comment area
    (flyspell-prog-mode))

  (add-hook 'c-mode-hook 'qq/c-mode-init)
  (add-hook 'c++-mode-hook 'qq/c-mode-init)
#+END_SRC

*** Definition lookup
Look for definion in a browser C++
Original idea: http://xahlee.org/emacs/emacs_lookup_ref.html

#+begin_src emacs-lisp
  (defun lookup-word-definition-c++-mode ()
    "Look up the current word's definition in a browser.
  If a region is active (a phrase), lookup that phrase.
  Copy the word/region into the clipboard.
  You MUST launch Opera before using this function!!!"
    (interactive)
    (let (myword myurl)
      (setq myword
            (if (and transient-mark-mode mark-active)
                (buffer-substring-no-properties (region-beginning) (region-end))
              (thing-at-point 'symbol)))

      ;; Also, copy myword to clipboard
      (if (and transient-mark-mode mark-active)
          (clipboard-kill-ring-save (region-beginning) (region-end))
        (let* ((chars "A-Za-z\\-")
               (left (save-excursion
                       (skip-chars-backward chars)
                       (point)))
               (right (save-excursion
                        (skip-chars-forward chars)
                        (point)))
               )
          (clipboard-kill-ring-save left right)))

      (setq myword (replace-regexp-in-string " " "%20" myword))
      (setq myurl (concat "http://www.cppreference.com/wiki/?do=search&id=" myword ))
                                          ; %22 is ""
                                          ; %2B is +
      (setq myurl (replace-regexp-in-string " " "%20" myurl))

      ;;(browse-url myurl) ; to use Firefox

      ;; You must run Opera before launching this program
      ;;(shell-command (concat "opera --remote 'openURL(" myurl ", new-tab)' ")) ; Opera open the url
      (shell-command (concat "chromium-browser " myurl)) ; Chromium open the url
      ;;(shell-command (concat "wmctrl -a Opera")) ; Raise up the Opera window
      ;;(w3m-browse-url myurl) ;; if you want to browse using w3m
      ))


  (define-key c-mode-map (kbd "<f12>") 'lookup-word-definition-c++-mode)
  (define-key c++-mode-map (kbd "<f12>") 'lookup-word-definition-c++-mode)
#+end_src

*** Highlight C+++ member function
Highlight only member function calls in =c++-mode=, for examples
Object o;
o.getName();
getName();

Here only o.getName() will get highlighted.

#+begin_src emacs-lisp
  (defface font-lock-method-call-face
    '((t . (:foreground "orangered" :bold t)))
    "Face to display method calls in.")
  (font-lock-add-keywords 'c++-mode
                          `((,(concat
                               "\\<[_a-zA-Z][_a-zA-Z0-9]*\\>"       ; Object identifier
                               "\\s *"                              ; Optional white space
                               "\\(?:\\.\\|->\\)"                   ; Member access
                               "\\s *"                              ; Optional white space
                               "\\<\\([_a-zA-Z][_a-zA-Z0-9]*\\)\\>" ; Member identifier
                               "\\s *"                              ; Optional white space
                               "(")                                 ; Paren for method invocation
                             1 'font-lock-method-call-face t)))
#+end_src
*** Compilation
#+BEGIN_SRC emacs-lisp
  (defun qq/c-mode-compile()
    (interactive)
    (setq-local compilation-read-command nil)
    (call-interactively 'compile))

  (after "c-mode" (define-key c-mode-map (kbd "C-c C-c") 'qq/c-mode-compile))
  (after "c++-mode" (define-key c++-mode-map (kbd "C-c C-c") 'qq/c-mode-compile))
#+END_SRC

*** Java
Some statements in Java appear often, and become tedious to write
out. We can use abbrevs to speed this up.

#+BEGIN_SRC emacs-lisp
  (define-abbrev-table 'java-mode-abbrev-table
    '(("psv" "public static void main(String[] args) {" nil 0)
      ("sopl" "System.out.println" nil 0)
      ("sop" "System.out.printf" nil 0)))
#+END_SRC

To be able to use the abbrev table defined above, =abbrev-mode= must be
activated.

#+BEGIN_SRC emacs-lisp
  (defun java-setup ()
    (abbrev-mode t)
    (setq-local compile-command (concat "javac " (buffer-name))))

  (add-hook 'java-mode-hook 'java-setup)
#+END_SRC

*** Objective-C
Associate =.mm=-files with =objc-mode= instead of =nroff-mode=.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.mm\\'" . objc-mode))
#+END_SRC

* Recipes
* Bindings
** Meta
   First, we need to create custom macros.

   #+BEGIN_SRC emacs-lisp
     (require 'bind-key)
     (defmacro bind (&rest commands)
       "Convience macro which creates a lambda interactive command."
       `(lambda ()
          (interactive)
          ,@commands))

     (defun qq/goto-scratch-buffer ()
       "Create a new scratch buffer."
       (interactive)
       (switch-to-buffer (get-buffer-create "*scratch*"))
       (emacs-lisp-mode))

     ;; mouse scrolling in terminal
     (unless (display-graphic-p)
       (global-set-key [mouse-4] (bind (scroll-down 1)))
       (global-set-key [mouse-5] (bind (scroll-up 1))))
   #+END_SRC


   We need to turn the mode on here so that we can map keys further below. We
   lower the delay so that chords are not triggered too easily.

   #+NAME: gen-keys
   #+BEGIN_SRC emacs-lisp :var tname=1 :var mvar="" :var mmap="" :var moda="" :results output :tangle no :exports none :colnames yes
     (mapcar (lambda (l)
               (unless (string-match "^<[[:digit:]]+>$" (format "%s" (car l)))
                 (let* ((key (car l))
                        (usemap (string< "" (format "%s" mmap)))
                        (map (if usemap
                                      (cond ((string= (format "%s" mmap) "t") (nth 1 l))
                                        ((string= (format "%s" mmap) "ev-nor") "evil-normal-state-map")
                                        ((string= (format "%s" mmap) "ev-mot") "evil-motion-state-map")
                                        ((string= (format "%s" mmap) "ev-vis") "evil-visual-state-map")
                                        ((string= (format "%s" mmap) "mvar") mvar)
                                        (t (format "%s" mmap))) nil))
                        (def (cond ((string= (format "%s" moda) "key")
                                    (format "key-chord-define-global \"%s\"" key))
                                   ((string= (format "%s" moda) "evil")
                                    (format "evil-define-key '%s %s (kbd \"%s\")" (nth 2 l) (nth 1 l) key))
                                   ((string= (format "%s" moda) "lead")
                                    (format "evil-leader/set-key \"%s\"" key))
                                   ((string= (format "%s" moda) "xvil")
                                    (format "evil-ex-define-cmd \"%s\"" key))
                                   ((string= (format "%s" key) "[escape]")
                                    (format "bind-key %s" key))
                                   (t (format "bind-key \"%s\"" key))))
                        (command (car (last l))))
                   (if usemap
                       (princ (format "(%s %s %s)\n" def command map))
                     (princ (format "(%s %s)\n" def command))))))
             tname)
   #+END_SRC

   Another function for generating key for Guide-Key

   #+NAME: gen-guide-keys
   #+BEGIN_SRC emacs-lisp :var keys=guide_keys :results output :tangle no :exports none :colnames yes
     (princ "(setq guide-key/guide-key-sequence '(" )
     (mapcar (lambda (l)
                (princ (format "\"%s\" " (car l))))
             keys)
     (princ "))\n" )
   #+END_SRC

   Utility function for keys generation, this portion will add pre/post code

   #+NAME: gen-fix
   #+BEGIN_SRC emacs-lisp :var pre="" :var pos="" :result output :tangle no :exports none :colnames yes
     (let* ((beg (format "%s" pre))
            (las (format "%s" pos)))
       (if (string< "" beg) (princ (format "(%s" beg))
         (princ las)))
   #+END_SRC

** Generate all the binding here.
   The code for the keys is generated from data in a named Org table, i.e. =keys=
   using a bit of Elisp code =gen-keys= and is spit out inside a code block via
   [[http://orgmode.org/manual/noweb.html][Noweb syntax]]. I'd like to be able to have only one place to
   change key information and have it updated wherever necessary.

*** Basic Bindings
   Generate binding using table from [[#default-key-binding][here]]

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-keys(tname=std_keys)>>
   #+END_SRC

*** Evil Global Bindings
   Generate binding using table from [[#evil-global-binding][here]]

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-fix(pre="after 'evil")>>
     <<gen-keys(tname=evil_global_keys)>>
   #+END_SRC

*** Evil Normal Bindings
   Generate binding using table from [[#evil-normal-binding][here]]

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-keys(mmap="ev-nor", tname=evil_std_keys)>>
   #+END_SRC

*** Evil Motion Bindings
   Generate binding using table from [[#evil-motion-binding][here]]

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-keys(mmap="ev-mot", tname=evil_motion_keys)>>
   #+END_SRC

*** Evil Visual Bindings
   Generate binding using table from [[#evil-visual-binding][here]]

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-keys(mmap="ev-vis", tname=evil_visual_keys)>>
   #+END_SRC

*** Evil Ex Bindings
   Generate binding using table from [[#evil-ex-binding][here]]

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-keys(moda="xvil", tname=evil_ex_keys)>>
   #+END_SRC

*** Evil BS Bindings
   Generate binding using table from [[#evil-bs-binding][here]]

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-fix(pre="defadvice bs-mode (before bs-mode-override-keybindings activate)\n (evil-make-overriding-map bs-mode-map 'normal t)")>>
     <<gen-keys(moda="evil", tname=evil_bs_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

*** Evil Leader Bindings
   Generate binding using table from [[#evil-leader-binding][here]]

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-fix(pre="after \"evil-leader-autoloads\"")>>
     <<gen-keys(moda="lead", tname=evil_leader_keys)>>
   #+END_SRC

*** Evil Magit Bindings
   Generate binding using table from [[#evil-magit-binding][here]]

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-fix(pre="after \"magit-autoloads\"")>>
     <<gen-keys(moda="lead", tname=evil_magit_keys)>>
     <<gen-fix(pos=")\n")>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

*** Evil Projectile Bindings
   Generate binding using table from [[#evil-projectile-binding][here]]

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-fix(pre="after \"projectile-autoloads\"")>>
     <<gen-keys(mmap="ev-nor", tname=evil_projectile_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

*** Evil Origami Bindings
   Generate binding using table from [[#evil-origami-binding][here]]

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-fix(pre="after \"origami-autoloads\"")>>
     <<gen-keys(mmap="ev-nor", tname=evil_origami_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

*** Evil Org Bindings
   Generate binding using table from [[#evil-org-binding][here]]

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-keys(moda="evil", tname=evil_org_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

*** Helm Bindings
   Binding code generation for [[#helm-key-binding][this]] table

   #+BEGIN_SRC emacs-lisp :noweb yes :result silent
     <<gen-keys(mmap="t", tname=helm_combo)>>
   #+END_SRC

*** Helm with Evil Bindings
   Binding code generation for [[#helm-evil-key-binding][this]] table

   #+BEGIN_SRC emacs-lisp :noweb yes :result silent
     <<gen-fix(pre="after 'evil\n (after \"helm-autoloads\"")>>
     <<gen-keys(mmap="t", tname=helm-evil-combo)>>
     <<gen-fix(pos="))\n")>>
   #+END_SRC

*** Org Mode Bindings
   =org_keys= table is [[#orgmode-key-binding][here]].

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-keys(tname=org_keys)>>
   #+END_SRC

*** Smartparens Bindings
   Binding code generation for [[#smartparens-binding][this]] table

   #+BEGIN_SRC emacs-lisp :noweb yes :result silent
     <<gen-keys(mmap="mvar", mvar="smartparens-mode-map", tname=smartparens_keys)>>
   #+END_SRC

** Evil
*** Basic Behaviour

   #+BEGIN_SRC emacs-lisp
     (after 'evil
   #+END_SRC

*** Git-Gutter+

   #+BEGIN_SRC emacs-lisp
     (after "git-gutter-autoloads"
       (evil-leader/set-key
         "g a" 'git-gutter:stage-hunk
         "g r" 'git-gutter:revert-hunk)
       (define-key evil-normal-state-map (kbd "[ h") 'git-gutter:previous-hunk)
       (define-key evil-normal-state-map (kbd "] h") 'git-gutter:next-hunk)
       )
   #+END_SRC

*** Ido

   #+BEGIN_SRC emacs-lisp
       (define-key evil-normal-state-map (kbd "SPC b k") 'ido-kill-buffer)
;       (define-key evil-normal-state-map (kbd "SPC f") 'ido-find-file)
   #+END_SRC

*** CC-Mode
   #+BEGIN_SRC emacs-lisp
     (evil-define-key 'insert c-mode-base-map (kbd "RET") 'newline-and-indent)
   #+END_SRC

*** Ace-Jump-Mode

   #+BEGIN_SRC emacs-lisp
       (after "ace-jump-mode-autoloads"
         (define-key evil-operator-state-map (kbd "z") 'evil-ace-jump-char-mode)
         (define-key evil-normal-state-map (kbd "s") 'evil-ace-jump-char-mode)
         (define-key evil-motion-state-map (kbd "S-SPC") 'evil-ace-jump-line-mode)))
   #+END_SRC

** Company

   #+BEGIN_SRC emacs-lisp
     (after 'company
       (define-key company-active-map (kbd "C-j") 'company-select-next)
       (define-key company-active-map (kbd "C-k") 'company-select-previous))
   #+END_SRC

