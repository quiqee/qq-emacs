#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el :comments org
#+DATE:  <2014-08-16 Sat>

#+TITLE: Emacs configuration file
#+AUTHOR: QuiQee

* About
   This is an Emacs configuration file written in =org-mode=. There are a few
   reasons why I wanted to do this. I wanted to learn =org-mode=, one way to do
   this is by practicing on file I'm often work with. I just started using emacs
   a couple of weeks ago. When I saw an Emacs configuration done in =org-mode=,
   I knew this is what I wanted to do. This way I could gain more knowledge of
   Emacs as I added new stuff here from where ever I can gather from the web.

   *This is live document, always work in progress*

** How does it work?
   =org-mode= support code block exports through a process called =tangle=. This
   document have a global setting that will enable =tangle= on all code block
   except for code block marked with =:tangle no=. The resulting code is stored
   in =~/.emacs.d/init.el=. A compiled code will also be produced. Take a look
   at [[Tangling Function]] for more details.

   You can find more information about *Literate Programming* and *org-mode*
   here:
   [[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming]]

** Dot Emacs
   Most of the settings below are taken from all over the interweb. Some
   notable dot-emacs that I copied most are from:

   - [[https://github.com/larstvei/dot-emacs][larstvei dot-emacs]] :: this is where I get the idea to start using
        =org-mode= as my dot-emacs file
   - [[https://github.com/dakrone/dakrone-dotfiles/blob/master/.emacs.d/settings.org][dakrone-dotfiles]] :: some of the settings there are a bit outdated, but
        there are still plenty of gems to reuse.
   - [[https://github.com/bling/dotemacs][bling/dotemacs]] :: Knowing =evil-mode= is what I made me switch from Vim to
        Emacs. Bling =evil-mode= settings are used extensively here.
   - [[https://github.com/waymondo/hemacs][waymondo/hemacs]] :: Another dot-emacs settings that I refer to. Make me
        think hard about using =use-package=
   - [[https://github.com/steckerhalter/steckemacs/blob/master/steckemacs.org][steckerhalter/steckemacs]] :: I love the way he use table for keybindings
   - [[https://github.com/joedicastro/dotfiles/tree/master/emacs][joedicastro/emacs]] :: just found out about this.
   - [[https://github.com/christophermaier/emacs.d][christophermaier/emacs.d]] :: another dot-emacs source to utilize
   - [[https://github.com/dabrahams/dwamacs][dabrahams/dwamacs]] ::
   - [[https://github.com/magnars/.emacs.d][magnars/.emacs.d]] ::
   - [[https://github.com/wasamasa/dotemacs][wasamasa/dotemacs]] ::
   - [[https://github.com/noahfrederick/dots/tree/master/emacs.d][noahfrederick/dots]] ::
   - [[https://github.com/kovan/dopemacs][kovan/dopemacs]] :: Emacs configuration that aims to add lots of
        enabled-by-default, non-intrusive useful features while keeping traditional
        Emacs keybindings and workflow.
   - [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][sachac/.emacs.d]] ::
   - [[https://github.com/masaaki1001/.emacs.d][masaaki1001/.emacs.d]] ::
   - [[https://github.com/Fuco1/.emacs.d][Fuco1/.emacs.d]] ::
   - [[http://www.reddit.com/r/emacs/comments/2edbau/what_are_some_great_emacsd_examples/][dot-emacs from reddit]] ::
   - [[http://www.aaronbedra.com/emacs.d/][aaronbedra .emacs.d]] ::
   - [[https://gitlab.com/bodil/emacs-d/blob/master/README.md][bodil .emacs.d]] ::
   - [[https://github.com/jimeh/.emacs.d][jimeh/.emacs.d]] ::
   - [[https://github.com/ubolonton/.emacs.d][ubolonton/.emacs.d]] :: extensive use of variable-width font (for non-code texts)
   - [[http://milkbox.net/note/single-file-master-emacs-configuration/][milkyman's init file]] ::
   - [[https://github.com/tach4n/tommydots/tree/master/emacs][tach4n/tommydots]] :: he have added more syntax hilighting

* Basic
** Meta
*** Tangling Function
   Emacs can only load =.el=-files. We can use =C-c C-v t= to run
   =org-babel-tangle=, which extracts the code blocks from the current file
   into a source-specific file (in this case a =.el=-file).

   To avoid doing this each time a change is made we can add a function to
   the =after-save-hook= ensuring to always tangle and byte-compile the
   =org=-document after changes.

   #+BEGIN_SRC emacs-lisp
     (defun qq/tangle-init ()
       "If the current buffer is 'init.org' the code-blocks are
     tangled, and the tangled file is compiled."
     (when (or
              (equal (buffer-file-name)
                  (expand-file-name (concat user-emacs-directory "init.org")))
              (equal (buffer-file-name)
                     (expand-file-name "~/Documents/qq-emacs/init.org")))
         (org-babel-tangle)
         (byte-compile-file (concat user-emacs-directory "init.el"))))

     (add-hook 'after-save-hook 'qq/tangle-init)
   #+END_SRC

   #+RESULTS:
   : byte-compile-file

   To export to other format, just press =C-c C-e=, which will display further
   option to choose output format like HTML, PDF or LaTeX.

*** Personal Custom group
   Create a custom group to group any custom variable so it will not
   polute built in variable space

   #+BEGIN_SRC emacs-lisp
     (defgroup qq nil
       "Personal Custom configuration."
       :group 'local)
   #+END_SRC

   Add a cache-directory root folder custom variable

   #+BEGIN_SRC emacs-lisp
     (defcustom qq/cache-directory
       (concat user-emacs-directory ".cache/")
       "The storage location for various persistent files."
       :group 'qq)
   #+END_SRC

*** Custom =load-path=
   The variable =load-path= lists all the directories where Emacs should look
   for Elisp files. The first file found is used, therefore the order of the
   directories is relevant.

   =load-path= is documented in the [[info:emacs#Lisp%20Libraries][Emacs Manual]] or [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Libraries.html][Emacs Online Manual]], in
   chapter *Libraries of Lisp Code for Emacs*. Useful tips are also on
   [[http://www.emacswiki.org/emacs/LoadPath][EmacsWiki]].

   #+BEGIN_SRC emacs-lisp
     (let ((default-directory (concat user-emacs-directory "elisp")))
       (unless (file-exists-p default-directory)
         (make-directory default-directory))
       (add-to-list 'load-path default-directory))
   #+END_SRC

Here we create the directory =~/.emacs.d/elisp= if it does not exist, add it to
the =load-path=. Doing that any =.el= or =.elc= files in this directory can be
required from *emacs*.

*** Miscelaneaus Macros & Functions
   Convenient macro to allow processing after checking existing pre-condition

   #+BEGIN_SRC emacs-lisp
     (defmacro after (feature &rest body)
                    "After FEATURE is loaded, evaluate BODY."
                    (declare (indent defun))
                    `(eval-after-load ,feature
                       '(progn ,@body)))
   #+END_SRC

*** Custom Cache
   Set custom file config to store any cutomized settings. Create one when not
   exist.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (concat user-emacs-directory "custom.el"))
     (when (file-exists-p custom-file)
       (load custom-file))
   #+END_SRC

** Packages
   Managing extensions for Emacs is simplified using =package= which
   is built in to Emacs 24 and newer. To load downloaded packages we
   need to initialize =package=.

   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (setq package-enable-at-startup nil)
     (package-initialize)
   #+END_SRC

   Packages can be fetched from different mirrors, melpa is the largest
   archive and is well maintained.

   #+BEGIN_SRC emacs-lisp
     (setq package-archives
           '(("melpa" . "http://melpa.milkbox.net/packages/")
             ("org" . "http://orgmode.org/elpa/")
             ("gnu" . "http://elpa.gnu.org/packages/")
             ("marmalade" . "http://marmalade-repo.org/packages/")
            ))
   #+END_SRC

   Let's write a function to install a package if it is not installed or
   upgrades it if a new version has been released. Here our predicate comes
   in handy.

   #+BEGIN_SRC emacs-lisp
     (defun require-package (package)
       "Install given PACKAGE."
       (unless (package-installed-p package)
         (unless (assoc package package-archive-contents)
           (package-refresh-contents))
         (package-install package)))
   #+END_SRC

   Now we can use the function above to make sure packages are installed and
   up to date. Here are some packages I find useful (some of these
   configurations are also dependent on them). Note, the list of packages below
   are for packages that do not have their own section in [[Modes]]

   #+BEGIN_SRC emacs-lisp
     (defcustom fave-packages
       '(
         ace-jump-mode           ; quick cursor location minor mode
         ;auctex                  ; integrated environment for *TeX*
         auto-compile            ; automatically compile Emacs Lisp libraries
         auto-complete           ; auto completion
         ;auto-complete-auctex    ; auto completion with autex integration
         bind-key                ; a simple way to manage personal keybindings
         color-identifiers-mode  ; gives colors to unique variables passed into functions
         crosshairs              ; Highlight current line & current column
         diminish                ; fight modeline clutter by removing or
                                 ; abbreviating minor mode indicators

         discover-my-major       ; Discover key bindings and their meaning for
                                 ; the current Emacs major mode
         elisp-slime-nav         ; Provide convinient navigation to the definitions
                                 ; of variables, functions, libraries and faces.
         elscreen                ; window session manager

         ;; vim emulator
         evil evil-exchange evil-indent-textobject evil-jumper evil-leader
         evil-matchit evil-nerd-commenter evil-numbers evil-surround evil-visualstar

         flx-ido                 ; Better flex (fuzzy) matching for Ido
         flycheck                ; on-the-fly syntax checking
         ggtags

         hungry-delete
         idle-highlight-mode     ; sets an idle timer that highlights all
                                 ; occurences in the buffer of the word under cursor
         ido-vertical-mode       ; Makes ido-mode display vertically.
         ido-ubiquitous          ; use ido with almost anything that uses completion
         indent-guide            ; a neat mode to show indentation
         latex-preview-pane
         magit
         magit-gerrit
         move-text               ; Move current line or region with M-up or M-down
         multiple-cursors        ; Multiple cursors for Emacs.
         org                     ; Outline-based notes management and organizer
         org-ac                  ; Auto-Complete for Org-Mode
         org-bullets             ; show org bullet as Unicode character
         paredit                 ; minor mode for editing parentheses
         popwin                  ; popup window manager
         pretty-lambdada
         rainbow-delimiters
         rainbow-mode            ; colorized color code in file
         smart-mode-line
         smartparens             ; Minor mode for Emacs that deals with parens pairs
         smart-tabs-mode         ; provide semantic way of using tab in source code
         smex                    ; M-x interface with Ido-style fuzzy matching.

         undo-tree               ; Treat undo history as a tree
         wgrep
         xcscope
         yasnippet               ; snippet tools for emacs
         )
       "Set of package to install for qq."
       :group 'qq)


     (dolist (pkg fave-packages)
       (require-package pkg))
   #+END_SRC

** TODO Require
   Some features are not loaded by default to minimize initialization time,
   so they have to be required (or loaded, if you will). =require=-calls
   tends to lead to the largest bottleneck's in a
   configuration. =idle-reqire= delays the =require=-calls to a time where
   Emacs is in idle. So this is great for stuff you eventually want to load,
   but is not a high priority.

   #+BEGIN_SRC emacs-lisp
     (dolist (feature
              '(
                auto-complete-config  ; a configuration for auto-complete-mode
                ;auto-complete-auctex
                auto-compile          ; auto-compile .el files
                bind-key
                cl
                dired-x               ; provides extra functionality for DiredMode
                hideshow
                hungry-delete
                linum-off             ; provides interface for turning line numbering off.
                magit
                magit-gerrit
                midnight              ; clean up old buffers periodically
                monokai-theme
                ox-latex              ; the latex-exporter (from org)
                ox-md                 ; Markdown exporter (from org)
                popwin
                powerline
                pretty-lambdada       ; show 'lambda' as the greek letter.
                recentf               ; minor mode that builds a list of recently opened files.
                savehist              ; save minibuffer history
                saveplace             ; save cursor location function to visited file
                smartparens-config
                smex                  ; M-x interface Ido-style.
                tex-mode              ; TeX, LaTeX, and SliTeX mode commands
                uniquify              ; provide unique buffer names for duplicates
                whitespace
                windmove              ; built-in library that provide convenient way to
                                      ; switch windows
                xcscope               ; CScope mode commands
                yasnippet
                ))
       (require feature))
   #+END_SRC

** TODO Sane defaults

   These are what /I/ consider to be saner defaults.
   We can set variables to whatever value we'd like using =setq=.

   Emacs 24.4.50 have a bug in which horizontal scroll bar a turn on by default.
   Code below will hide it

   #+begin_src emacs-lisp
     (when (fboundp 'horizontal-scroll-bar-mode)
       (horizontal-scroll-bar-mode -1))
   #+end_src

   #+BEGIN_SRC emacs-lisp
     (setq default-input-method "TeX"                   ; Use TeX when toggeling input method.
           doc-view-continuous t                        ; At page edge goto next/previous.
           global-mark-ring-max 128
           inhibit-splash-screen t
           inhibit-startup-echo-area-message t
           inhibit-startup-message t                    ; No splash screen please.
           initial-scratch-message nil                  ; Clean scratch buffer.
           ring-bell-function 'ignore                   ; Quiet.
           ring-bell-function (lambda () ())
           mark-ring-max 64
           sentence-end-double-space nil
           save-interprogram-paste-before-kill t

           compilation-scroll-output 'first-error       ; scroll to first error

           split-height-threshold 0                     ; auto split vertically
           split-width-threshold nil

           which-func-unknown ""                        ; don't display if there's no
                                                        ; function to display

           savehist-autosave-interval 60                ; interval between save in seconds

           compilation-always-kill t                    ; kill compilation without reconfirmation
           compilation-ask-about-save nil               ; unconditionally save all buffer before
                                                        ; compiling

           bookmark-save-flag 1                         ; save after every change

           ediff-split-window-function
              'split-window-horizontally                ; side-by-side diffs
           ediff-window-setup-function
              'ediff-setup-windows-plain                ; no extra frames

           ;; re-builder, nice interactive tool for building regular expressions
           reb-re-syntax 'string                        ; fix backslash madness

           ;; better scrolling
           scroll-conservatively 9999
           scroll-preserve-screen-position t

           undo-tree-history-directory-alist            ; cache for undo tree
              `(("." . ,(concat qq/cache-directory "undo")))
           undo-tree-visualizer-timestamps t            ; show timestamps
           undo-tree-visualizer-diff t                  ; show diff
           undo-tree-auto-save-history t)               ; Save undo history between sessions.
   #+END_SRC

   Some variables are buffer-local, so changing them using =setq= will only
   change them in a single buffer. Using =setq-default= we change the
   buffer-local variable's default value.

   #+BEGIN_SRC emacs-lisp
   (setq-default fill-column 80                         ; Maximum line width.
                 indent-tabs-mode nil                   ; Use spaces instead of tabs.
                 tab-width 4                            ; default-tab
                 split-width-threshold 100              ; Split verticly by default.
                 save-place t                           ; enable saving cursor last position in a file
                 history-length 1000                    ; savehist history length
                 imenu-auto-rescan t                    ; automatically rescan the buffer contents so
                                                        ; that new jump targets appear in the menu as
                                                        ; they are added
                 )
   #+END_SRC

   We don't really need to garbage collect as frequently as Emacs would like to
   by default, so set the threshold up hight.

   #+begin_src emacs-lisp
     (setq gc-cons-threshold 20000000)
   #+end_src

   Echo commands I haven't finished quicker than the default of 1 second:

   #+begin_src emacs-lisp
     (setq echo-keystrokes 0.1)
   #+end_src

   If you change buffer, or focus, disable the current buffer's mark:

   #+begin_src emacs-lisp
     (transient-mark-mode t)
   #+end_src

   Ignore case when using completion for file names:

   #+begin_src emacs-lisp
     (setq read-file-name-completion-ignore-case t)
   #+end_src

   It's so much easier to move around lines based on how they are displayed,
   rather than the actual line. This helps a tone with long log file lines that
   may be wrapped:

   #+begin_src emacs-lisp
     (setq line-move-visual t)
   #+end_src

   Hide the mouse while typing:

   #+begin_src emacs-lisp
     (setq make-pointer-invisible t)
   #+end_src

   Turn on auto-fill mode in text buffers:

   #+begin_src emacs-lisp
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
   #+end_src

   Disable narrowing as of now, don't find it usefull

   #+BEGIN_SRC emacs-lisp
     (put 'narrow-to-region 'disabled nil)
   #+END_SRC

   Set the internal calculator not to go to scientific form quite so quickly:

   #+begin_src emacs-lisp
     (setq calc-display-sci-low -5)
   #+end_src

   Set fringe width on each side to 12

   #+BEGIN_SRC emacs-lisp
     (fringe-mode 12)
   #+END_SRC

   Start a server if not running, but a different server for GUI versus text-only

   #+begin_src emacs-lisp
     (add-hook 'after-init-hook
               (lambda ()
                 (require 'server)
                 (if (window-system)
                     (if (server-running-p server-name)
                         nil
                       (progn
                         (setq server-name "server-gui")
                         (server-start)))
                   (if (server-running-p server-name)
                       nil
                     (progn
                       (setq server-name "server-nw")
                       (server-start))))))
   #+end_src

   Answering /yes/ and /no/ to each question from Emacs can be tedious, a
   single /y/ or /n/ will suffice.

   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   Better buffer names for duplicates

   #+BEGIN_SRC emacs-lisp
     (setq uniquify-buffer-name-style 'forward
           uniquify-separator "/"
           uniquify-ignore-buffers-re "^\\*" ; leave special buffers alone
           uniquify-after-kill-buffer-p t)
   #+END_SRC

   By default the =narrow-to-region= command is disabled and issues a
   warning, because it might confuse new users. I find it useful sometimes,
   and don't want to be warned.

   #+BEGIN_SRC emacs-lisp
     (put 'narrow-to-region 'disabled nil)
   #+END_SRC

   Call =auto-complete= default configuration, which enables =auto-complete=
   globally.

   #+BEGIN_SRC emacs-lisp
     (eval-after-load 'auto-complete-config `(ac-config-default))
   #+END_SRC

   Automaticly revert =doc-view=-buffers when the file changes on disk.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'doc-view-mode-hook 'auto-revert-mode)
   #+END_SRC

   Add color in compilation buffer

   #+BEGIN_SRC emacs-lisp
     (add-hook 'compilation-filter-hook
               (lambda ()
                 (when (eq major-mode 'compilation-mode)
                   (require 'ansi-color)
                   (let ((inhibit-read-only t))
                     (ansi-color-apply-on-region (point-min) (point-max))))))
   #+END_SRC

   Hook for find-file, this will check for large file set it to read only,
   display trailing whitespace and enable visual-line-mode

   #+BEGIN_SRC emacs-lisp
     (defun qq/find-file-check-large-file ()
       (when (> (buffer-size) (* 1024 1024))
         (setq buffer-read-only t)
         (buffer-disable-undo)
         (fundamental-mode)))


     (add-hook 'find-file-hook (lambda ()
                                 (qq/find-file-check-large-file)
                                 (visual-line-mode)
                                 (unless (eq major-mode 'org-mode)
                                   (setq show-trailing-whitespace t))))
   #+END_SRC

   Leave scratch buffers alone

   #+BEGIN_SRC emacs-lisp
     (defun qq/do-not-kill-scratch-buffer ()
       (if (member (buffer-name (current-buffer)) '("*scratch*" "*Messages*"))
           (progn
             (bury-buffer)
             nil)
         t))
     (add-hook 'kill-buffer-query-functions 'qq/do-not-kill-scratch-buffer)
   #+END_SRC

   The world is so rich with expressivity. Although Unicode may never
   capture all of the worlds symbols, it comes close.

   Set =utf-8= as preferred coding system.

   #+BEGIN_SRC emacs-lisp
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
     (set-language-environment "UTF-8")

     (when (display-graphic-p)
       (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
   #+END_SRC

   Windows/frames behaviour after startup. On Startup make two frame and tile horizontally

   #+BEGIN_SRC emacs-lisp
     ;(toggle-frame-fullscreen) ; emacs 24.4 only
     ;(require-package 'frame-cmds)
     ;(make-frame-command)
     ;(tile-frames-horizontally)
   #+END_SRC

   Enable rainbow delimiter mode for prog major mode

   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
   #+END_SRC

*** Security
   Tells the auth-source library to store netrc file here: [[file:~/.emacs.d/authinfo.gpg::testt][authinfo.gpg]]

   #+begin_src emacs-lisp
     (setq epg-gpg-program "/usr/local/bin/gpg")
     (setq auth-sources '((:source "~/.emacs.d/authinfo.gpg")))
   #+end_src

*** Temporary files
   To avoid file system clutter we put all auto saved files in a single
   directory.

   #+BEGIN_SRC emacs-lisp
     (setq
           save-place-file
              (concat qq/cache-directory "places")      ; cache for save-place
           savehist-file
              (concat qq/cache-directory "savehist")    ; cache for minibuffer history
           savehist-additional-variables
              '(search ring regexp-search-ring)
           recentf-save-file
              (concat qq/cache-directory "recentf")     ; cache folder for recently open files
           recentf-max-saved-items 1000                 ; maximum saved items in recentf
           recentf-max-menu-items 500

           bookmark-default-file
              (concat qq/cache-directory "bookmarks")   ; cache for bookmark
           backup-directory-alist
           `((".*" . ,(concat qq/cache-directory "backups")))
           auto-save-file-name-transforms
           `((".*" ,(concat qq/cache-directory "backups") t))
           auto-save-list-file-prefix
           (concat qq/cache-directory "auto-save-list/saves-"))
     (setq delete-auto-save-files t)
   #+END_SRC

** Visual
*** Theme & Default Face
   Change the color-theme to =monokai= (downloaded using =package=).

   #+BEGIN_SRC emacs-lisp
     (load-theme 'monokai t t)
     (enable-theme 'monokai)
   #+END_SRC

   My preferred font.

   #+BEGIN_SRC emacs-lisp
     ;(when (member "Inconsolata-g" (font-family-list))
     (cond ((eq system-type 'darwin)
            ;; Set font for Mac OS X
            (set-face-attribute 'default nil :font "PragmataPro for Powerline-12"))
           ((eq system-type 'windows-nt)
            ;; Set font for Win32 application
            (set-face-attribute 'default nil :font "PragmataPro for Powerline-11"))
           (t
            ;; Emacs version 22.3 or later.
            (set-face-attribute 'default nil :font "PragmataPro for Powerline-9")))
   #+END_SRC

*** Modeline
   [[https://github.com/milkypostman/powerline][Powerline]] is an extension to customize the mode line. This is modified
   version =powerline-nano-theme=.

   #+BEGIN_SRC emacs-lisp
     (after 'powerline
          (powerline-evil-theme))

     ;;(setq sml/show-client t)
     ;;(setq sml/show-eol t)
     ;;(setq sml/show-frame-identification t)
     ;;(sml/setup)
   #+END_SRC

*** Highlight
   Enable highlighting similar word under the cursor (point)

   #+BEGIN_SRC emacs-lisp
     (setq idle-highlight-idle-time 0.3)
     (add-hook 'prog-mode-hook 'idle-highlight-mode)
   #+END_SRC

   Highlight current line mode

   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode)
   #+END_SRC

*** Fixed/Variable Width Faces
   I love monospaced fonts (I used =PragmataPro= extensively), but they can be
   harder to read when it comes to documentation or simple conversation.

   So, let's make Emacs use different fonts (monospaced and variable) depending
   on the mode we're in (eg: Info and ERC should not be monospaced)

   #+begin_src emacs-lisp
     (add-hook 'text-mode-hook 'variable-pitch-mode)
     (add-hook 'erc-mode-hook 'variable-pitch-mode)
     (add-hook 'Info-mode-hook 'variable-pitch-mode)
   #+end_src

   For =org-mode= we'll be using monospace font for formula, meta-line, tables
   and code blocks, while still using =variable-pitch-mode= in the rest of
   =org-mode= buffers

   #+BEGIN_SRC emacs-lisp
     (defun qq/adjoin-to-list-or-symbol (element list-or-symbol)
       (let ((list (if (not (listp list-or-symbol))
                       (list list-or-symbol)
                     list-or-symbol)))
         (require 'cl-lib)
         (cl-adjoin element list)))

     (eval-after-load "org"
       '(mapc
         (lambda (face)
           (if (memq window-system '(mac ns))
               (set-face-attribute face nil :font "PragmataPro for Powerline-11"
                                   :inherit (qq/adjoin-to-list-or-symbol
                                             'fixed-pitch
                                             (face-attribute face :inherit)))
             (set-face-attribute face nil :font "PragmataPro for Powerline-9"
                                 :inherit (qq/adjoin-to-list-or-symbol
                                           'fixed-pitch
                                           (face-attribute face :inherit))))
           )
         (list 'org-meta-line 'org-code 'org-formula 'org-block
               'org-block-begin-line 'org-block-end-line 'org-verbatim
               'org-table 'org-block-background)))
   #+END_SRC

   Same settings applied for =Info buffers= as well. Code examples will be using
   monospace font

   #+begin_src emacs-lisp
     (defvar qq/rx-info-code (rx bol "     " (* not-newline) eol))
     (add-hook 'Info-mode-hook 'qq/Info-font-lock)
     (defun qq/Info-font-lock ()
       (interactive)
       (require 'org)
       (font-lock-add-keywords
        nil
        `((,qq/rx-info-code
           .
           ;; let's just use org-block
           (quote org-block)
           ))))
   #+end_src

   Display source code blocks or pre blocks in monospace for =markdown-mode=
   buffers

   #+begin_src emacs-lisp
     (eval-after-load "markdown-mode"
       '(mapc
         (lambda (face)
           (set-face-attribute
            face nil
            :inherit
            (qq/adjoin-to-list-or-symbol
             'fixed-pitch
             (face-attribute face :inherit))))
         (list 'markdown-pre-face 'markdown-inline-code-face)))
   #+end_src

*** Pretty Symbol
   Displaying sequences of characters as fancy characters or symbols
   for example, showing -> as →

   May need to revisit the code below since new Emacs 24.4 support built-in
   =prettify-symbols-mode=

   #+BEGIN_SRC emacs-lisp
     (global-prettify-symbols-mode 1)
     ;(global-pretty-lambda-mode 1) ; enabling this will conflict with helm
                               ; such that helm-buffer will have no color
     (setq coq-symbols
           '(("forall" ?∀)
             ("->" ?→)
             ("exists" ?∃)
             ("=>" ?⇒)
             ("False" ?⊥)
             ("True" ?⊤)))

     (add-hook 'org-mode-hook 'turn-on-pretty-lambda-mode)
     (add-hook 'coq-mode-hook
               (lambda ()
                 (setq prettify-symbols-alist coq-symbols)))
     (add-hook 'js2-mode-hook
               (lambda ()
                 (push '("function" . 955) prettify-symbols-alist)
                 (push '("return" . 8592) prettify-symbols-alist)))
   #+END_SRC

** Advice
   An advice can be given to a function to make it behave differently. This
   advice makes =eval-last-sexp= (bound to =C-x C-e=) replace the sexp with
   the value.

   #+BEGIN_SRC emacs-lisp
   (defadvice eval-last-sexp (around replace-sexp (arg) activate)
     "Replace sexp when called with a prefix argument."
     (if arg
         (let ((pos (point)))
           ad-do-it
           (goto-char pos)
           (backward-kill-sexp)
           (forward-sexp))
       ad-do-it))
   #+END_SRC

   When interactively changing the theme (using =M-x load-theme=), the
   current custom theme is not disabled. This often gives weird-looking
   results; we can advice =load-theme= to always disable themes currently
   enabled themes.

   #+BEGIN_SRC emacs-lisp
     (defadvice load-theme
       (before disable-before-load (theme &optional no-confirm no-enable) activate)
       (mapc 'disable-theme custom-enabled-themes))
   #+END_SRC

* TODO Modes
** Default
*** Disabled Modes
   There are some modes that are enabled by default that I don't find
   particularly useful. We create a list of these modes, and disable all of
   these.

   #+BEGIN_SRC emacs-lisp
   (dolist (mode
            '(tool-bar-mode                ; No toolbars, more room for text.
              scroll-bar-mode              ; No scroll bars either.
              menu-bar-mode                ; same for menu bar
              blink-cursor-mode))          ; The blinking cursor gets old.
     (funcall mode 0))
   #+END_SRC

*** Enabled Modes
   Let's apply the same technique for enabling modes that are disabled by
   default.

   #+BEGIN_SRC emacs-lisp
     (dolist (mode
              '(abbrev-mode                ; E.g. sopl -> System.out.println.
                column-number-mode         ; Show column number in mode line.
                delete-selection-mode      ; Replace selected text.
                recentf-mode               ; Recently opened files.
                show-paren-mode            ; Highlight matching parentheses.

                xterm-mouse-mode
                which-function-mode        ; show function where cursor reside
                                           ; in mode line

                global-auto-revert-mode

                ;; Enabled by default in 24.4:
                electric-indent-mode
                transient-mark-mode
                delete-selection-mode

                line-number-mode
                column-number-mode
                display-time-mode
                size-indication-mode

                global-linum-mode          ; turn on line number globally

                global-undo-tree-mode))    ; Undo as a tree.
       (funcall mode 1))

;;     (eval-after-load 'auto-compile
;;       '((auto-compile-on-save-mode)))   ; compile .el files on save.

   #+END_SRC

   =hunglry-delete-mode= makes =backspace= and =C-d= erase /all/ consecutive
   white space in a given direction (instead of just one). Use it everywhere.

   #+BEGIN_SRC emacs-lisp
     (global-hungry-delete-mode)
   #+END_SRC

   Plenty editors (e.g. Vim) have the feature of saving minibuffer
   history to an external file after exit. savehist provide the same
   feature for Emacs. (refer to setq & setq-default for configuration)
   Enabling Recentf mode, the file open includes a submenu containing a list
   of recently opened files.

   #+BEGIN_SRC emacs-lisp
     (savehist-mode +1)
     (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
     (recentf-mode +1)
   #+END_SRC

*** Keybindings
    :PROPERTIES:
    :CUSTOM_ID: default-key-binding
    :END:
   Using The table below as the source for generating [[Basic Bindings]]

   #+TBLNAME: std_keys
      | Combo   | Description                                                                | Command                  |
      |---------+----------------------------------------------------------------------------+--------------------------|
      | C-s     | Do incremental search forward for regular expression                       | 'isearch-forward-regexp  |
      | C-M-s   | Do incremental search forward                                              | 'isearch-forward         |
      | C-r     | Do incremental search backward for regular expression                      | 'isearch-backward-regexp |
      | C-M-r   | Do incremental search backward                                             | 'isearch-backward        |
      | C-c s   | Jump to *scratch* buffer                                                   | 'qq/goto-scratch-buffer  |
      | C-x C-b | Use iBuffer to replace built-in buffer manager                             | 'ibuffer                 |
      | C-x C-k | Kill the current buffer. When called in the minibuffer, will get out of it | 'kill-this-buffer        |
      | C-c e   |                                                                            | 'qq/eval-and-replace     |
      | C-(     | In selected window switch to previous buffer                               | 'previous-buffer         |
      | C-)     | In selected window switch to next buffer                                   | 'next-buffer             |

** Dired+
   I install this primary to force dired to only use one buffer

   #+BEGIN_SRC emacs-lisp
     (require-package 'dired+)
     (toggle-diredp-find-file-reuse-dir 1)
     (setq diredp-hide-details-initially-flag nil)
   #+END_SRC

** Expand Region
   Increase selected region by semantic units. Just keep pressing the key until
   it selects what you want.

   #+BEGIN_SRC emacs-lisp
     (require-package 'expand-region)
     (require 'expand-region)
   #+END_SRC

   [[Expand%20Region%20Bindings][This]] function will generate the binding for the table below

   #+TBLNAME: er-combos
   | Combo | Description                          | Command                 |
   |-------+--------------------------------------+-------------------------|
   | C-=   | Select region and expand on commands | 'er/expand-region       |
   | C-\"  | Select region inside quotes          | 'er/mark-inside-quotes  |
   | M-\"  | Select region outside quotes         | 'er/mark-outside-quotes |

** Evil
   As a long time Vim user, =evil-mode= is essential tools in order for Emacs
   to be my default text editor.

*** Init
   #+BEGIN_SRC emacs-lisp
     (dolist (feature
              '(evil evil-indent-textobject
                evil-jumper evil-nerd-commenter
                evil-visualstar
                ))
       (require feature))
   #+END_SRC

*** Common Settings
   Set the cursor color for different evil mode:

   #+BEGIN_SRC emacs-lisp
     (setq evil-search-module 'evil-search
           evil-magic 'very-magic

           evil-emacs-state-cursor '("red" box)
           evil-normal-state-cursor '("green" box)
           evil-visual-state-cursor '("orange" box)
           evil-insert-state-cursor '("red" bar)
           evil-replace-state-cursor '("red" bar)
           evil-operator-state-cursor '("red" hollow)

           evilnc-hotkey-comment-operator "gc"

           evil-jumper-auto-center t
           evil-jumper-file (concat qq/cache-directory "evil-jumps")
           evil-jumper-auto-save-interval 3600)
   #+END_SRC

*** Command =*= and =#=
   The =evil-mode= command =*= and =#= behave differently than the way I used to
   know in =Vim=. It only search subword not the whole word. I.e, if a cursor is
   in 'mamb' for keyword mamb_ctrl_scaleConversion. Then only 'mamb' will be
   search. I wanted to have both behaviour around, so I made a toggle function:

   #+BEGIN_SRC emacs-lisp
     (defun qq/toggle-evil-search ()
       "Toggle Evil search mode between symbol search or word search"
       (interactive)
       (setq-default evil-symbol-word-search
                     (if (eq evil-symbol-word-search t) nil t)))

     (global-set-key (kbd "<f8>") 'qq/toggle-evil-search)
   #+END_SRC

*** When Evil not allowed
   Do not turn =evil-mode= on certain modes.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'cscope-list-entry-hook 'turn-off-evil-mode)

     (defcustom qq/evil-state-modes
                '(epa-key-list-mode
                  comint-mode
                  )
                "List of modes that should start up in Evil state."
                :type '(repeat (symbol))
                :group 'qq)

     (defun qq/disable-evil-mode ()
       (if (apply 'derived-mode-p qq/evil-state-modes)
           (turn-off-evil-mode)
         (set-cursor-color "red")))
     (add-hook 'after-change-major-mode-hook 'qq/disable-evil-mode)
     (evil-mode 1)
   #+END_SRC

*** Further Settings
   #+BEGIN_SRC emacs-lisp
     (global-evil-leader-mode t)
     (global-evil-surround-mode t)
     (setq evil-want-fine-undo t)
     (evil-exchange-install)

     (defun evilmi-customize-keybinding ()
       (evil-define-key 'normal evil-matchit-mode-map
        "%" 'evilmi-jump-items))
     (global-evil-matchit-mode t)

     (defun qq/send-string-to-terminal (string)
       (unless (display-graphic-p) (send-string-to-terminal string)))

     (defun qq/evil-terminal-cursor-change ()
       (when (string= (getenv "TERM_PROGRAM") "iTerm.app")
        (add-hook 'evil-insert-state-entry-hook (lambda () (qq/send-string-to-terminal "\e]50;CursorShape=1\x7")))
        (add-hook 'evil-insert-state-exit-hook (lambda () (qq/send-string-to-terminal "\e]50;CursorShape=0\x7"))))
       (when (and (getenv "TMUX") (string= (getenv "TERM_PROGRAM") "iTerm.app"))
        (add-hook 'evil-insert-state-entry-hook (lambda () (qq/send-string-to-terminal "\ePtmux;\e\e]50;CursorShape=1\x7\e\\")))
        (add-hook 'evil-insert-state-exit-hook (lambda () (qq/send-string-to-terminal "\ePtmux;\e\e]50;CursorShape=0\x7\e\\")))))

     (add-hook 'after-make-frame-functions (lambda (frame) (qq/evil-terminal-cursor-change)))
     (qq/evil-terminal-cursor-change)

     (defadvice evil-ex-search-next (after advice-for-evil-ex-search-next activate)
       (recenter))

     (defadvice evil-ex-search-previous (after advice-for-evil-ex-search-previous activate)
       (recenter))
   #+END_SRC

** Magit

   #+BEGIN_SRC emacs-lisp
     (setq magit-diff-options '("--histogram"))
     (setq magit-stage-all-confirm nil)
     (defadvice magit-status (around qq/magit-fullscreen activate)
         (window-configuration-to-register :magit-fullscreen)
         ad-do-it
         (delete-other-windows))
     (defun qq/magit-quit-session ()
       (interactive)
       (kill-buffer)
       (jump-to-register :magit-fullscreen))
     (after 'evil
       (after 'git-commit-mode
         (add-hook 'git-commit-mode-hook 'evil-emacs-state))
       (after 'magit-blame
         (defadvice magit-blame-file-on (after advice-for-magit-blame-file-on activate)
           (evil-emacs-state))
         (defadvice magit-blame-file-off (after advice-for-magit-blame-file-off activate)
           (evil-exit-emacs-state))))
     (require-package 'diff-hl)
     (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
     (unless (display-graphic-p)
       (diff-hl-margin-mode))
   #+END_SRC

   Setup for =magit-gerrit=

   #+BEGIN_SRC emacs-lisp
     (after 'magit
         (require 'magit-gerrit))
     (setq-default magit-gerrit-ssh-creds "fikri.pribadi@tpv-tech.com")
   #+END_SRC

** Git-Gutter+
   Check if we're running in GUI mode before enabling =Git-Gutter+=

   #+BEGIN_SRC emacs-lisp
     (if (display-graphic-p)
         (progn
           (require-package 'git-gutter-fringe+)
           (require 'git-gutter-fringe+))
       (require-package 'git-gutter+))
     (global-git-gutter+-mode)
   #+END_SRC

   Git-Gutter+ is not updated properly when =git= push happen through =magit=.
   The following code fix this issue.

   #+BEGIN_SRC emacs-lisp
     (defun qq/refresh-visible-git-gutter-buffers ()
       "Refresh git-gutter-mode on all visible git-gutter-mode buffers."
       (dolist (buff (buffer-list))
         (with-current-buffer buff
           (when (and git-gutter+-mode (get-buffer-window buff))
             (git-gutter+-mode t)))))
     (add-hook 'magit-revert-buffer-hook 'qq/refresh-visible-git-gutter-buffers)
   #+END_SRC

** HideShow
   Kind of like Vim's folding, but manually done right now.

   #+begin_src emacs-lisp
     (defvar hs-special-modes-alist
       (mapcar 'purecopy
               '((c-mode "{" "}" "/[*/]" nil nil)
                 (c++-mode "{" "}" "/[*/]" nil nil)
                 (bibtex-mode ("@\\S(*\\(\\s(\\)" 1))
                 (java-mode "{" "}" "/[*/]" nil nil)
                 (js-mode "{" "}" "/[*/]" nil)
                 (javascript-mode  "{" "}" "/[*/]" nil))))

     (defun qq/fold-overlay (ov)
       (when (eq 'code (overlay-get ov 'hs))
         (let ((col (save-excursion
                      (move-end-of-line 0)
                      (current-column)))
               (count (count-lines (overlay-start ov) (overlay-end ov))))
           (overlay-put ov 'display
                        (format " %s [ %d lines ] ----"
                                (make-string (- (window-width) col 32) (string-to-char "-"))
                                count)))))

     (setq hs-set-up-overlay 'qq/fold-overlay)

     (add-hook 'prog-mode-hook 'hs-minor-mode)
   #+end_src

** Yasnippet

   #+BEGIN_SRC emacs-lisp
     (let* ((yas-install-dir (car (file-expand-wildcards (concat package-user-dir "/yasnippet-*"))))
            (dir (concat yas-install-dir "/snippets/js-mode")))
       (if (file-exists-p dir)
           (delete-directory dir t)))

     ;(setq yas-fallback-behavior 'return-nil)
     (setq yas-also-auto-indent-first-line t)
     (setq yas-prompt-functions '(yas/ido-prompt yas/completing-prompt))

     (add-to-list 'yas-snippet-dirs (concat user-emacs-directory "snippets"))

     (defun qq/yas/helm-prompt (prompt choices &optional display-fn)
       "Use helm to select a snippet. Put this into `yas/prompt-functions.'"
       (interactive)
       (setq display-fn (or display-fn 'identity))
       (if (require 'helm-config)
           (let (tmpsource cands result rmap)
             (setq cands (mapcar (lambda (x) (funcall display-fn x)) choices))
             (setq rmap (mapcar (lambda (x) (cons (funcall display-fn x) x)) choices))
             (setq tmpsource
                   (list
                    (cons 'name prompt)
                    (cons 'candidates cands)
                    '(action . (("Expand" . (lambda (selection) selection))))
                    ))
             (setq result (helm-other-buffer '(tmpsource) "*helm-select-yasnippet"))
             (if (null result)
                 (signal 'quit "user quit!")
               (cdr (assoc result rmap))))
         nil))
     (setq yas-prompt-functions '(qq/yas/helm-prompt yas-ido-prompt yas-completing-prompt))

     (yas-global-mode 1)

     (yas-reload-all)
   #+END_SRC

** CScope
   Configure CScope.

   #+BEGIN_SRC emacs-lisp
     (cscope-setup)
   #+END_SRC

   =cscope= default key binding took over =<C-c s>= as prefix. While I used this
   for =qq/goto-scratch-buffer= key binding. Table below will be used to
   generate [[Cscope Bindings]]

   #+TBLNAME: cscope_keys
      | Combo  | Description                                                  | Command                                       |
      |--------+--------------------------------------------------------------+-----------------------------------------------|
      | <6>    | <60>                                                         | <45>                                          |
      | C-\\ s | Locate a symbol in source code                               | 'cscope-find-this-symbol                      |
      | C-\\ d | Find a symbol's global definition                            | 'cscope-find-global-definition                |
      | C-\\ G | Find a symbol's global definition                            | 'cscope-find-global-definition                |
      | C-\\ g | Same as above, but no prompting                              | 'cscope-find-global-definition-no-prompting   |
      | C-\\ = | Locate assignments to a symbol in the source code            | 'cscope-find-assignments-to-this-symbol       |
      | C-\\ c | Display functions calling a function                         | 'cscope-find-functions-calling-this-function  |
      | C-\\ C | Display functions called by a function                       | 'cscope-find-called-functions                 |
      | C-\\ t | Locate where a text string occurs                            | 'cscope-find-this-text-string                 |
      | C-\\ e | Run egrep over the cscope database                           | 'cscope-find-egrep-pattern                    |
      | C-\\ f | Locate a file                                                | 'cscope-find-this-file                        |
      | C-\\ i | Locate all files #including a file                           | 'cscope-find-files-including-file             |
      | C-\\ b | Display the *cscope* buffer                                  | 'cscope-display-buffer                        |
      | C-\\ B | Toggle cscope-display-buffer                                 | 'cscope-display-buffer-toggle                 |
      | C-\\ n | Like (cscope-history-forward-line), but only for current result only. This exists for blind navigation. If the user isn't looking at the *cscope* buffer, they shouldn't be jumping between results | 'cscope-history-forward-line-current-result   |
      | C-\\ N | Like (cscope-history-forward-file), but only for current result only | 'cscope-history-forward-file-current-result   |
      | C-\\ p |                                                              | 'cscope-history-backward-line-current-result  |
      | C-\\ P |                                                              | 'cscope-history-backward-file-current-result  |
      | C-\\ u | Pop back to where cscope was last invoked                    | 'cscope-pop-mark                              |
      | C-\\ a | Set the cscope-initial-directory variable                    | 'cscope-set-initial-directory                 |
      | C-\\ A | Unset the cscope-initial-directory variable                  | 'cscope-unset-initial-directory               |
      | C-\\ L | Create a list of files to index                              | 'cscope-create-list-of-files-to-index         |
      | C-\\ I | Index files in a directory                                   | 'cscope-index-files                           |
      | C-\\ E | Search for and edit the list of files to index               | 'cscope-edit-list-of-files-to-index           |
      | C-\\ W | Display the name of the directory containing the cscope db   | 'cscope-tell-user-about-directory             |
      | C-\\ D | Run dired upon the cscope database directory                 | 'cscope-dired-directory                       |
      | C-c s  | Override built in cscope binding                             | 'qq/goto-scratch-buffer                       |

** TODO Ido
   Interactive do (or =ido-mode=) changes the way you switch buffers and
   open files/directories. Instead of writing complete file paths and buffer
   names you can write a part of it and select one from a list of
   possibilities. Using =ido-vertical-mode= changes the way possibilities
   are displayed, and =flx-ido-mode= enables fuzzy matching.

   #+BEGIN_SRC emacs-lisp
   (dolist (mode
            '(ido-mode                   ; Interactivly do.
              ido-everywhere             ; Use Ido for all buffer/file reading.
              ido-vertical-mode          ; Makes ido-mode display vertically.
              ido-ubiquitous-mode        ; Use ido with almost anything that uses completion
              flx-ido-mode))             ; Toggle flx ido mode.
     (funcall mode 1))
   #+END_SRC

   We can set the order of file selections in =ido=. I prioritize source
   files along with =org=- and =tex=-files.

   #+BEGIN_SRC emacs-lisp
     (defmacro defn (name &rest body)
       (declare (indent 1))
       `(defun ,name (&optional arg)
          ,(if (stringp (car body)) (car body))
          (interactive "p")
          ,@(if (stringp (car body)) (cdr `,body) body)))

     (defn ido-go-home
       (cond
        ((looking-back "~/") (insert "code/"))
        ((looking-back "/") (insert "~/"))
        (:else (call-interactively 'self-insert-command))))

     (setq ido-file-extensions-order
           '(".c" ".h" ".cpp" ".el" ".org" ".tex" ".scm" ".lisp" ".java"))

     (setq ido-cannot-complete-command 'exit-minibuffer)
     (setq ido-auto-merge-delay-time 10)
     (setq ido-enable-flex-matching t)
     (setq ido-enable-dot-prefix t)
     (setq ido-max-prospects 10)
     (setq ido-create-new-buffer 'always)
     (define-key ido-file-completion-map (kbd "~") 'ido-go-home)

     (setq ido-enable-prefix nil)
     (setq ido-use-virtual-buffers t)
     (setq ido-enable-flex-matching t)
     (setq ido-create-new-buffer 'always)
     (setq ido-use-filename-at-point 'guess)
     (setq ido-save-directory-list-file (concat qq/cache-directory "ido.last"))
   #+END_SRC

   Sometimes when using =ido-switch-buffer= the =*Messages*= buffer get in
   the way, so we set it to be ignored (it can be accessed using =C-h e=, so
   there is really no need for it in the buffer list).

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'ido-ignore-buffers "*Messages*")
   #+END_SRC

** Smex
   To make =M-x= behave more like =ido-mode= we can use the =smex=
   package. It needs to be initialized, and we can replace the binding to
   the standard =execute-extended-command= with =smex=.

   #+BEGIN_SRC emacs-lisp
     (smex-initialize)
     (setq smex-save-file (concat qq/cache-directory "smex-items")
           smex-history-length 80)
     (global-set-key (kbd "M-x") 'smex)
   #+END_SRC

** Writegood
   This is a minor mode to aid in finding common writing problems. Based on
   *Matthew Matt*'s shell scripts: [[http://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/][3 Shell scripts to improved your writing]]

   #+BEGIN_SRC emacs-lisp
     (require-package 'writegood-mode)
     (require 'writegood-mode)
   #+END_SRC

** Whitespace
   Ban whitespace at end of lines, globally. Ban tabs too, everywhere

   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'whitespace-cleanup)
   #+END_SRC

   =whitespace-cleanup= make use of settings in whitespace-style, refer to this
   [[http://emacsredux.com/blog/2013/05/16/whitespace-cleanup/][blog]] for details.

   #+BEGIN_SRC emacs-lisp
     (setq whitespace-style (quote (spaces tabs newline space-mark tab-mark newline-mark trailing)))
     (setq whitespace-display-mappings
            ;; all numbers are Unicode codepoint in decimal. try (insert-char 182 ) to see it
           '(
             (space-mark 32 [183] [46]) ; 32 SPACE, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
             (newline-mark 10 [182 10]) ; 10 LINE FEED
             (tab-mark 9 [9655 9] [92 9]) ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」
             ))

   #+END_SRC

   Except for =makefile-mode=

   #+BEGIN_SRC emacs-lisp
     (add-hook 'makefile-mode-hook 'indent-tabs-mode)
   #+END_SRC

** Auto-Complete
   Key-binding table for =auto-complete=. Refer [[Auto-Complete Bindings][here]] to see the code generation.

   #+TBLNAME: ac-key-combo
      | Combo | Description                          | Command      |
      |-------+--------------------------------------+--------------|
      | C-n   | Select next on the popup window list | 'ac-next     |
      | C-p   | Select prev on the popup window list | 'ac-previous |

** TODO Org
*** Enable Org Mode
   #+BEGIN_SRC emacs-lisp
     (require 'org-ac)
     (require 'org-bullets)
   #+END_SRC


   When editing org-files with source-blocks, we want the source blocks to
   be themed as they would in their native mode.

   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
     (setq org-src-tab-acts-natively t)
   #+END_SRC

   Other settings for org.

   #+BEGIN_SRC emacs-lisp
     (after 'org
       (unless (file-exists-p org-directory)
         (make-directory org-directory))

       (setq qq/inbox-org-file (concat org-directory "/inbox.org")

             org-startup-indented t
             org-mobile-directory (concat org-directory "/MobileOrg")
             org-mobile-inbox-for-pull (concat org-directory "/from-mobile.org")

             org-default-notes-file qq/inbox-org-file
             org-log-done t
             org-completion-use-ido t
             org-return-follows-link t

             org-indent-indentation-per-level 3

             org-agenda-files `(,org-directory)
             org-capture-templates
             '(("t" "Todo" entry (file+headline qq/inbox-org-file "TODO")
                "* TODO %?\n%U\n%a\n")
               ("n" "Note" entry (file+headline qq/inbox-org-file "NOTES")
                "* %? :NOTE:\n%U\n%a\n")
               ("m" "Meeting" entry (file qq/inbox-org-file)
                "* MEETING %? :MEETING:\n%U")
               ("j" "Journal" entry (file+datetree (concat org-directory "/journal.org"))
                "* %?\n%U\n"))

             ;; allow changing between todo stats directly by hotkey
             org-use-fast-todo-selection t
             org-treat-S-cursor-todo-selection-as-state-change nil
             org-todo-keywords
             '((sequence "TODO(t)" "NEXT(n@)" "|" "DONE(d)")
               (sequence "WAITING(w@/!)" "|" "CANCELLED(c@/!)"))

             org-todo-state-tags-triggers
             ' (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("TODO" ("WAITING") ("CANCELLED"))
                ("NEXT" ("WAITING") ("CANCELLED"))
                ("DONE" ("WAITING") ("CANCELLED")))

             org-refile-targets '((nil :maxlevel . 9)
                                  (org-agenda-files :maxlevel . 9))
             )

       (unless (file-exists-p org-mobile-directory)
         (make-directory org-mobile-directory))

       (org-ac/config-default)
       (after 'evil
         (add-hook 'org-capture-mode-hook 'evil-insert-state))

       (when (boundp 'org-plantuml-jar-path)
         (org-babel-do-load-languages
          'org-babel-load-languages
          '((plantuml . t))))

       (add-hook 'org-mode-hook (lambda ()
                                  (when (or (executable-find "aspell")
                                            (executable-find "ispell")
                                            (executable-find "hunspell"))
                                    (flyspell-mode))
                                  )))
   #+END_SRC

   Fix =yasnippet= when =org-mode= is on.

   #+BEGIN_SRC emacs-lisp
     (defun yas-org-very-safe-expand ()
       (let ((yas-fallback-behavior 'return-nil)) (yas-expand)))
   #+END_SRC

   Then, tell Org mode what to do with the new function:

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
               (lambda ()
                 (make-variable-buffer-local 'yas/trigger-key)
                 (setq yas/trigger-key [tab])
                 (writegood-mode)
                 (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)
                 (define-key yas-keymap [tab] 'yas-next-field)))

   #+END_SRC

   Nice bulleted lists.

   #+begin_src emacs-lisp
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   #+end_src

*** Just Evaluate It
   I'm normally fine with having my code automatically evaluated.

   #+BEGIN_SRC emacs-lisp
     (setq org-confirm-babel-evaluate nil)
   #+END_SRC

*** Bindings
    :PROPERTIES:
    :CUSTOM_ID: orgmode-key-binding
    :END:
   The table below will be generated as key-bindings [[Org%20Mode%20Bindings][here]].

   #+TBLNAME: org_keys
      | Combo | Description                                                  | Command         |
      |-------+--------------------------------------------------------------+-----------------|
      | C-c c | Capture and store note quickly                               | 'org-capture    |
      | C-c a | Display Org agenda                                           | 'org-agenda     |
      | C-c l | Correctly insert links into org files                        | 'org-store-link |
      | C-c b | iswitchb-like interface to switch to and between Org buffers | 'org-iswitchb   |

** TODO ERC
   Emacs IRC is a powerful, modular, and extensible IRC client.

   #+BEGIN_SRC emacs-lisp
     (dolist (feature
              '(erc erc-track erc-match erc-ring
                erc-fill erc-netsplit erc-log
                erc-notify erc-spelling erc-autoaway
                ))
       (require feature))
   #+END_SRC

   Basic settings.

   #+begin_src emacs-lisp
     (setq erc-part-reason-various-alist '(("^$" "Leaving"))
           erc-quit-reason-various-alist '(("^$" "Leaving"))
           erc-quit-reason 'erc-part-reason-various
           erc-part-reason 'erc-quit-reason-various
           erc-log-matches-types-alist
             '((keyword . "ERC Keywords")
                (current-nick . "ERC Messages Addressed To You"))

           erc-log-channels-directory
             (concat qq/cache-directory "erc/logs")    ; cache for erc logs

           erc-log-matches-flag t)
     (add-hook 'erc-mode-hook (lambda () (auto-fill-mode 0)))
     (add-hook 'erc-insert-post-hook 'erc-save-buffer-in-logs)
   #+end_src

   Only track my nick(s)

   #+begin_src emacs-lisp
     (defadvice erc-track-find-face
         (around erc-track-find-face-promote-query activate)
       (if (erc-query-buffer-p)
           (setq ad-return-value (intern "erc-current-nick-face"))
         ad-do-it))
   #+end_src

   Track channel activity in =mode-line=

   #+begin_src emacs-lisp
     (erc-track-mode t)
     (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                     "324" "329" "332" "333" "353" "477"))
     (setq erc-hide-list '("JOIN" "PART" "QUIT" "NICK")) ;; stuff to hide!
   #+end_src

   Highlight some keywords

   #+begin_src emacs-lisp
     (setq erc-keywords '("keywords" "to" "highlight" "username"))
   #+end_src

   Enable input history

   #+begin_src emacs-lisp
     (erc-ring-mode t)
   #+end_src

   Wrap long lines

   #+begin_src emacs-lisp
     (erc-fill-mode t)
   #+end_src

   Detect netsplits

   #+begin_src emacs-lisp
     (erc-netsplit-mode t)
   #+end_src

   Spellcheck, requires local aspell

   #+begin_src emacs-lisp
     (erc-spelling-mode t)
   #+end_src

   Some other settings

   #+begin_src emacs-lisp
     ;; Join the a couple of interesting channels whenever connecting to Freenode.
     (setq erc-autojoin-channels-alist '(("freenode.net"
                                          "#emacs" "#clojure" "#lisp"
                                          "#scala" "#fedora-java")))

     ;; Interpret mIRC-style color commands in IRC chats
     (setq erc-interpret-mirc-color t)

     ;; The following are commented out by default, but users of other
     ;; non-Emacs IRC clients might find them useful.
     ;; Kill buffers for channels after /part
     (setq erc-kill-buffer-on-part t)
     ;; Kill buffers for private queries after quitting the server
     (setq erc-kill-queries-on-quit t)
     ;; Kill buffers for server messages after quitting the server
     (setq erc-kill-server-buffer-on-quit t)

     ;; open query buffers in the current window
     (setq erc-query-display 'buffer)

     ;; exclude boring stuff from tracking
     (erc-track-mode t)
     (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                     "324" "329" "332" "333" "353" "477"))

     (if (not (file-exists-p erc-log-channels-directory))
         (mkdir erc-log-channels-directory t))

     (setq erc-save-buffer-on-part t)
     (defadvice save-buffers-kill-emacs (before save-logs (arg) activate)
       (save-some-buffers t (lambda () (when (eq major-mode 'erc-mode) t))))

     ;; truncate long irc buffers
     (erc-truncate-mode +1)

     ;; share my real name
     (setq erc-user-full-name "Bozhidar Batsov")

     ;; enable spell checking
     (erc-spelling-mode 1)
     ;; set different dictionaries by different servers/channels
     ;;(setq erc-spelling-dictionaries '(("#emacs" "american")))

     ;; TODO - replace this with use of notify.el
     ;; Notify my when someone mentions my nick.
     (defun call-libnotify (matched-type nick msg)
       (let* ((cmsg  (split-string (clean-message msg)))
              (nick   (first (split-string nick "!")))
              (msg    (mapconcat 'identity (rest cmsg) " ")))
         (shell-command-to-string
          (format "notify-send -u critical '%s says:' '%s'" nick msg))))

     (add-hook 'erc-text-matched-hook 'call-libnotify)

     (defvar erc-notify-nick-alist nil
       "Alist of nicks and the last time they tried to trigger a
     notification")

     (defvar erc-notify-timeout 10
       "Number of seconds that must elapse between notifications from
     the same person.")

     (defun erc-notify-allowed-p (nick &optional delay)
       "Return non-nil if a notification should be made for NICK.
     If DELAY is specified, it will be the minimum time in seconds
     that can occur between two notifications.  The default is
     `erc-notify-timeout'."
       (unless delay (setq delay erc-notify-timeout))
       (let ((cur-time (time-to-seconds (current-time)))
             (cur-assoc (assoc nick erc-notify-nick-alist))
             (last-time nil))
         (if cur-assoc
             (progn
               (setq last-time (cdr cur-assoc))
               (setcdr cur-assoc cur-time)
               (> (abs (- cur-time last-time)) delay))
           (push (cons nick cur-time) erc-notify-nick-alist)
           t)))

     ;; private message notification
     (defun erc-notify-on-private-msg (proc parsed)
       (let ((nick (car (erc-parse-user (erc-response.sender parsed))))
             (target (car (erc-response.command-args parsed)))
             (msg (erc-response.contents parsed)))
         (when (and (erc-current-nick-p target)
                    (not (erc-is-message-ctcp-and-not-action-p msg))
                    (erc-notify-allowed-p nick))
           (shell-command-to-string
            (format "notify-send -u critical '%s says:' '%s'" nick msg))
           nil)))

     (add-hook 'erc-server-PRIVMSG-functions 'erc-notify-on-private-msg)

     ;; autoaway setup
     (setq erc-auto-discard-away t)
     (setq erc-autoaway-idle-seconds 600)
     (setq erc-autoaway-use-emacs-idle t)

     ;; auto identify
     (when (file-exists-p (expand-file-name "~/.ercpass"))
       (load "~/.ercpass")
       (require 'erc-services)
       (erc-services-mode 1)
       (setq erc-prompt-for-nickserv-password nil)
       (setq erc-nickserv-passwords
             `((freenode (("bozhidar" . ,bozhidar-pass)))))
     )

     ;; utf-8 always and forever
     (setq erc-server-coding-system '(utf-8 . utf-8))

     (defun start-irc ()
       "Connect to IRC."
       (interactive)
       (when (y-or-n-p "Do you want to start IRC? ")
         (erc :server "irc.freenode.net" :port 6667 :nick "bozhidar")))

     (defun filter-server-buffers ()
       (delq nil
             (mapcar
              (lambda (x) (and (erc-server-buffer-p x) x))
              (buffer-list))))

     (defun stop-irc ()
       "Disconnects from all irc servers"
       (interactive)
       (dolist (buffer (filter-server-buffers))
         (message "Server buffer: %s" (buffer-name buffer))
         (with-current-buffer buffer
           (erc-quit-server "Asta la vista"))))






          ;; Truncate buffers so they don't hog core
          (setq erc-max-buffer-size 40000) ;; chars to keep in buffer
          (defvar erc-insert-post-hook)
          (add-hook 'erc-insert-post-hook 'erc-truncate-buffer)
          (setq erc-truncate-buffer-on-save t)

          ;; kill buffers when leaving
          (setq erc-kill-buffer-on-part t)

          ;; keep input at bottom
          (erc-scrolltobottom-mode t)
   #+end_src

** Grep et al
   #+BEGIN_SRC emacs-lisp
     (add-hook 'c-mode-common-hook
               (lambda ()
                 (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                   (ggtags-mode 1))))

     (when (executable-find "pt")
       (require-package 'pt)
       (require-package 'wgrep-pt))


     (when (executable-find "ag")
       (require-package 'ag)
       (setq ag-highlight-search t)
       (setq ag-reuse-window t)
       (add-hook 'ag-mode-hook (lambda () (toggle-truncate-lines t)))
       (require-package 'wgrep-ag))


     (when (executable-find "ack")
       (require-package 'ack-and-a-half)
       (require-package 'wgrep-ack))

   #+END_SRC

** TODO Helm
   =Helm= is incremental completion and selection narrowing framework for Emacs.
   It will help steer in the right direction when looking for stuff in Emacs
   (like buffers, files etc)
   Set helm command prefix key, otherwise helm use default prefix "C-x c",
   which is inconvenient because you can accidentially pressed "C-x C-c". Must
   set before helm-config,

*** Init

   #+BEGIN_SRC emacs-lisp
     (setq helm-command-prefix-key "C-c h")
     (require-package 'helm)
     (require-package 'helm-cmd-t)
     (require-package 'helm-orgcard)
     (require-package 'helm-pydoc)
     (require-package 'helm-themes)
     (require-package 'helm-swoop)

     (require 'helm)
     (require 'helm-config)
     (require 'helm-eshell)
     (require 'helm-files)
     (require 'helm-grep)
   #+END_SRC

*** Custom function

   #+BEGIN_SRC emacs-lisp
     (defun helm-smex-items ()
       (smex-rebuild-cache)
       (smex-convert-for-ido smex-cache))

     (defun helm-smex-execute-command (command)
       (command-execute command 'record)
       (smex-rank command))

     (setq helm-smex-source
       '((name . "M-x")
         (candidates . helm-smex-items)
         (coerce . intern)
         (action ("smex" . (helm-smex-execute-command)))))

     (defun helm-smex ()
       (interactive)
       (helm :sources 'helm-smex-source :buffer "*helm-smex*"))

     (global-set-key (kbd "C-c M-x") 'execute-extended-command)
   #+END_SRC

*** Settings

   #+BEGIN_SRC emacs-lisp
     (helm-mode t)
     (setq helm-ff-ido-style-backspace 'always
           helm-ff-auto-update-initial-value t
           helm-ff-auto-update-flag t
           helm-ff-newfile-prompt-p nil
           helm-ff-skip-boring-files t)
     (setq helm-adaptive-history-file (concat qq/cache-directory "helm-adaptive")
           helm-adaptive-history-length 100)
     (helm-adaptative-mode t)
     (setq helm-mp-highlight-delay 0.3)

     (setq helm-cmd-t-default-repo (concat qq/cache-directory "dotfiles"))

     (define-key helm-read-file-map (kbd "<backspace>")
       'helm-find-files-up-one-level)
     (define-key helm-find-files-map (kbd "<backspace>")
       'helm-find-files-up-one-level)

     ;; helm ack-grep hacks
     (setq helm-ack-grep-executable "ag")
     (setq helm-grep-default-command
           (concat helm-ack-grep-executable " --nogroup --nocolor --nopager --smart-case -z %p %f")
           helm-grep-default-recurse-command
           (concat helm-ack-grep-executable " --nogroup --nocolor --nopager --smart-case -z %p %f"))

     ;; helm completing read functions
     (add-to-list 'helm-completing-read-handlers-alist
                  '(find-library . helm-completing-read-with-cands-in-buffer))

     (global-set-key (kbd "C-x b") 'helm-buffers-list)
     (global-set-key (kbd "<f10>") 'helm-resume)
   #+END_SRC


   Preferred initial settings for Helm

   #+BEGIN_SRC emacs-lisp
     (setq
      helm-google-suggest-use-curl-p t
      helm-bookmark-show-location t                     ; display bookmark location
      helm-scroll-amount 4                              ; scroll 4 lines other window using M-<next>/M-<prior>
      helm-quick-update t                               ; do not display invisible candidates
      helm-idle-delay 0.01                              ; be idle for this many seconds, before updating in delayed sources.
      helm-input-idle-delay 0.01                        ; be idle for this many seconds, before updating candidate buffer
      helm-ff-search-library-in-sexp t                  ; search for library in `require' and `declare-function' sexp.

      helm-split-window-default-side 'other             ; open helm buffer in another window
      helm-split-window-in-side-p t                     ; open helm buffer inside current window, not occupy whole other window
      helm-buffers-favorite-modes (append helm-buffers-favorite-modes
                                          '(picture-mode artist-mode))
      helm-candidate-number-limit 200                   ; limit the number of displayed canidates
      helm-M-x-requires-pattern 0                       ; show all candidates when set to 0
      helm-boring-file-regexp-list
      '("\\.git$" "\\.hg$" "\\.svn$" "\\.CVS$" "\\._darcs$" "\\.la$" "\\.o$" "\\.i$") ; do not show these files in helm buffer
      helm-ff-file-name-history-use-recentf t
      helm-move-to-line-cycle-in-source t               ; move to end or beginning of source
                                                             ; when reaching top or bottom of source.
      ido-use-virtual-buffers t                         ; Needed in helm-buffers-list
      helm-buffers-fuzzy-matching t                     ; fuzzy matching buffer names when non--nil
                                                        ; useful in helm-mini that lists buffers
      )
   #+END_SRC

     Save current position to mark ring when jumping to a different place and
     enable helm-mode.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)
     (helm-mode 1)
   #+END_SRC

*** Keybindings
    :PROPERTIES:
    :CUSTOM_ID: helm-key-binding
    :END:

   The code generated from this table is [[Helm%20Bindings][here]].
   #+TBLNAME: helm_combo
      | Combo    | Mode               | Description                        | Command                                    |
      |----------+--------------------+------------------------------------+--------------------------------------------|
      | <tab>    | helm-map           | Rebind tab to do persistent action | 'helm-execute-persistent-action            |
      | C-i      | helm-map           | Make TAB works in terminal         | 'helm-execute-persistent-action            |
      | C-z      | helm-map           | List actions using C-z             | 'helm-select-action                        |
      | <return> | helm-grep-mode-map |                                    | 'helm-grep-mode-jump-other-window          |
      | n        | helm-grep-mode-map |                                    | 'helm-grep-mode-jump-other-window-forward  |
      | p        | helm-grep-mode-map |                                    | 'helm-grep-mode-jump-other-window-backward |

** TODO Pop-win
   Popwin handles little popup windows at the bottom of the screen, which is
   very helpful for documentation buffers and so on.

   #+begin_src emacs-lisp
     (defvar popwin:special-display-config-backup popwin:special-display-config)
     (setq display-buffer-function 'popwin:display-buffer)

     (push "COMMIT_EDITMSG" popwin:special-display-config)

     ;; basic
     (push '("*Help*" :stick t :noselect t) popwin:special-display-config)
     (push '("*helm world time*" :stick t :noselect t :height 20) popwin:special-display-config)
     (push '("*helm*" :height 20) popwin:special-display-config)
     (push '("*helm mini*" :height 20) popwin:special-display-config)
     (push '("*helm buffers*" :height 20) popwin:special-display-config)
     (push '("*helm M-x*" :height 20) popwin:special-display-config)

     ;;vc-git
     (push '("*vc-git .+\*$" :regexp t :height 20) popwin:special-display-config)

     ;; magit
     (push '("*magit-process*" :stick t) popwin:special-display-config)

     ;; latex output
     (push '("*\\S-+\\s-output\\*$" :regexp t :height 10) popwin:special-display-config)

     ;; quickrun
     (push '("*quickrun*" :stick t) popwin:special-display-config)

     ;; dictionaly
     (push '("*dict*" :stick t) popwin:special-display-config)
     (push '("*sdic*" :stick t) popwin:special-display-config)

     ;; popwin for slime
     (push '(slime-repl-mode :stick t) popwin:special-display-config)

     ;; man
     (push '(Man-mode :stick t :height 20) popwin:special-display-config)

     ;; Elisp
     (push '("*ielm*" :stick t) popwin:special-display-config)
     (push '("*eshell pop*" :stick t) popwin:special-display-config)

     ;; pry
     (push '(inf-ruby-mode :stick t :height 20) popwin:special-display-config)

     ;; python
     (push '("*Python*"   :stick t) popwin:special-display-config)
     (push '("*Python Help*" :stick t :height 20) popwin:special-display-config)
     (push '("*jedi:doc*" :stick t :noselect t) popwin:special-display-config)

     ;; Haskell
     (push '("*haskell*" :stick t) popwin:special-display-config)
     (push '("*GHC Info*") popwin:special-display-config)

     ;; sgit
     (push '("*sgit*" :position right :width 0.5 :stick t)
           popwin:special-display-config)

     ;; git-gutter
     (push '("*git-gutter:diff*" :width 0.5 :stick t)
           popwin:special-display-config)

     ;; direx
     (push '(direx:direx-mode :position left :width 40 :dedicated t)
           popwin:special-display-config)

     (push '("*Occur*" :stick t) popwin:special-display-config)

     ;; prodigy
     (push '("*prodigy*" :stick t) popwin:special-display-config)

     ;; malabar-mode
     (push '("*Malabar Compilation*" :stick t :height 30)
           popwin:special-display-config)

     ;; org-mode
     (push '("*Org tags*" :stick t :height 30)
           popwin:special-display-config)

     ;; Completions
     (push '("*Completions*" :stick t :noselect t) popwin:special-display-config)
   #+end_src

** Minibuffer

   Always use ESC key to quit minibuffer. First we need to define function to
   quit minibuffer

   #+BEGIN_SRC emacs-lisp
     (defun qq/minibuffer-keyboard-quit ()
       "Abort recursive edit.
     In Delete Selection mode, if the mark is active, just deactivate it;
     then it takes a second \\[keyboard-quit] to abort the minibuffer."
       (interactive)
       (if (and delete-selection-mode transient-mark-mode mark-active)
           (setq deactivate-mark t)
         (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
         (abort-recursive-edit)))
   #+END_SRC

*** Keybindings
    :PROPERTIES:
    :CUSTOM_ID: minibuffer-key-binding
    :END:
   Generate [[Minibuffer%20Bindings][bindings]] using =minibuf_keys= table below

   #+TBLNAME: minibuf_keys
      | Combo    | Mode                            | Description             | Command                      |
      |----------+---------------------------------+-------------------------+------------------------------|
      | [escape] | minibuffer-local-map            | Quit minibuffer         | 'qq/minibuffer-keyboard-quit |
      | [escape] | minibuffer-local-ns-map         | Quit minibuffer         | 'qq/minibuffer-keyboard-quit |
      | [escape] | minibuffer-local-completion-map | Quit minibuffer         | 'qq/minibuffer-keyboard-quit |
      | [escape] | minibuffer-local-must-match-map | Quit minibuffer         | 'qq/minibuffer-keyboard-quit |
      | [escape] | minibuffer-local-isearch-map    | Quit minibuffer         | 'qq/minibuffer-keyboard-quit |
      | C-w      | minibuffer-local-map            | Yank word from the back | 'backward-kill-word          |

** Calendar
   Define a function to display week numbers in =calender-mode=. The snippet
   is from [[http://www.emacswiki.org/emacs/CalendarWeekNumbers][EmacsWiki]].

   #+BEGIN_SRC emacs-lisp
   (defun calendar-show-week (arg)
     "Displaying week number in calendar-mode."
     (interactive "P")
     (copy-face font-lock-constant-face 'calendar-iso-week-face)
     (set-face-attribute
      'calendar-iso-week-face nil :height 0.7)
     (setq calendar-intermonth-text
           (and arg
                '(propertize
                  (format
                   "%2d"
                   (car (calendar-iso-from-absolute
                         (calendar-absolute-from-gregorian
                          (list month day year)))))
                  'font-lock-face 'calendar-iso-week-face))))
   #+END_SRC

   Evaluate the =calendar-show-week= function.

   #+BEGIN_SRC emacs-lisp
   (calendar-show-week t)
   #+END_SRC

   Set Monday as the first day of the week, and set my location.

   #+BEGIN_SRC emacs-lisp
   (setq calendar-week-start-day 1
         calendar-latitude 1.3667
         calendar-longitude 103.8
         calendar-location-name "Singapore, Singapore")
   #+END_SRC
** Ace-Jump-Mode
   #+BEGIN_SRC emacs-lisp
     (add-hook
      'after-init-hook
      (lambda ()
        ;; always 2 char jumping
        (after 'ace-jump-mode
          (defun ace-jump-char-mode (query-char1 query-char2)
            "AceJump char mode"
            (interactive (list (read-char "Query Char (1/2):") (read-char "Query Char (2/2):")))
            ;; We should prevent recursion call this function. This can happen
            ;; when you trigger the key for ace jump again when already in ace
            ;; jump mode. So we stop the previous one first.
            (if ace-jump-current-mode (ace-jump-done))
            (if (or (eq (ace-jump-char-category query-char1) 'other)
                    (eq (ace-jump-char-category query-char2) 'other))
                (error "[AceJump] Non-printable character"))
            ;; others : digit , alpha, punc
            (setq ace-jump-query-char query-char1)
            (setq ace-jump-current-mode 'ace-jump-char-mode)
            (ace-jump-do (regexp-quote (string query-char1 query-char2)))))))
   #+END_SRC

** TODO Smartparens

   #+BEGIN_SRC emacs-lisp

     (setq sp-show-pair-delay 0)
     (setq sp-show-pair-from-inside t)
     (setq sp-autoescape-string-quote nil)
     (setq sp-autoinsert-if-followed-by-same 1)
     (setq sp-highlight-pair-overlay nil)

     (sp-use-smartparens-bindings)
     (smartparens-global-mode t)

     (show-smartparens-global-mode t)
     (show-paren-mode -1)

     (defun qq/open-block-c-mode (id action context)
       (when (eq action 'insert)
         (newline)
         (indent-according-to-mode)
         (forward-line -1)
         (indent-according-to-mode)))

     (sp-pair "{" nil :post-handlers '(:add (qq/open-block-c-mode "RET")))
     (sp-pair "[" nil :post-handlers '(:add (qq/open-block-c-mode "RET")))

     ;; fix conflict where smartparens clobbers yas' key bindings
     (after 'yasnippet
       (defadvice yas-expand (before advice-for-yas-expand activate)
         (sp-remove-active-pair-overlay)))


   #+END_SRC

** Smart-Tab
   Enable smart-tabs-mode with all supported language modes.

   #+begin_src emacs-lisp
     (smart-tabs-insinuate 'c 'c++ 'java 'javascript 'cperl 'python
                           'ruby 'nxml)
   #+end_src

** Sr Speedbar
   Let =speedbar= show in current frame. The most painful part of Emacs fo far
   seems to be the lack of decent project tree navigation. The following features
   are needed:
   - Stays with/inside the current pane (emacs-nav seem to do, but does no tree)
   - Stays the same length
   - Shows current file
   - Integrates with Projectile (so the root can be pinned)

   Currently sr-speedbar seems to be the best option. Other options are:
   speedbar, neotree, dirtree and emacs-nav.

   #+BEGIN_SRC emacs-lisp
     (require-package 'sr-speedbar)
     (require 'sr-speedbar)
   #+END_SRC

*** Customize =sr-speedbar= behavior

   #+BEGIN_SRC emacs-lisp
     (setq sr-speedbar-skip-other-window-p 1)
     (setq sr-speedbar-width 40)
     (setq sr-speedbar-auto-refresh nil)
     (setq sr-speedbar-max-width 40)
     (setq sr-speedbar-right-side nil)
     (setq sr-speedbar-width-console 40)
     (setq sr-speedbar-width-x 40)

     (setq speedbar-verbosity-level 2)
     (setq speedbar-hide-button-brackets-flag t)
     (setq speedbar-show-unknown-files t)
     (setq speedbar-smart-directory-expand-flag t)
     (setq speedbar-use-images nil)
     (setq speedbar-hide-button-brackets-flag t
           speedbar-show-unknown-files t
           speedbar-smart-directory-expand-flag t
           speedbar-directory-button-trim-method 'trim
           speedbar-use-images nil
           speedbar-indentation-width 2
           speedbar-use-imenu-flag t
           speedbar-directory-unshown-regexp "^\\(\\.\\|\\.\\.\\)$"
           speedbar-file-unshown-regexp "flycheck-.*")
     (setq speedbar-frame-parameters
           '((minibuffer)
             (width . 40)
             (border-width . 0)
             (menu-bar-lines . 0)
             (tool-bar-lines . 0)
             (unsplittable . t)
             (left-fringe . 0)
             (right-fringe . 0)
             (vertical-scroll-bars . nil)))
   #+END_SRC

   Highlight the current line

   #+BEGIN_SRC emacs-lisp
     (add-hook 'speedbar-mode-hook (lambda () (setq truncate-lines t)))
   #+END_SRC

*** TODO Bindings

   #+BEGIN_SRC emacs-lisp
     (defun my:sr-speedbar-toggle()
       (interactive)
       (sr-speedbar-toggle)
       (with-current-buffer sr-speedbar-buffer-name (setq window-size-fixed 'width)))

     (global-set-key (kbd "C-x t") 'my:sr-speedbar-toggle)
     (global-set-key (kbd "C-x T") (lambda()
                                     (interactive)
                                     (sr-speedbar-select-window)
                                     (select-frame-set-input-focus (window-frame (selected-window)))))
   #+END_SRC

   More familiar keymap settings.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'speedbar-reconfigure-keymaps-hook
               '(lambda ()
                  (define-key speedbar-mode-map [S-up] 'speedbar-up-directory)
                  (define-key speedbar-mode-map [right] 'speedbar-flush-expand-line)
                  (define-key speedbar-mode-map [left] 'speedbar-contract-line)))
   #+END_SRC


** Guide key
*** Init
   #+BEGIN_SRC emacs-lisp
     (require-package 'guide-key)
     (require 'guide-key)
     (guide-key-mode 1)
     (setq guide-key/recursive-key-sequence-flag t)
     (setq guide-key/popup-window-position 'right)
   #+END_SRC

*** Keybindings
    :PROPERTIES:
    :CUSTOM_ID: guide-key-binding
    :END:
   Below is the table used to generate guide-key [[Guide%20Key%20Bindings][bindings]]

   #+TBLNAME:guide_keys
      | Combo |
      |-------|
      | C-w   |
      | C-x   |
      | C-c   |
      | \\    |
      | C-\\  |
      | g     |
      | SPC   |
      | [     |
      | ]     |
      | M-g   |
      | <f1>  |
      | <f2>  |
      | <f3>  |
      | <f4>  |
      | <f5>  |
      | <f6>  |
      | <f7>  |
      | <f8>  |
      | <f9>  |

*** Function key binding
    Lets group together a group of functions under =<F4>= through =<F9>= for
    easy access. We'll be using =guide-key= as the menu for the bindings.

    First group 'help/documentation' under =<F4>=:
    #+BEGIN_SRC emacs-lisp
      (defun qq-info-emacs-lisp-intro ()
        (interactive)
        (info "eintr"))

      (define-prefix-command 'qq/function-Help/Doc-map)
      (global-set-key (kbd "<f4>") 'qq/function-Help/Doc-map)
      (bind-key "B" 'describe-personal-keybindings qq/function-Help/Doc-map)
      (bind-key "F" 'find-function qq/function-Help/Doc-map)
      (bind-key "V" 'find-variable qq/function-Help/Doc-map)
      (bind-key "a" 'helm-apropos qq/function-Help/Doc-map)
      (bind-key "b" 'describe-bindings qq/function-Help/Doc-map)
      (bind-key "c" 'describe-char qq/function-Help/Doc-map)
      (bind-key "d" 'apropos-documentation qq/function-Help/Doc-map)
      (bind-key "f" 'describe-function qq/function-Help/Doc-map)
      (bind-key "h" 'qq-info-emacs-lisp-manual qq/function-Help/Doc-map)
      (bind-key "i" 'info qq/function-Help/Doc-map)
      (bind-key "k" 'describe-key qq/function-Help/Doc-map)
      (bind-key "l" 'view-lossage qq/function-Help/Doc-map)
      (bind-key "m" 'describe-mode qq/function-Help/Doc-map)
      (bind-key "o" 'helm-orgcard qq/function-Help/Doc-map)
      (bind-key "p" 'finder-by-keyword qq/function-Help/Doc-map)
      (bind-key "s" 'info-emacs-manual qq/function-Help/Doc-map)
      (bind-key "v" 'describe-variable qq/function-Help/Doc-map)
      (bind-key "w" 'helm-man-woman qq/function-Help/Doc-map)
      (bind-key "y" 'helm-pydoc qq/function-Help/Doc-map)
    #+END_SRC

    Next is 'Packages' under =<F5>=:
   #+BEGIN_SRC emacs-lisp
      (define-prefix-command 'qq/function-Packages-map)
      (global-set-key (kbd "<f5>") 'qq/function-Packages-map)
      (bind-key "c" 'helm-colors qq/function-Packages-map)
      (bind-key "f" 'find-library qq/function-Packages-map)
      (bind-key "g" 'customize-group qq/function-Packages-map)
      (bind-key "i" 'package-install qq/function-Packages-map)
      (bind-key "p" 'package-list-packages qq/function-Packages-map)
      (bind-key "t" 'helm-themes qq/function-Packages-map)
      (bind-key "v" 'customize-variable qq/function-Packages-map)
   #+END_SRC

    'Search/Find' functions are bind under =<F6>=:
    #+BEGIN_SRC emacs-lisp
      (define-prefix-command 'qq/function-Find-map)
      (global-set-key (kbd "<f6>") 'qq/function-Find-map)
      (bind-key "a" 'helm-imenu-anywhere qq/function-Find-map)
      (bind-key "g" 'helm-do-grep qq/function-Find-map)
      (bind-key "h" 'helm-org-headlines qq/function-Find-map)
      (bind-key "i" 'helm-imenu qq/function-Find-map)
      (bind-key "m" 'helm-multi-occur qq/function-Find-map)
      (bind-key "o" 'helm-occur qq/function-Find-map)
      (bind-key "b" 'helm-buffers-list qq/function-Find-map)
      (bind-key "f" 'helm-find qq/function-Find-map)
      (bind-key "j" 'helm-find-files qq/function-Find-map)
      (bind-key "l" 'helm-locate qq/function-Find-map)
      (bind-key "t" 'helm-cmd-t qq/function-Find-map)
    #+END_SRC

    'Eval' functions are bind under =<F7>=:
    #+BEGIN_SRC emacs-lisp
      (define-prefix-command 'qq/function-Eval-map)
      (global-set-key (kbd "<f7>") 'qq/function-Eval-map)
      (bind-key "c" 'calc qq/function-Eval-map)
      (bind-key "e" 'helm-eval-expression-with-eldoc qq/function-Eval-map)
      (bind-key "g" 'magit-status qq/function-Eval-map)
      (bind-key "i" 'ielm qq/function-Eval-map)
      (bind-key "r" 'helm-regexp qq/function-Eval-map)
      (bind-key "s" 'shell qq/function-Eval-map)
      (bind-key "t" 'ansi-term qq/function-Eval-map)
      (bind-key "x" 'helm-calcul-expression qq/function-Eval-map)
    #+END_SRC

    'Insert' functions are bind under =<F8>=:
    #+BEGIN_SRC emacs-lisp
      (define-prefix-command 'qq/function-Insert-map)
      (global-set-key (kbd "<f8>") 'qq/function-Insert-map)
      (bind-key "l" 'helm-insert-latex-math qq/function-Insert-map)
      (bind-key "u" 'helm-ucs qq/function-Insert-map)
    #+END_SRC

    Finally, "Misc' functions are bind under =<F9>=:
    #+BEGIN_SRC emacs-lisp
      (define-prefix-command 'qq/function-Misc-map)
      (global-set-key (kbd "<f9>") 'qq/function-Misc-map)
      (bind-key "g" 'helm-google-suggest qq/function-Misc-map)
      (bind-key "p" 'helm-list-emacs-process qq/function-Misc-map)
      (bind-key "s" 'helm-surfraw qq/function-Misc-map)
      (bind-key "t" 'helm-top qq/function-Misc-map)
      (bind-key "w" 'helm-world-time qq/function-Misc-map)
    #+END_SRC

** Whitespace Display
   [[Whitespace%20Bindings][Bindings]] to toggle whitespace character display

   #+TBLNAME: whitespace_keys
      | Combo   | Description                       | Command                           |
      |---------+-----------------------------------+-----------------------------------|
      | C-c _ w | Toggle whitespace-mode            | 'whitespace-mode                  |
      | C-c _ t | Option for whitespace mode        | 'whitespace-toggle-options        |
      | C-c = w | Toggle whitespace-mode globally   | 'global-whitespace-mode           |
      | C-c = t | Option for global whitespace-mode | 'global-whitespace-toggle-options |

** Volatile Highlight
   This package highlights changes to the buffer caused by commands such as
   ‘undo’, ‘yank’/’yank-pop’, etc. The highlight disappears at the next command.
   The highlighting gives useful visual feedback for what your operation
   actually changed in the buffer.

   #+BEGIN_SRC emacs-lisp
     (require-package 'volatile-highlights)
     (require 'volatile-highlights)
     (volatile-highlights-mode t)
   #+END_SRC

* Mac OS X
   For GUI apps, OS environment variables do not inherit from =shell=. As such,
   for certain things to work smoothly, we use =exec-path-from-shell= to include
   environment-variables from the =shell=. It makes using Emacs along with
   external processes a lot simpler. See [[http://stackoverflow.com/questions/16676826/making-the-path-and-other-environment-variables-available-in-emacs][Making the PATH and other environment
   variables available in emacs]]. I also prefer using the =Command=-key as the
   =Meta=-key.

   On Mac OS X, menu bar always exist. No point removing it.

   #+BEGIN_SRC emacs-lisp
     (when (memq window-system '(mac ns))
       (require-package 'exec-path-from-shell)
       (require 'ucs-normalize)
       (setq mac-option-modifier nil
             mac-command-modifier 'meta

             ;; Some mac-bindings interfere with Emacs bindings.
             mac-pass-command-to-system nil
             x-select-enable-clipboard t)

       (menu-bar-mode t)
       (run-with-idle-timer 5 nil 'exec-path-from-shell-initialize)
       (add-hook 'after-init-hook
                 (lambda ()
                   (exec-path-from-shell-copy-env "SSH_AGENT_PID")
                   (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
                   ))
   #+END_SRC

   Auctex setting for =Mac OS X=

   #+BEGIN_SRC emacs-lisp
       ;; Use Skim as viewer, enable source <-> PDF sync
       ;; make latexmk available via C-c C-c
       ;; Note: SyncTeX is setup via ~/.latexmkrc (see below)
;       (add-hook 'LaTeX-mode-hook (lambda ()
;                                    (push
;                                     '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
;                                       :help "Run latexmk on file")
;                                     TeX-command-list)))

       ;; use Skim as default pdf viewer
       ;; Skim's displayline is used for forward search (from .tex to .pdf)
       ;; option -b highlights the current line; option -g opens Skim in the background
       (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
       (setq TeX-view-program-list
             '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))
       )
   #+END_SRC

* Language Modes
** General
   Some general settings that should apply to all programming mode. Highlight
   =FIXME= and =TODO= so they stand out. Also enable indent-guide mode

   #+begin_src emacs-lisp
     (defun qq/add-watchwords ()
       (font-lock-add-keywords
        nil '(("\\<\\(FIXME\\|TODO\\|NOCOMMIT\\)\\>"
               1 '((:foreground "orange") (:weight bold)) t))))

     (add-hook 'prog-mode-hook
               '(lambda()
                  (qq/add-watchwords)
                  (require 'indent-guide)
                  (indent-guide-mode t)
                  (color-identifiers-mode t)))
   #+end_src

** Lisp
   =Pretty-lambda= provides a customizable variable
   =pretty-lambda-auto-modes= that is a list of common lisp modes. Here we
   can add some extra lisp-modes. We run the =pretty-lambda-for-modes=
   function to activate =pretty-lambda-mode= in lisp modes.

   #+BEGIN_SRC emacs-lisp
     (dolist (mode '(slime-repl-mode geiser-repl-mode))
       (add-to-list 'pretty-lambda-auto-modes mode))

     (pretty-lambda-for-modes)
   #+END_SRC

   I use =Paredit= when editing lisp code, we enable this for all lisp-modes
   in the =pretty-lambda-auto-modes= list.

   #+BEGIN_SRC emacs-lisp
     (dolist (mode pretty-lambda-auto-modes)
       ;; add paredit-mode to all mode-hooks
       (add-hook (intern (concat (symbol-name mode) "-hook")) 'paredit-mode))
   #+END_SRC

*** Emacs Lisp

    In =emacs-lisp-mode= we can enable =eldoc-mode= to display information
    about a function or a variable in the echo area.

    #+BEGIN_SRC emacs-lisp
      (require 'elisp-slime-nav)
      (defun qq/lisp-hook ()
        (progn
          (elisp-slime-nav-mode)
          (eldoc-mode)))

      (add-hook 'emacs-lisp-mode-hook 'qq/lisp-hook)
      (add-hook 'lisp-interaction-mode-hook 'qq/lisp-hook)
      (add-hook 'ielm-mode-hook 'qq/lisp-hook)
    #+END_SRC

** C and its derivative
*** Common
   The =c-mode-common-hook= is a general hook that work on all C-like
   languages (C, C++, Java, etc...). I like being able to quickly compile
   using =C-c C-c= (instead of =M-x compile=), a habit from =latex-mode=.

   #+BEGIN_SRC emacs-lisp
     (defun qq/c-mode-init ()
       (local-set-key (kbd "C-c C-c") 'compile)
       ;; To re-format c code. use C-x h M-C-\ (this puts the region around
       ;; the entire buffer, and then runs the indent-region command).
       (c-set-style "stroustrup")   ; C indenting style
       ;(c-set-offset 'statement-cont 0)
       (flycheck-mode)
       ; enable spell check in comment area
       (flyspell-prog-mode))

     (add-hook 'c-mode-common-hook 'qq/c-mode-init)
   #+END_SRC

*** Java
   Some statements in Java appear often, and become tedious to write
   out. We can use abbrevs to speed this up.

   #+BEGIN_SRC emacs-lisp
   (define-abbrev-table 'java-mode-abbrev-table
     '(("psv" "public static void main(String[] args) {" nil 0)
       ("sopl" "System.out.println" nil 0)
       ("sop" "System.out.printf" nil 0)))
   #+END_SRC

   To be able to use the abbrev table defined above, =abbrev-mode= must be
   activated.

   #+BEGIN_SRC emacs-lisp
   (defun java-setup ()
     (abbrev-mode t)
     (setq-local compile-command (concat "javac " (buffer-name))))

   (add-hook 'java-mode-hook 'java-setup)
   #+END_SRC

*** Objective-C
   Associate =.mm=-files with =objc-mode= instead of =nroff-mode=.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.mm\\'" . objc-mode))
   #+END_SRC

** Assembler
   When writing assembler code I use =#= for comments. By defining
   =comment-start= we can add comments using =M-;= like in other programming
   modes. Also in assembler should one be able to compile using =C-c C-c=.

   #+BEGIN_SRC emacs-lisp
   (defun asm-setup ()
     (setq comment-start "#")
     (local-set-key (kbd "C-c C-c") 'compile))

   (add-hook 'asm-mode-hook 'asm-setup)
   #+END_SRC

** LaTeX
*** Preferred settings for LaTeX

   #+BEGIN_SRC emacs-lisp
     (require-package 'magic-latex-buffer)

   #+END_SRC

   Enable parse on load and on save.

   #+BEGIN_SRC emacs-lisp
     (setq TeX-parse-self t)
     (setq TeX-auto-save t)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (setq-default TeX-master nil)
     (setq LaTeX-command-style '(("" "%(PDF)%(latex) -file-line-error %S%(PDFout)")))
     (setq TeX-save-query nil)
   #+END_SRC

   Set the indention level to 4 spaces

   #+BEGIN_SRC emacs-lisp
     (setq-default LaTeX-default-offset 4)
   #+END_SRC

   Show compilation buffer and scroll automtically with the compilation output

   #+BEGIN_SRC emacs-lisp
     (setq TeX-show-compilation t)
     (setq compilation-scroll-output t)
   #+END_SRC

   Compile LaTeX document to PDF by default

   #+BEGIN_SRC emacs-lisp
     (setq TeX-PDF-mode t)
   #+END_SRC

   " expands into csquotes macros (for this to work babel must be loaded after
   csquotes).

   #+BEGIN_SRC emacs-lisp
     (setq LaTeX-csquotes-close-quote "}"
           LaTeX-csquotes-open-quote "\\enquote{")

   #+END_SRC

   Associate =.tex=-files with =latex-mode= instead of =tex-mode=.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.tex\\'" . latex-mode))
   #+END_SRC

   As I'm using =XeLaTeX= (see below), for =latex-preview-pane= to work =pdf-latex-command=
   need to change to =XeLaTeX=

   #+begin_src emacs-lisp
   (setq pdf-latex-command "xelatex")
   #+end_src

   For Mac OS X, the setting for external pdf viewer is [[Mac%20OS%20X][here]]

*** Hooks

   #+BEGIN_SRC emacs-lisp
     (add-hook 'LaTeX-mode-hook (lambda()
                                  (require 'magic-latex-buffer)
                                  (magic-latex-buffer)
                                  (visual-line-mode)
                                  (auto-fill-mode)

   #+END_SRC

    Activate flyspell automatically when entering latex mode

   #+BEGIN_SRC emacs-lisp
                                  (flyspell-mode)
   #+END_SRC

    Activate latex-math-mode automatically when entering latex mode

   #+BEGIN_SRC emacs-lisp
                                  (LaTeX-math-mode)
   #+END_SRC

   Activate folding automatically when opening a tex file

   #+BEGIN_SRC emacs-lisp
                                  (TeX-fold-mode t)
                                  (TeX-fold-buffer)
   #+END_SRC

   I prefer to use =XeLaTeX=, which is a progression of LaTeX with more advanced
   typography features. =AUCTeX= don't come preconfigured with an option to run
   =XeLaTeX=.

   #+BEGIN_SRC emacs-lisp
                                  (add-to-list 'TeX-command-list '("XeLaTeX"
                                                                   "%`xelatex %(mode)%' %t" TeX-run-TeX nil t))
                                  (setq TeX-command-default "XeLaTeX")
                                  (local-set-key [C-tab] 'TeX-complete-symbol)
                                  ))
   #+END_SRC

*** Customize folding behavior for environments and macros

   #+BEGIN_SRC emacs-lisp
     (custom-set-variables '(TeX-fold-env-spec-list
                             '(("[comment]" ("comment"))
                               ("[figure]" ("figure")))))

     (custom-set-variables
      '(TeX-fold-macro-spec-list
        '(("[f]"     ("footnote" "marginpar"))
          ("[c]"     ("cite" "parencite"))
          ("[l]"     ("label"))
          ("[r]"     ("ref" "pageref" "eqref"))
          ("[i]"     ("index" "glossary"))
          ("[1]:||*" ("item"))
          ("..."     ("dots"))
          ("(C)"     ("copyright"))
          ("(R)"     ("textregistered"))
          ("TM"      ("texttrademark"))
          (1         ("part" "chapter"
                      "section" "subsection"
                      "subsubsection" "paragraph"
                      "subparagraph" "part*"
                      "chapter*" "section*"
                      "subsection*" "subsubsection*"
                      "paragraph*" "subparagraph*"
                      "emph" "textit"
                      "textsl" "textmd"
                      "textrm" "textsf"
                      "texttt" "textbf"
                      "textsc" "textup" "ac")))))
   #+END_SRC

*** RefTeX
   Turn on =RefTeX= for =AUCTeX=; [[http://www.gnu.org/s/auctex/manual/reftex/reftex_5.html][reftex 5]]

   #+BEGIN_SRC emacs-lisp
     (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
   #+END_SRC

    Prompt for empty optional arguments in cite macros.

   #+BEGIN_SRC emacs-lisp
     (setq reftex-cite-prompt-optional-args t)
   #+END_SRC

   Make RefTeX interact with AUCTeX, [[http://www.gnu.org/s/auctex/manual/reftex/AUCTeX_002dRefTeX-Interface.html][RefTeX interface]]

   #+BEGIN_SRC emacs-lisp
     (setq reftex-plug-into-AUCTeX t)
   #+END_SRC

   So that =RefTeX= also recognizes =\addbibresource=. Note that you can't use
   =$HOME= in path for =\addbibresource= but that "~" works.

   #+BEGIN_SRC emacs-lisp
     (setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
   #+END_SRC

   Recognize =\subcaptions=, e.g. reftex-citation.

   #+BEGIN_SRC emacs-lisp
     (eval-after-load "reftex-vars"
       '(progn (setcdr (assoc 'caption reftex-default-context-regexps)
                       "\\\\\\(rot\\|sub\\)?caption\\*?[[{]")))
   #+END_SRC

   Get ReTeX with biblatex, see [[http://tex.stackexchange.com/questions/31966/setting-up-reftex-with-biblatex-citation-commands/31992#31992][Setting up RefTeX with biblatex citation commands]]

   #+BEGIN_SRC emacs-lisp
     (setq reftex-cite-format
           '((?t . "\\textcite[]{%l}")
             (?a . "\\autocite[]{%l}")
             (?c . "\\cite[]{%l}")
             (?s . "\\smartcite[]{%l}")
             (?f . "\\footcite[]{%l}")
             (?n . "\\nocite{%l}")
             (?b . "\\blockcquote[]{%l}{}")))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
;     (setq reftex-default-bibliography '("UNCOMMENT LINE AND INSERT PATH TO YOUR BIBLIOGRAPHY HERE")); So that RefTeX in Org-mode knows bibliography
     (setq reftex-use-external-file-finders t)
     (setq reftex-external-file-finders
           '(("tex" . "kpsewhich -format=.tex %f")
             ("bib" . "kpsewhich -format=.bib %f")))
     (setq reftex-default-bibliography
           (quote
            ("default.bib" "other-default.bib")))
   #+END_SRC

*** Fontification
 Remove unnecessary entries as you notice them. See [[http://lists.gnu.org/archive/html/emacs-orgmode/2009-05/msg00236.html][mail archive]] & [[http://www.gnu.org/software/auctex/manual/auctex/Fontification-of-macros.html][Fontification of macros]]

   #+BEGIN_SRC emacs-lisp
     (setq font-latex-match-reference-keywords
           '(
             ;; biblatex
             ("printbibliography" "[{")
             ("addbibresource" "[{")
             ;; Standard commands
             ;; ("cite" "[{")
             ("Cite" "[{")
             ("parencite" "[{")
             ("Parencite" "[{")
             ("footcite" "[{")
             ("footcitetext" "[{")
             ;; ;; Style-specific commands
             ("textcite" "[{")
             ("Textcite" "[{")
             ("smartcite" "[{")
             ("Smartcite" "[{")
             ("cite*" "[{")
             ("parencite*" "[{")
             ("supercite" "[{")
                                             ; Qualified citation lists
             ("cites" "[{")
             ("Cites" "[{")
             ("parencites" "[{")
             ("Parencites" "[{")
             ("footcites" "[{")
             ("footcitetexts" "[{")
             ("smartcites" "[{")
             ("Smartcites" "[{")
             ("textcites" "[{")
             ("Textcites" "[{")
             ("supercites" "[{")
             ;; Style-independent commands
             ("autocite" "[{")
             ("Autocite" "[{")
             ("autocite*" "[{")
             ("Autocite*" "[{")
             ("autocites" "[{")
             ("Autocites" "[{")
             ;; Text commands
             ("citeauthor" "[{")
             ("Citeauthor" "[{")
             ("citetitle" "[{")
             ("citetitle*" "[{")
             ("citeyear" "[{")
             ("citedate" "[{")
             ("citeurl" "[{")
             ;; Special commands
             ("fullcite" "[{")))

     (setq font-latex-match-textual-keywords
           '(
             ;; biblatex brackets
             ("parentext" "{")
             ("brackettext" "{")
             ("hybridblockquote" "[{")
             ;; Auxiliary Commands
             ("textelp" "{")
             ("textelp*" "{")
             ("textins" "{")
             ("textins*" "{")
             ;; supcaption
             ("subcaption" "[{")))

     (setq font-latex-match-variable-keywords
           '(
             ;; amsmath
             ("numberwithin" "{")
             ;; enumitem
             ("setlist" "[{")
             ("setlist*" "[{")
             ("newlist" "{")
             ("renewlist" "{")
             ("setlistdepth" "{")
             ("restartlist" "{")))
   #+END_SRC

** Python

   [[http://tkf.github.io/emacs-jedi/released/][Jedi]] offers nice auto completion for =python-mode=. Mind that it is
   dependent on some python programs as well, so make sure you follow the
   instructions from the site.

   #+BEGIN_SRC emacs-lisp
   ;; (setq jedi:server-command
   ;;       (cons "python3" (cdr jedi:server-command))
   ;;       python-shell-interpreter "python3")
   (add-hook 'python-mode-hook 'jedi:setup)
   (setq jedi:complete-on-dot t)
   (add-hook 'python-mode-hook 'jedi:ac-setup)
   #+END_SRC

#  LocalWords:  Whitespace Minibuffer CScope Magit Comint
** Markdown
   Enable =markdown-mode=  and setup additional file extensions.

   #+BEGIN_SRC emacs-lisp
     (require-package 'markdown-mode)
     (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
     (add-to-list 'auto-mode-alist '("\\.mdown$" . markdown-mode))
     (add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))
     (add-hook 'markdown-mode-hook
               (lambda ()
                 (visual-line-mode t)
                 (writegood-mode t)
                 (flyspell-mode t)))
   #+END_SRC

* TODO Bindings
** TODO Meta
   First, we need to create custom macros.

   #+BEGIN_SRC emacs-lisp
     (require 'bind-key)
     (defmacro bind (&rest commands)
       "Convience macro which creates a lambda interactive command."
       `(lambda ()
          (interactive)
          ,@commands))

     (defun qq/goto-scratch-buffer ()
       "Create a new scratch buffer."
       (interactive)
       (switch-to-buffer (get-buffer-create "*scratch*"))
       (emacs-lisp-mode))

     ;; mouse scrolling in terminal
     (unless (display-graphic-p)
       (global-set-key [mouse-4] (bind (scroll-down 1)))
       (global-set-key [mouse-5] (bind (scroll-up 1))))
   #+END_SRC


   We need to turn the mode on here so that we can map keys further below. We
   lower the delay so that chords are not triggered too easily.

   #+NAME: gen-keys
   #+BEGIN_SRC emacs-lisp :var tname=1 :var mmap="" :var moda="" :results output :tangle no :exports none :colnames yes
     (mapcar (lambda (l)
               (unless (string-match "^<[[:digit:]]+>$" (format "%s" (car l)))
                 (let* ((key (car l))
                        (usemap (string< "" (format "%s" mmap)))
                        (map (if usemap (if (string= (format "%s" mmap) "t")
                                            (nth 1 l)(format "%s" mmap)) nil))
                        (def (cond ((string-match "^[[:alnum:]]\\{2\\}$" (format "%s" key))
                                    (format "key-chord-define-global \"%s\"" key))
                                   ((string= (format "%s" moda) "evil")
                                    (format "evil-define-key \"%s\"" key))
                                   ((string= (format "%s" key) "[escape]")
                                    (format "bind-key %s" key))
                                   (t (format "bind-key \"%s\"" key))))
                        (command (car (last l))))
                   (if usemap
                       (princ (format "(%s %s %s)\n" def command map))
                     (princ (format "(%s %s)\n" def command))))))
             tname)
   #+END_SRC

   Another function for generating key for Guide-Key

   #+NAME: gen-guide-keys
   #+BEGIN_SRC emacs-lisp :var keys=guide_keys :results output :tangle no :exports none :colnames yes
     (princ "(setq guide-key/guide-key-sequence '(" )
     (mapcar (lambda (l)
                (princ (format "\"%s\" " (car l))))
             keys)
     (princ "))\n" )
   #+END_SRC

   Utility function for keys generation, this portion will add pre/post code

   #+NAME: gen-fix
   #+BEGIN_SRC emacs-lisp :var pre="" :var pos="" :result output :tangle no :exports none :colnames yes
     (let* ((beg (format "%s" pre))
            (las (format "%s" pos)))
       (if (string< "" beg) (princ (format "(%s" beg))
         (princ las)))
   #+END_SRC

** Generate all the binding here.
   The code for the keys is generated from data in a named Org table, i.e. =keys=
   using a bit of Elisp code =gen-keys= and is spit out inside a code block via
   [[http://orgmode.org/manual/noweb.html][Noweb syntax]]. The same data is also used in the [[Keyboard%20shortcuts][Keyboard shortcuts]] section to
   generate the documentation. I'd like to be able to have only one place to
   change key information and have it updated wherever necessary.

*** Guide Key Bindings
   Guide key uses special keybinding code =gen-guide-keys= which simply iterate
   a list and print it and wrapped inside =setq= =guide-key/guide-key-sequence=.
   Table [[guide-key-binding][here]] is used as the source to generate the keys.

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-guide-keys()>>
   #+END_SRC

*** Whitespace Bindings
   =whispace_keys= table is [[Whitespace%20Display][here]].

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-keys(tname=whitespace_keys)>>
   #+END_SRC

*** Org Mode Bindings
   =org_keys= table is [[#orgmode-key-binding][here]].

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-keys(tname=org_keys)>>
   #+END_SRC

*** Minibuffer Bindings
   Binding table used is located [[#minibuffer-key-binding][here]].

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-keys(mmap="t", tname=minibuf_keys)>>
   #+END_SRC

*** Cscope Bindings
   Binding table is [[CScope][here]]. Before binding generation start, prefix code is added
   to put this binding in =cscope-minor-mode= only. Coresponding postfix is also
   added to complete the whole code.

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-fix(pre="add-hook 'cscope-minor-mode-hook\n'(lambda ()")>>
     <<gen-keys(mmap="cscope-minor-mode-keymap", tname=cscope_keys)>>
     <<gen-fix(pos="))\n")>>
   #+END_SRC

*** Auto-Complete Bindings
   Using [[Auto-Complete][this]] table to generate =auto-complete= bindings. Note the prefix code
   added to make sure the binding called after =auto-complete= loaded.

   #+BEGIN_SRC emacs-lisp :noweb yes :result silent
     <<gen-fix(pre="after 'auto-complete")>>
     <<gen-keys(mmap="ac-completing-map", tname=ac-key-combo)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

*** Helm Bindings
   Binding code generation for [[#helm-key-binding][this]] table

   #+BEGIN_SRC emacs-lisp :noweb yes :result silent
     <<gen-keys(mmap="t", tname=helm_combo)>>
   #+END_SRC

*** Basic Bindings
   Generate binding using table from [[#default-key-binding][here]]

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-keys(tname=std_keys)>>
   #+END_SRC

*** Expand Region Bindings
   Generate binding using table from [[Expand%20Region][here]]

   #+BEGIN_SRC emacs-lisp :noweb yes :results silent
     <<gen-keys(tname=er-combos)>>
   #+END_SRC

** Evil
*** Basic Behaviour

   #+BEGIN_SRC emacs-lisp
     (after 'evil
       ;;; fix conflict with electric-indent-mode in 24.4
       ;(define-key evil-insert-state-map [remap newline] 'newline)
       ;(define-key evil-insert-state-map [remap newline-and-indent] 'newline-and-indent)

       (bind-key "SPC o" 'imenu evil-normal-state-map)
       (bind-key "SPC b" 'switch-to-buffer evil-normal-state-map)

       (bind-key "C-b" 'evil-scroll-up evil-normal-state-map)
       (bind-key "C-f" 'evil-scroll-down evil-normal-state-map)

       (bind-key "[ SPC" (bind (evil-insert-newline-above) (forward-line)) evil-normal-state-map)
       (bind-key "] SPC" (bind (evil-insert-newline-below) (forward-line -1)) evil-normal-state-map)
       (bind-key "[ e" (kbd "ddkP") evil-normal-state-map)
       (bind-key "] e" (kbd "ddp") evil-normal-state-map)
       (bind-key "[ b" 'previous-buffer evil-normal-state-map)
       (bind-key "] b" 'next-buffer evil-normal-state-map)
       (bind-key "[ q" 'previous-error evil-normal-state-map)
       (bind-key "] q" 'next-error evil-normal-state-map)

       (bind-key "g p" (kbd "` [ v ` ]") evil-normal-state-map)

       (bind-key [backspace] 'evil-ex-nohighlight evil-normal-state-map)

       (global-set-key (kbd "C-w") 'evil-window-map)
       (bind-key "C-j" 'windmove-down evil-normal-state-map)
       (bind-key "C-k" 'windmove-up evil-normal-state-map)
       (bind-key "C-h" 'windmove-left evil-normal-state-map)
       (bind-key "C-l" 'windmove-right evil-normal-state-map)
       (bind-key "C-j" 'windmove-down evil-motion-state-map)
       (bind-key "C-k" 'windmove-up evil-motion-state-map)
       (bind-key "C-h" 'windmove-left evil-motion-state-map)
       (bind-key "C-l" 'windmove-right evil-motion-state-map)

       (bind-key "j" 'evil-next-visual-line evil-motion-state-map)
       (bind-key "k" 'evil-previous-visual-line evil-motion-state-map)

       (bind-key "Q" 'qq/window-killer evil-normal-state-map)
       (bind-key "Y" (kbd "y$") evil-normal-state-map)

       (define-key evil-visual-state-map (kbd ", e") 'eval-region)

       ;; butter fingers
       (evil-ex-define-cmd "Q" 'evil-quit)
       (evil-ex-define-cmd "Qa" 'evil-quit-all)
       (evil-ex-define-cmd "QA" 'evil-quit-all)
   #+END_SRC

*** Key-Chord

   #+BEGIN_SRC emacs-lisp
       (require-package 'key-chord)
       (key-chord-mode 1)
       (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
       (key-chord-define evil-insert-state-map "kj" 'evil-normal-state)
   #+END_SRC

*** Evil-Leader

   #+BEGIN_SRC emacs-lisp
       (after "evil-leader-autoloads"
         (evil-leader/set-leader "\\")
         (evil-leader/set-key
           "w" 'save-buffer
           "e" 'eval-last-sexp
           ", e" 'eval-defun
           "E" 'eval-defun
           "f" 'ctl-x-5-prefix
           "q" 'evil-window-delete
           "c" (bind
                (evil-window-split)
                (setq qq/eshell-buffer-count (+ 1 qq/eshell-buffer-count))
                (eshell qq/eshell-buffer-count))
           "C" 'customize-group
           "b d" 'kill-this-buffer
           "\\" 'evil-execute-in-emacs-state
           "v" (kbd "C-w v C-w l")
           "s" (kbd "C-w s C-w j")
           "P" 'package-list-packages
           "V" (bind (term "vim"))
           "h" help-map
           "h h" 'help-for-help-internal)
   #+END_SRC

*** Magit

   #+BEGIN_SRC emacs-lisp
     (after "magit-autoloads"
       (evil-leader/set-key
         "g s" 'magit-status
         "g b" 'magit-blame-mode
         "g c" 'magit-commit
         "g l" 'magit-log)))
   #+END_SRC

*** Evil-Numbers

   #+BEGIN_SRC emacs-lisp
     (after "evil-numbers-autoloads"
       (define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
       (define-key evil-normal-state-map (kbd "C-S-a") 'evil-numbers/dec-at-pt))
   #+END_SRC

*** Git-Gutter+

   #+BEGIN_SRC emacs-lisp
     (after "git-gutter+-autoloads"
       (evil-leader/set-key
         "g a" 'git-gutter+-stage-hunks
         "g r" 'git-gutter+-revert-hunks)
       (define-key evil-normal-state-map (kbd "[ h") 'git-gutter+-previous-hunk)
       (define-key evil-normal-state-map (kbd "] h") 'git-gutter+-next-hunk)
       (evil-ex-define-cmd "Gw" (bind (git-gutter+-stage-whole-buffer))))
   #+END_SRC

*** Smex

   #+BEGIN_SRC emacs-lisp
       (after "smex-autoloads"
         (define-key evil-visual-state-map (kbd "SPC SPC") 'smex)
         (define-key evil-normal-state-map (kbd "SPC SPC") 'smex))
   #+END_SRC

*** Ido

   #+BEGIN_SRC emacs-lisp
       (define-key evil-normal-state-map (kbd "SPC k") 'ido-kill-buffer)
       (define-key evil-normal-state-map (kbd "SPC f") 'ido-find-file)
   #+END_SRC

*** Helm

   #+BEGIN_SRC emacs-lisp
     (after "helm-autoloads"
       (define-key evil-normal-state-map (kbd "g b") 'helm-mini)
       (define-key evil-normal-state-map (kbd "SPC f") 'helm-find-files)
       (define-key evil-normal-state-map (kbd "SPC o") 'helm-imenu)
       (define-key evil-normal-state-map (kbd "SPC t") 'helm-etags-select)
       (define-key evil-normal-state-map (kbd "SPC y") 'helm-show-kill-ring)
       (define-key evil-normal-state-map (kbd "SPC m") 'helm-bookmarks)
       (define-key evil-normal-state-map (kbd "SPC r") 'helm-register)
       (define-key evil-normal-state-map (kbd "SPC x") 'helm-M-x)
   #+END_SRC

*** Helm-Swoop

   #+BEGIN_SRC emacs-lisp
     (after "helm-swoop-autoloads"
       (define-key evil-normal-state-map (kbd "SPC l") 'helm-swoop)
       (define-key evil-normal-state-map (kbd "SPC L") 'helm-multi-swoop)))
   #+END_SRC

*** Ggtags

   #+BEGIN_SRC emacs-lisp
     (define-key evil-normal-state-map (kbd "g ]") 'ggtags-find-definition)
     (define-key evil-normal-state-map (kbd "g [") 'ggtags-find-reference)
   #+END_SRC

*** CC-Mode
   #+BEGIN_SRC emacs-lisp
     (evil-define-key 'insert c-mode-base-map (kbd "RET") 'newline-and-indent)
   #+END_SRC

*** Lisp/Slime
   #+BEGIN_SRC emacs-lisp
     (evil-define-key 'normal emacs-lisp-mode-map "K" (bind (help-xref-interned (symbol-at-point))))
     (after "elisp-slime-nav-autoloads"
       (evil-define-key 'normal emacs-lisp-mode-map (kbd "g d") 'elisp-slime-nav-find-elisp-thing-at-point))
   #+END_SRC

*** Coffee-Mode

   #+BEGIN_SRC emacs-lisp
     (after "coffee-mode-autoloads"
       (evil-define-key 'visual coffee-mode-map (kbd ", p") 'coffee-compile-region)
       (evil-define-key 'normal coffee-mode-map (kbd ", p") 'coffee-compile-buffer))
   #+END_SRC

*** Org

   Remap org-mode meta keys for convenience.

   #+BEGIN_SRC emacs-lisp
     (mapcar (lambda (state)
               (evil-declare-key state org-mode-map
                 (kbd "M-l") 'org-metaright
                 (kbd "M-h") 'org-metaleft
                 (kbd "M-k") 'org-metaup
                 (kbd "M-j") 'org-metadown
                 (kbd "M-L") 'org-shiftmetaright
                 (kbd "M-H") 'org-shiftmetaleft
                 (kbd "M-K") 'org-shiftmetaup
                 (kbd "M-J") 'org-shiftmetadown))
             '(normal insert))
     (evil-define-key 'normal org-mode-map (kbd "z c")   'hide-subtree)
     (evil-define-key 'normal org-mode-map (kbd "\\ TAB")  '(lambda () (interactive)(org-shiftmetadown)
                                                              (evil-insert 0)))
     (evil-define-key 'normal org-mode-map (kbd "-")   'org-cycle-list-bullet)
     (evil-define-key 'insert org-mode-map (kbd "C-c .")
       '(lambda () (interactive) (org-time-stamp-inactive t)))

   #+END_SRC

*** Stylus-Mode

   #+BEGIN_SRC emacs-lisp
     (after 'stylus-mode
       (define-key stylus-mode-map [remap eval-last-sexp] 'qq/stylus-compile-and-eval-buffer)
       (evil-define-key 'visual stylus-mode-map (kbd ", p") 'qq/stylus-compile-and-show-region)
       (evil-define-key 'normal stylus-mode-map (kbd ", p") 'qq/stylus-compile-and-show-buffer))
   #+END_SRC

*** Projectile

   #+BEGIN_SRC emacs-lisp
       (after "projectile-autoloads"
         (define-key evil-normal-state-map (kbd "SPC /")
           (bind
            (interactive)
            (call-interactively (cond ((executable-find "pt")
                                       'projectile-pt)
                                      ((executable-find "ag")
                                       'projectile-ag)
                                      ((executable-find "ack")
                                       'projectile-ack)
                                      (t
                                       'projectile-grep)))))
         (define-key evil-normal-state-map (kbd "SPC e") 'projectile-recentf)
         (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file))
   #+END_SRC

*** Multiple-Cursors

   #+BEGIN_SRC emacs-lisp
       (after "multiple-cursors-autoloads"
         (after 'js2-mode
           (evil-define-key 'normal js2-mode-map (kbd "g r") 'js2r-rename-var))
         (define-key evil-normal-state-map (kbd "g r") 'mc/mark-all-like-this-dwim))
   #+END_SRC

*** Ace-Jump-Mode

   #+BEGIN_SRC emacs-lisp
       (after "ace-jump-mode-autoloads"
         (define-key evil-operator-state-map (kbd "z") 'evil-ace-jump-char-mode)
         (define-key evil-normal-state-map (kbd "s") 'evil-ace-jump-char-mode)
         (define-key evil-motion-state-map (kbd "S-SPC") 'evil-ace-jump-line-mode)))
   #+END_SRC

** Magit

   #+BEGIN_SRC emacs-lisp
     (after "magit-autoloads"
       (global-set-key (kbd "C-x g") 'magit-status)
       (after 'magit
         (define-key magit-status-mode-map (kbd "C-n") 'magit-goto-next-sibling-section)
         (define-key magit-status-mode-map (kbd "C-p") 'magit-goto-previous-sibling-section)
         (define-key magit-status-mode-map (kbd "q") 'qq/magit-quit-session)))
   #+END_SRC

** Project-Explorer

   #+BEGIN_SRC emacs-lisp
     (after "project-explorer-autoloads"
       (global-set-key [f2] 'project-explorer-open)
       (autoload 'pe/show-file "project-explorer")
       (global-set-key [f3] 'pe/show-file)
       (after 'project-explorer
         (define-key project-explorer-mode-map (kbd "C-l") 'evil-window-right)))
   #+END_SRC

** Multiple Cursors

   #+BEGIN_SRC emacs-lisp
     (after "multiple-cursors-autoloads"
       (global-set-key (kbd "C->") 'mc/mark-next-like-this)
       (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
       (global-unset-key (kbd "M-<down-mouse-1>"))
       (global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click))
   #+END_SRC

** Comint

   #+BEGIN_SRC emacs-lisp
     (after 'comint
       (define-key comint-mode-map [up] 'comint-previous-input)
       (define-key comint-mode-map [down] 'comint-next-input))
   #+END_SRC

** Hide-Show
   #+begin_src emacs-lisp
      ;(after 'hideshow
      ;   (bind-key (kbd "C-c TAB") 'hs-toggle-hiding'))
   #+end_src
** Company

   #+BEGIN_SRC emacs-lisp
     (after 'company
       (define-key company-active-map (kbd "C-n") 'company-select-next)
       (define-key company-active-map (kbd "C-p") 'company-select-previous))
   #+END_SRC

** Web-Mode

   #+BEGIN_SRC emacs-lisp
     (after 'web-mode
       (after "angular-snippets-autoloads"
         (define-key web-mode-map (kbd "C-c C-d") 'ng-snip-show-docs-at-point)))
   #+END_SRC
