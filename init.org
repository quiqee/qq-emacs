#+TITLE: Emacs Configuration
#+AUTHOR: QuiQee
#+DATE: <2025-01-15 Wed>
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el
#+STARTUP: fold

* About
Modern Emacs configuration with comprehensive package integration, evil mode, and productivity-focused tools. This configuration uses literate programming with org-babel, noweb templating for code generation, and systematic keybinding management.

** Core Architecture
- **Literate Programming**: Configuration written in org-mode with babel tangling
- **Package Management**: straight.el with use-package for declarative configuration
- **Evil Mode**: Complete vim keybinding emulation with extensive evil extensions
- **Performance**: Optimized startup with lazy loading and garbage collection tuning
- **Site-Specific**: Multi-machine support with hostname-based configuration

** Package Overview
*** Core Editor Experience
**** Evil Mode & Extensions
- **[[*Evil Mode][evil]]**: Complete vim emulation with modern undo system
- **[[*Evil Collection][evil-collection]]**: Evil-friendly bindings for 100+ modes
- **[[*Evil Org][evil-org]]**: Evil keybindings for org-mode with enhanced functionality
- **[[*Evil Surround][evil-surround]]**: Vim-surround functionality (cs, ds, ys)
- **[[*Evil Nerd Commenter][evil-nerd-commenter]]**: Advanced commenting with gcc, gc
- **[[*Evil Numbers][evil-numbers]]**: Number increment/decrement with C-a/C-x
- **[[*Evil Visualstar][evil-visualstar]]**: Search for selection with * in visual mode
- **[[*Evil Matchit][evil-matchit]]**: Enhanced % matching for tags, blocks
- **[[*Evil Exchange][evil-exchange]]**: Text object exchange with gx
- **[[*Evil Args][evil-args]]**: Function argument text objects (cia, dia, via)
- **[[*Evil Snipe][evil-snipe]]**: Two-character search like vim-sneak
- **[[*Evil Multiedit][evil-multiedit]]**: Multiple cursors designed for evil
- **[[*Evil Goggles][evil-goggles]]**: Visual feedback for evil operations
- **[[*Evil Lion][evil-lion]]**: Text alignment with gl/gL operators
- **[[*Evil Quickscope][evil-quickscope]]**: Enhanced character navigation with visual hints

**** Completion & Navigation
- **[[*Vertico][vertico]]**: Modern completion interface with posframe
- **[[*Marginalia][marginalia]]**: Rich annotations for completion candidates
- **[[*Orderless][orderless]]**: Flexible completion matching styles
- **[[*Embark][embark]]**: Contextual actions on completion targets
- **[[*Embark-Consult][embark-consult]]**: Integration between embark and consult
- **[[*Consult][consult]]**: Consulting completing-read commands
- **[[*Corfu][corfu]]**: In-buffer completion with cape extensions
- **[[*Kind Icon][kind-icon]]**: Icons for completion candidates
- **[[*Cape][cape]]**: Completion-at-point extensions

*** Development Tools
**** Language Support & LSP
- **[[*LSP Mode][lsp-mode]]**: Language Server Protocol client
- **[[*DAP Mode][dap-mode]]**: Debug Adapter Protocol support
- **[[*YASnippet][yasnippet]]**: Snippet expansion system
- **[[*YASnippet Snippets][yasnippet-snippets]]**: Collection of ready-to-use snippets for yasnippet
- **[[*Treesit Auto][treesit-auto]]**: Automatic tree-sitter mode activation
- **[[*Tree-sitter Configuration][tree-sitter]]**: Superior syntax highlighting with 25+ language grammars
- **[[*Combobulate][combobulate]]**: Advanced tree-sitter-based code manipulation and navigation
- **[[*Treesit Fold][treesit-fold]]**: Code folding based on tree-sitter

**** Web Development
- **[[*Web Mode][web-mode]]**: Multi-language template editing
- **[[*JS Doc][js-doc]]**: JSDoc comment generation
- **[[*RJSX Mode][rjsx-mode]]**: Enhanced React JSX support

**** C++ Development
- **[[*CCLS][ccls]]**: High-performance C/C++ language server
- **[[*Clangd][clangd]]**: Official Clang C/C++ language server with excellent performance
- **[[*CMake Mode][cmake-mode]]**: CMake build system support
- **[[*Clang Format][clang-format]]**: Code formatting integration

**** Language Modes
- **[[*Markdown Mode][markdown-mode]]**: GitHub Flavored Markdown support
- **[[*Markdown TS Mode][markdown-ts-mode]]**: Tree-sitter powered Markdown editing
- **[[*YAML Mode][yaml-mode]]**: YAML configuration file editing
- **[[*Lua Mode][lua-mode]]**: Lua scripting language support
- **[[*QML Mode][qml-mode]]**: Qt QML file editing support
- **[[*Dockerfile Mode][dockerfile-mode]]**: Docker configuration editing
- **[[*Docker Compose Mode][docker-compose-mode]]**: Docker Compose file support
- **[[*PlantUML Mode][plantuml-mode]]**: Diagram-as-code with PlantUML
- **[[*Format All][format-all]]**: Universal code formatter

**** Code Quality
- **[[*Flycheck][flycheck]]**: Real-time syntax checking for multiple languages
- **[[*Smartparens][smartparens]]**: Intelligent parentheses handling and structural editing
- **[[*Fancy Compilation][fancy-compilation]]**: Enhanced compilation output with progress display and improved diagnostics
- **[[*Restart Emacs][restart-emacs]]**: Restart Emacs from within Emacs for config testing
- **[[*Exec Path From Shell][exec-path-from-shell]]**: Shell environment setup for macOS GUI Emacs

*** Navigation & Text Editing
**** Navigation Tools
- **[[*Avy][avy]]**: Fast character/word/line jumping
- **[[*Expand Region][expand-region]]**: Smart text selection by semantic units
- **[[*Symbol Overlay][symbol-overlay]]**: Highlight symbols with overlays for better code navigation
- **[[*Casual Suite][casual-suite]]**: Discoverable transient interfaces for common Emacs tools

**** File Management & Dired
- **[[*Dired Plus][dired+]]**: Enhanced dired with additional features
- **[[*Dired Sidebar][dired-sidebar]]**: IDE-like file tree sidebar with nerd-icons
- **[[*Dired Hacks][dired-hacks]]**: Collection including subtree, filter, collapse
- **[[*Dired Git Info][dired-git-info]]**: Git status information in dired buffers
- **[[*Dired Narrow][dired-narrow]]**: Live filtering of dired buffers
- **[[*Dired Rainbow][dired-rainbow]]**: Color-coded file types
- **[[*Treemacs][treemacs]]**: Tree-style file explorer with evil integration
- **[[*WS Butler][ws-butler]]**: Trim whitespace on save without affecting cursor position

**** Buffer, Workspace & Window Management
- **[[*Helpful][helpful]]**: Better help system with more detailed documentation
- **[[*Ace Window][ace-window]]**: Fast window switching with visual overlays
- **[[*Popper][popper]]**: Popup window management for temporary buffers with one-key access
- **[[*Tempbuf][tempbuf]]**: Automatically kills buffers that haven't been used for a while
- **[[*Default Text Scale][default-text-scale]]**: Easily adjust text scale across all buffers
- **[[*Perspective][perspective]]**: Workspace management that groups buffers and windows by project/task context

*** Project & Version Control
- **[[*Projectile][projectile]]**: Project management with intelligent project detection
- **[[*Magit][magit]]**: Git interface with staging, branching, and merge support
- **[[*Blamer][blamer]]**: Git blame information display for code authorship tracking
- **[[*Diff HL][diff-hl]]**: Highlight uncommitted changes in the buffer fringe with VCS integration
- **[[*VC Msg][vc-msg]]**: Enhanced version control message display with multi-VCS support
- **[[*Magit Delta][magit-delta]]**: Enhanced diff display in Magit with improved syntax highlighting and readability
- **[[*Difftastic][difftastic]]**: Structural diff tool that understands syntax for better code diffs
- **[[*Git Timemachine][git-timemachine]]**: Interactive git history browsing that lets you step through file changes over time

*** User Interface
**** Visual Enhancements
- **[[*Doom Modeline][doom-modeline]]**: Modern modeline with git, LSP, and project info
- **[[*Minions][minions]]**: Clean minor mode display
- **[[*Nerd Icons][nerd-icons]]**: Icon support with completion, dired integration
- **[[*Which-key][which-key]]**: Keybinding discovery system
- **[[*Which-key Posframe][which-key-posframe]]**: Display which-key popup in posframe
- **[[*Transient Posframe][transient-posframe]]**: Display transient menus in posframe
- **[[*Solaire Mode][solaire-mode]]**: Visual distinction between file-visiting and temporary buffers
- **[[*Auto Dim Other Buffers][auto-dim-other-buffers]]**: Dim inactive buffers to focus on current work
- **[[*Goggles][goggles]]**: Highlight changes and operations for better feedback
- **[[*Highlight Indent Guides][highlight-indent-guides]]**: Visual indentation guides for better code readability and structure
- **[[*Colorful Mode][colorful-mode]]**: Colorize color names and hex codes in buffers

**** Themes & Appearance
- **quickbeans-theme**: Custom color scheme optimized for programming
- **[[*Org Modern][org-modern]]**: Modern styling for org-mode documents
- **[[*Org Modern Indent][org-modern-indent]]**: Visual indentation for org-mode
- **[[*Fixed Pitch Mode][fixed-pitch-mode]]**: Forces fixed-width font for specific modes and contexts

*** Org Mode & Note Taking
**** Core Org Mode
- **[[*Org Mode][org-mode]]**: Powerful markup language and document authoring system

**** Core Org Extensions
- **[[*Org Cliplink][org-cliplink]]**: URL insertion from clipboard
- **[[*Org Roam][org-roam]]**: Zettelkasten-style note-taking with backlinks
- **[[*Org Appear][org-appear]]**: Show markup when cursor is on it
- **[[*Org Download][org-download]]**: Drag-and-drop image support
- **[[*Org Web Tools][org-web-tools]]**: Web utilities for org-mode
- **[[*Org QL][org-ql]]**: SQL-like queries for org files
- **[[*Org Contrib][org-contrib]]**: Additional org-mode features
- **[[*Org Popup Posframe][org-popup-posframe]]**: Display org-mode popups in posframe
- **[[*Org Eldoc][org-eldoc]]**: Function signature display in org-mode
- **[[*Org Tempo][org-tempo]]**: Built-in template expansion system
- **[[*Org Habit][org-habit]]**: Built-in habit tracking functionality
- **[[*Org Phscroll][org-phscroll]]**: Smooth scrolling for enhanced org-mode navigation

**** Code Execution
- **[[*Ob Napkin][ob-napkin]]**: Diagram support in org-babel
- **[[*Ob Rust][ob-rust]]**: Rust execution in org-babel
- **[[*Ob TypeScript][ob-typescript]]**: TypeScript execution in org-babel
- **[[*Ob HTTP][ob-http]]**: HTTP requests in org-babel
- **[[*Ob Restclient][ob-restclient]]**: REST API testing in org-babel

*** Terminal & System Integration
- **[[*VTerm][vterm]]**: Full-featured terminal emulator using libvterm
- **[[*Multi-VTerm][multi-vterm]]**: Multiple vterm sessions for better terminal management
- **[[*Eat][eat]]**: Terminal emulator written in Emacs Lisp with eshell integration
- **[[*Shell Here][shell-here]]**: Convenient functions to open shell in current directory
- **[[*Docker][docker]]**: Docker interface for container management
- **[[*Claude Code][claude-code]]**: Claude AI integration with seamless Emacs workflow and project isolation

*** Additional Tools
- **[[*Undo-Fu-Session][undo-fu-session]]**: Persistent undo history across Emacs sessions
- **[[*Vundo][vundo]]**: Modern visual undo system with tree-like interface
- **[[*PDF Tools][pdf-tools]]**: Superior PDF viewing in Emacs
- **[[*Apheleia][apheleia]]**: Modern code formatting that works with LSP
- **[[*Bitwarden][bitwarden]]**: Password management integration
- **[[*Deadgrep][deadgrep]]**: Fast ripgrep interface with better performance than built-in grep commands
- **[[*Mode Line Bell][mode-line-bell]]**: Visual bell notification instead of audio beep for better user experience

** Key Features
- **Leader Key System**: Space-based keybindings with which-key integration
- **Noweb Templating**: All configuration sections (except Bootstrap) use noweb templating for maximum flexibility. This separates documentation from code generation, allowing you to reorder sections in init.el without touching the documentation structure. Each section can be individually disabled for debugging and moved to optimal positions in the generated file.
- **Multi-Machine Support**: Site-specific configurations for different systems
- **Evil Integration**: Vim-like editing experience across all modes
- **Modern UI**: Icons, colors, and visual feedback throughout
- **Development Ready**: Complete IDE-like features for multiple languages
- **Debug Mode**: Toggle individual packages on/off with `C-c z` (place cursor on any heading) for debugging startup issues, package conflicts, or performance problems

* Bootstrap
** Early Init
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/early-init.el
;; -*- lexical-binding: t -*-

;; Increase garbage collection threshold for faster startup
(setq gc-cons-threshold (* 500 1024 1024))

;; Disable package.el in favor of straight.el
(setq package-enable-at-startup nil)

;; Disable native compilation warnings
(setq native-comp-async-report-warnings-errors nil)

;; Enable LSP plist mode for better performance
(setenv "LSP_USE_PLISTS" "true")

;; Redirect native compilation cache directory
(when (fboundp 'startup-redirect-eln-cache)
  (startup-redirect-eln-cache
   (expand-file-name ".cache/eln-cache/" user-emacs-directory)))

;; Handle trampoline directory to prevent default location usage
(when (boundp 'native-comp-enable-subr-trampolines)
  (setq native-comp-enable-subr-trampolines
        (expand-file-name ".cache/trampolines/" user-emacs-directory)))
#+END_SRC

** Main Init Header
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-

;; Test Modern Emacs Configuration
;; Generated from init.org

;; Debug toggle function
(defvar qq/debug-mode-enabled nil
  "Track whether debug mode is currently enabled.")

(defun qq/toggle-debug ()
  "Toggle debug mode on/off."
  (interactive)
  (setq qq/debug-mode-enabled (not qq/debug-mode-enabled))

  (if qq/debug-mode-enabled
      (progn
        ;; Enable debug mode
        (setq debug-on-error t)
        (setq debug-on-quit nil)  ; Disable debug-on-quit to fix vertico quit issues
        (setq use-package-verbose t)
        (setq use-package-debug t)
        (setq use-package-compute-statistics t)
        (setq message-log-max 10000)
        (message "Debug mode ENABLED"))
    (progn
      ;; Disable debug mode
      (setq debug-on-error nil)
      (setq debug-on-quit nil)
      (setq use-package-verbose nil)
      (setq use-package-debug nil)
      (setq use-package-compute-statistics nil)
      (message "Debug mode DISABLED"))))

;; Enable debug mode by default
;; (qq/toggle-debug)

  ;;; Restore GC threshold after startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold (* 16 1024 1024))))
#+END_SRC

** Bootstrap straight.el
#+BEGIN_SRC emacs-lisp
;; Configure straight.el to use cache directory (define early)
(defvar qq/cache-directory (concat user-emacs-directory ".cache/"))
(setq straight-base-dir qq/cache-directory)

;; Set native compilation cache directory early (before straight.el loads)
(setq native-comp-eln-load-path (list (concat qq/cache-directory "eln-cache/")))
(when (fboundp 'startup-redirect-eln-cache)
  (startup-redirect-eln-cache (concat qq/cache-directory "eln-cache/")))

;; Bootstrap straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" straight-base-dir))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Use built-in org-mode to avoid straight.el build issues
(add-to-list 'straight-built-in-pseudo-packages 'org)

;; Install use-package via straight.el
(straight-use-package 'use-package)

;; Configure use-package to use straight.el by default
(setq straight-use-package-by-default t)
#+END_SRC

** Utility Functions
#+BEGIN_SRC emacs-lisp
;; Utility function to toggle :tangle no property for org headings
(defun qq/toggle-heading-tangle ()
  "Toggle the :tangle no property and ignore tag for the current org heading.
  If the heading already has :tangle no, remove it and the ignore tag.
  If it doesn't have the property, add it and the ignore tag."
  (interactive)
  (save-excursion
    (org-back-to-heading t)
    (let ((current-prop (org-entry-get (point) "header-args"))
          (current-tags (org-get-tags)))
      (if (and current-prop (string-match-p ":tangle no" current-prop))
          ;; Remove the tangle no property and ignore tag
          (progn
            (org-delete-property "header-args")
            (org-toggle-tag "ignore" 'off)
            (message "Removed :tangle no and ignore tag from heading"))
        ;; Add the tangle no property and ignore tag
        (progn
          (org-set-property "header-args" ":tangle no")
          (org-toggle-tag "ignore" 'on)
          (message "Added :tangle no and ignore tag to heading"))))))

(defun qq/add-heading-tangle-no ()
  "Add :tangle no property and ignore tag to the current org heading."
  (interactive)
  (save-excursion
    (org-back-to-heading t)
    (org-set-property "header-args" ":tangle no")
    (org-toggle-tag "ignore" 'on)
    (message "Added :tangle no and ignore tag to heading")))

(defun qq/remove-heading-tangle-no ()
  "Remove :tangle no property and ignore tag from the current org heading."
  (interactive)
  (save-excursion
    (org-back-to-heading t)
    (org-delete-property "header-args")
    (org-toggle-tag "ignore" 'off)
    (message "Removed :tangle no and ignore tag from heading")))

;; Org-mode specific keybinding for toggle function
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-c z") 'qq/toggle-heading-tangle))
#+END_SRC

** Noweb Templates
*** Keybinding Generation
#+NAME: gen-keys
#+BEGIN_SRC emacs-lisp :var tname=1 :var mode="leader" :results output :tangle no :exports none :colnames yes
(dolist (row tname)
  (unless (string-match "^<[[:digit:]]+>$" (format "%s" (car row)))
    (let ((key (nth 0 row))
          (command (nth 1 row))
          (description (nth 2 row)))
      (when (and key command description)
        (cond
         ;; Leader key bindings
         ((string= mode "leader")
          (princ (format "\"%s\" '(%s :wk \"%s\")\n" key command description)))
         ;; Use-package bind format
         ((string= mode "bind")
          (princ (format "(\"%s\" . %s)\n" key command)))
         ;; Global general-def format
         ((string= mode "global")
          (princ (format "\"%s\" '%s\n" key command)))
         ;; Org mode keybindings
         ((string= mode "org")
          (princ (format "(general-def 'normal org-mode-map \"%s\" '%s)\n" key command)))
         ;; Plain general-def with custom state and prefix (no quote)
         ((string= mode "plain-gen")
          (princ (format "\"%s\" %s\n" key command)))
         ;; General-def with custom state and prefix
         ((string= mode "general")
          (princ (format "\"%s\" '%s\n" key command)))
         ;; Local mode keybindings (for mode-specific maps)
         ((string= mode "local-mode")
          (princ (format "\"%s\" '%s\n" key command)))
         ;; Evil local key bindings (for evil-local-set-key)
         ((string= mode "evil-local")
          (princ (format "(evil-local-set-key 'normal \"%s\" '%s)\n" key command))))))))
#+END_SRC

#+NAME: gen-use-pkg
#+BEGIN_SRC emacs-lisp :var package="example" :var after="" :var straight="" :var strght_gh="" :var demand="" :var defer="" :var hook="" :var init="" :results output :tangle no :exports none
(let ((header (format "(use-package %s" package))
      (straight-line (cond
                      ((not (string= straight "")) (format "\n  :straight %s" straight))
                      ((not (string= strght_gh "")) (format "\n  :straight (:host github :repo \"%s\")" strght_gh))
                      (t "")))
      (after-line (if (string= after "") "" (format "\n  :after %s" after)))
      (demand-line (if (string= demand "") "" (format "\n  :demand %s" demand)))
      (defer-line (if (string= defer "") "" (format "\n  :defer %s" defer)))
      (hook-line (if (string= hook "") "" (format "\n  :hook %s" hook)))
      (init-line (if (string= init "") "" (format "\n  :init\n  %s" init)))
      (config-line "\n  :config"))
  (princ (concat header straight-line after-line demand-line defer-line hook-line init-line config-line)))
#+END_SRC

#+NAME: gen-pkg-end
#+BEGIN_SRC emacs-lisp :var close_paren=")" :results output :tangle no :exports none
(princ (format "%s" close_paren))
#+END_SRC

* Key Bindings
** Evil Leader Key Bindings <SPC>
Evil mode essential keybindings for vim-like navigation and editing. → [[*General Package][Generated Code]]
#+NAME: evil-keys
| Key | Command                        | Description        |
|-----+--------------------------------+--------------------|
| d e | qq/toggle-debug                | Toggle debug mode  |
| TAB | :keymap tab-prefix-map         | Tab                |
| w   | :keymap evil-window-map        | Window             |
| h   | :keymap help-map               | Help               |

*** Multi-VTerm Leader Key Bindings
Multi-VTerm session management keybindings. → [[*General Package][Generated Code]]
#+NAME: multi-vterm-keys
| Key | Command                      | Description            |
|-----+------------------------------+------------------------|
| t t | multi-vterm                  | Create new vterm       |
| t p | multi-vterm-prev             | Previous vterm         |
| t N | multi-vterm-next             | Next vterm             |
| t d | multi-vterm-dedicated-toggle | Toggle dedicated vterm |

*** Consult/Vertico Leader Key Bindings
Consult completion and search command keybindings. → [[*General Package][Generated Code]]
#+NAME: consult-keys
| Key | Command                  | Description                         |
|-----+--------------------------+-------------------------------------|
| SPC | execute-extended-command | Vertico M-x version                 |
| .   | find-file                | Forward to 'find file'              |
| /   | consult-isearch-history  | Show search history                 |
| h a | consult-apropos          | Consult apropos                     |
| b c | consult-buffer           | Show list of buffers                |
| b b | switch-to-buffer         | Default way to show list of buffers |
| b k | persp-kill-buffer*       | Kill buffer in perspective          |
| b o | consult-other-window     | Buffer in other window              |
| b F | consult-other-frame      | Buffer in other frame               |
| g y | consult-git-grep         | Git grep                            |
| f f | consult-find             | Find file                           |
| f r | consult-recent-file      | Recent file                         |
| f R | consult-ripgrep          | Ripgrep search                      |
| s s | consult-line             | Search line                         |
| s g | consult-grep             | Search grep                         |
| i o | consult-outline          | Lists of faces with preview         |
| i h | consult-history          | Load selected Emacs Lisp Library    |
| i r | consult-register         | Consult register                    |
| i b | consult-bookmark         | Consult bookmark                    |
| i m | consult-mark             | Consult mark                        |
| i l | consult-line             | Consult line                        |
| i i | consult-imenu            | Consult imenu                       |
| i e | consult-error            | Consult error                       |
| i c | consult-multi-occur      | Consult multi-occur                 |
| i n | consult-org-heading      | Consult org heading                 |
| y   | consult-yank-pop         | Consult yank pop                    |
| x x | vertico-repeat           | Return to last Vertico state        |

*** Magit Leader Key Bindings
Magit version control keybindings for Git workflow management. → [[*General Package][Generated Code]]
#+NAME: magit-keys
| Key | Command                    | Description                      |
|-----+----------------------------+----------------------------------|
| g s | magit-status               | Git status                       |
| g B | magit-branch               | Git branch                       |
| g b | magit-blame                | Git blame                        |
| g l | magit-log                  | Git log                          |
| g f | magit-fetch                | Git fetch                        |
| g t | git-timemachine            | Git Timemachine                  |
| g p | magit-push                 | Git push                         |
| g J | diff-hl-show-hunk-next     | Show next hunk and manage it     |
| g K | diff-hl-show-hunk-previous | Show previous hunk and manage it |
| g r | diff-hl-show-hunk          | Show menu to manage hunk         |
| g j | diff-hl-next-hunk          | Show next hunk                   |
| g k | diff-hl-previous-hunk      | Show previous hunk               |

*** VC Msg Leader Key Bindings
Version control message display keybindings. → [[*General Package][Generated Code]]
#+NAME: vc-msg-keys
| Key | Command      | Description                    |
|-----+--------------+--------------------------------|
| g m | vc-msg-show  | Show commit message for line   |

*** Navigation and Text Editing Leader Key Bindings
**** Navigation Leader Key Bindings
Navigation keybindings for jumping and region manipulation. → [[*General Package][Generated Code]]
#+NAME: navigation-keys
| Key  | Command                | Description                      |
|------+------------------------+----------------------------------|
| j j  | avy-goto-char-timer    | Jump to character with timer     |
| j l  | avy-goto-line          | Jump to line                     |
| j w  | avy-goto-word-1        | Jump to word                     |
| j c  | avy-goto-char          | Jump to character                |
| v    | expand-region          | Expand region by semantic units  |
| C-v  | er/contract-region     | Contract region                  |

**** Text Editing Leader Key Bindings
Text editing and error checking keybindings. → [[*General Package][Generated Code]]
#+NAME: text-editing-keys
| Key | Command                 | Description             |
|-----+-------------------------+-------------------------|
| e l | flycheck-list-errors    | List flycheck errors    |
| e n | flycheck-next-error     | Next flycheck error     |
| e p | flycheck-previous-error | Previous flycheck error |
| e c | flycheck-clear          | Clear flycheck errors   |

**** Terminal Leader Key Bindings
Terminal and shell access keybindings. → [[*General Package][Generated Code]]
#+NAME: terminal-keys
| Key | Command     | Description              |
|-----+-------------+--------------------------|
| t n | vterm       | Open terminal in vterm   |
| t e | eat         | Open eat terminal        |
| t s | shell-here  | Open shell here          |
| t h | eshell      | Open eshell              |

**** File Management Leader Key Bindings
File browser and tree navigation keybindings. → [[*General Package][Generated Code]]
#+NAME: file-management-keys
| Key | Command                    | Description                |
|-----+----------------------------+----------------------------|
| f s | dired-sidebar-toggle-sidebar| Toggle file sidebar       |
| f t | treemacs                   | Open treemacs file tree    |
| f d | dired                      | Open dired                 |
| f j | dired-jump                 | Jump to file in dired      |

*** Helpful Leader Key Bindings
Helpful enhanced help system keybindings. → [[*General Package][Generated Code]]
#+NAME: helpful-keys
| Key | Command                      | Description                  |
|-----+------------------------------+------------------------------|
| h C | helpful-callable             | Help for function/callable   |
| h v | helpful-variable             | Help for variable            |
| h k | helpful-key                  | Help for key binding         |
| h c | helpful-command              | Help for command             |
| h f | describe-face                | Describe face at point       |
| h M | helpful-macro                | Help for macro               |
| h m | describe-mode                | Describe current mode        |
| h g | general-describe-keybindings | Describe general keybindings |
| h . | helpful-at-point             | Help for thing at point      |
| h x | describe-char                | Describe character           |

*** Restart Emacs Leader Key Bindings
Emacs restart and reload keybindings. → [[*General Package][Generated Code]]
#+NAME: restart-emacs-keys
| Key | Command           | Description           |
|-----+-------------------+-----------------------|
| x r | restart-emacs     | Restart Emacs session |
| x u | straight-pull-all | Upgrade all packages  |

*** Docker Leader Key Bindings
Docker container management keybindings. → [[*General Package][Generated Code]]
#+NAME: docker-keys
| Key     | Command                | Description                    |
|---------+------------------------+--------------------------------|
| d c     | docker-containers      | Manage Docker containers       |
| d i     | docker-images          | Manage Docker images           |
| d n     | docker-networks        | Manage Docker networks         |
| d v     | docker-volumes         | Manage Docker volumes          |

*** Claude Code Leader Key Bindings
Claude Code AI integration keybindings. → [[*General Package][Generated Code]]
#+NAME: claude-code-keys
| Key | Command                             | Description                                       |
|-----+-------------------------------------+---------------------------------------------------|
| a r | claude-code-ide-menu                | Open transient menu with all Claude Code commands |
| a s | claude-code-ide-emacs-tools-setup   | Set up built-in MCP tools (e.g. xref, project)    |
| a d | claude-code-ide                     | Start Claude Code for the current project         |
| a q | claude-code-ide-continue            | Continue most recent conversation in directory    |
| a w | claude-code-ide-resume              | Resume Claude Code with previous conversation     |
| a e | claude-code-ide-stop                | Stop Claude Code for the current project          |
| a b | claude-code-ide-switch-to-buffer    | Switch to project’s Claude buffer                 |
| a l | claude-code-ide-list-sessions       | List all active Claude Code sessions and switch   |
| a g | claude-code-ide-check-status        | Check if Claude Code CLI is installed and working |
| a i | claude-code-ide-insert-at-mentioned | Send selected text to Claude prompt               |
| a x | claude-code-ide-send-escape         | Send escape key to Claude terminal                |
| a n | claude-code-ide-insert-newline      | Insert newline in Claude prompt (sends \ + Enter) |
| a t | claude-code-ide-toggle              | Toggle visibility of Claude Code window           |
| a b | claude-code-ide-show-debug          | Show the debug buffer with WebSocket messages     |
| a f | claude-code-ide-clear-debug         | Clear the debug buffer                            |

*** Org Mode Leader Key Bindings
Org-mode document and task management keybindings. → [[*General Package][Generated Code]]
#+NAME: org-leader-keys
| Key | Command            | Description           |
|-----+--------------------+-----------------------|
| x f | org-roam-node-find | Find note in org roam |

*** Projectile Leader Key Bindings
Projectile project management keybindings. → [[*General Package][Generated Code]]
#+NAME: projectile-keys
| Key | Command                    | Description     |
|-----+----------------------------+-----------------|
| ,   | projectile-find-file       | Find file       |
| f a | projectile-find-other-file | Find other file |

***** Vundo Leader Key Bindings
Vundo visual undo system keybindings. → [[*General Package][Generated Code]]
#+NAME: vundo-keys
| Key | Command | Description |
|-----+---------+-------------|
| u   | vundo   | Visual undo |

*** Treesit Fold Leader Key Bindings
Treesit-based code folding keybindings. → [[*General Package][Generated Code]]
#+NAME: treesit-fold-keys
| Key     | Command                    | Description                |
|---------+----------------------------+----------------------------|
| F f     | treesit-fold-toggle        | Toggle fold at point       |
| F a     | treesit-fold-close-all     | Close all folds            |
| F o     | treesit-fold-open-all      | Open all folds             |
| F c     | treesit-fold-close         | Close fold at point        |
| F O     | treesit-fold-open          | Open fold at point         |

*** Default Text Scale Leader Key Bindings
Global text scaling keybindings for all buffers. → [[*General Package][Generated Code]]
#+NAME: default-text-scale-keys
| Key     | Command                     | Description              |
|---------+-----------------------------+--------------------------|
| +       | default-text-scale-increase | Increase text scale      |
| -       | default-text-scale-decrease | Decrease text scale      |
| _       | default-text-scale-reset    | Reset text scale         |

*** Recipe Keybindings
Custom recipe and utility function keybindings. → [[*General Package][Generated Code]]
#+NAME: recipes-keys
| Key | Command                        | Description              |
|-----+--------------------------------+--------------------------|
| x a | display-ansi-colors            | Apply ANSI colors buffer |
| x s | ansi-color-apply-on-region-int | Apply ANSI colors region |
| x d | diff-region-tag-selected-as-a  | Diff regions (step 1)    |
| x D | diff-region-compare-with-b     | Diff regions (step 2)    |
| x F | qq/unfill-paragraph            | Unfill paragraph         |

*** Popper Leader Key Bindings
Popup window management keybindings for temporary buffer access. → [[*General Package][Generated Code]]
#+NAME: popper-keys
| Key | Command                      | Description              |
|-----+------------------------------+--------------------------|
| p   | :ignore t                    | popper                   |
| p p | popper-toggle                | Toggle latest popup      |
| p c | popper-cycle                 | Cycle through popups     |
| p k | popper-kill-latest-popup     | Kill latest popup        |
| p T | popper-toggle-type           | Toggle buffer type       |
| p r | qq/popper-toggle-right-side  | Toggle popup right side  |
| p b | qq/popper-toggle-split-below | Toggle popup split below |
| p R | qq/popper-cycle-right-side   | Cycle right-side popups  |
| p B | qq/popper-cycle-split-below  | Cycle split-below popups |

** Global Key Bindings
Window navigation and management keybindings for efficient workspace control. → [[*General Package][Generated Code]]
#+NAME: window-keys
| Key   | Command                          | Description               |
|-------+----------------------------------+---------------------------|
| C-h   | windmove-left                    | Move to left window       |
| C-j   | windmove-down                    | Move to down window       |
| C-k   | windmove-up                      | Move to up window         |
| C-l   | windmove-right                   | Move to right window      |
| s-u   | (:keymap universal-argument-map) | Universal-Argument        |
| C-w v | split-window-right               | Split window vertically   |
| C-w s | split-window-below               | Split window horizontally |
| C-w d | delete-window                    | Delete current window     |
| C-w o | delete-other-windows             | Delete other windows      |
| C-w H | windmove-swap-states-left        | Swap with left window     |
| C-w J | windmove-swap-states-down        | Swap with down window     |
| C-w K | windmove-swap-states-up          | Swap with up window       |
| C-w L | windmove-swap-states-right       | Swap with right window    |
| C-S-g | qq/show-file-name                | Display full path         |

*** Perspective Global Keybinding
#+NAME: persp-keys
| Key   | Command                    | Description                    |
|-------+----------------------------+--------------------------------|
| <f6>  | persp-next                 | Switch to next perspective     |
| <f5>  | persp-prev                 | Switch to previous perspective |

** Normal Bindings
Global normal mode keybindings for general editor operations. → [[*General Package][Generated Code]]
#+NAME: normal-keys
| Key | Command                 | Description                     |
|-----+-------------------------+---------------------------------|
| [ * | (kbd "ddkP")            | Move current line up one line   |
| ] * | (kbd "ddp")             | Move current line down one line |
| [ = | 'previous-buffer        | Jump to the previous buffer     |
| ] = | 'next-buffer            | Jump to the next buffer         |
| "+" | 'evil-numbers/inc-at-pt | Increment number at cursor      |
| "-" | 'evil-numbers/dec-at-pt | Decrement number at cursor      |
| Y   | (kbd "y$")              | Yank from cursor to end of line |

*** Avy Keybindings
Avy jump navigation keybindings for fast character and line movement. → [[*General Package][Generated Code]]
#+NAME: avy-keys
| Key | Command              | Description                  |
|-----+----------------------+------------------------------|
| g z | 'avy-goto-char-timer | Jump to character with timer |
| g c | #'casual-avy-tmenu   | Open casual avy              |

*** Fancy Compilation Keybindings Table
Fancy compilation navigation and control keybindings. → [[*Fancy Compilation Package][Generated Code]]
#+NAME: fancy-compilation-keys
| Key   | Command                    | Description                           |
|-------+----------------------------+---------------------------------------|
| r     | recompile                  | Recompile the current compilation     |
| TAB   | compilation-next-error     | Jump to next error                    |
| S-TAB | compilation-previous-error | Jump to previous error                |
| RET   | compile-goto-error         | Jump to the error line in source code |
| n     | compilation-next-error     | Next error (alternative)              |
| p     | compilation-previous-error | Previous error (alternative)          |
| q     | quit-window                | Quit compilation window               |

*** Dired Evil Mode Keybindings Table
Comprehensive dired keybindings for evil normal and visual modes. → [[*Dired Plus Package][Generated Code]]
#+NAME: evil-dired-keys
| Combo         | Command                            | Description                  |
|---------------+------------------------------------+------------------------------|
| <tab>         | dired-subtree-toggle               | Toggle sub folder            |
| /             | casual-dired-search-replace-tmenu  | Transient search menu        |
| q             | quit-window                        | Quit dired                   |
| nn            | dired-narrow                       | Narrow by pattern            |
| nx            | dired-narrow-regexp                | Narrow by regex              |
| j             | diredp-next-line                   | Jump next line               |
| k             | dired-previous-line                | Jump previous line           |
| [mouse-2]     | dired-mouse-find-file-other-window | Open file other-window       |
| [follow-link] | mouse-face                         | Follow link                  |
| #             | dired-flag-auto-save-files         | Mark auto-save files         |
| .             | dired-clean-directory              | Clean directory              |
| ~             | dired-flag-backup-files            | Mark backup files            |
| A             | dired-do-find-regexp               | Search marked files          |
| C             | dired-do-copy                      | Copy marked files            |
| B             | dired-do-byte-compile              | Byte-compile marked files    |
| D             | dired-do-delete                    | Delete marked files          |
| gc            | dired-do-chgrp                     | Change group                 |
| H             | dired-do-hardlink                  | Hardlink marked files        |
| L             | dired-do-load                      | Load marked files            |
| M             | dired-do-chmod                     | Change file permissions      |
| O             | dired-do-chown                     | Change file ownership        |
| P             | dired-do-print                     | Print marked files           |
| Q             | dired-do-find-regexp-and-replace   | Regex replace files          |
| R             | dired-do-rename                    | Rename marked files          |
| S             | dired-do-symlink                   | Symlink marked files         |
| T             | dired-do-touch                     | Touch marked files           |
| X             | dired-do-shell-command             | Shell on marked files        |
| Z             | dired-do-compress                  | Compress marked files        |
| c             | dired-do-compress-to               | Compress to archive          |
| !             | dired-do-shell-command             | Shell on file                |
| &             | dired-do-async-shell-command       | Async shell command          |
| =             | dired-diff                         | Compare files                |
| M-C-?         | dired-unmark-all-files             | Unmark all files             |
| M-C-n         | dired-next-subdir                  | Jump next subdirectory       |
| M-C-p         | dired-prev-subdir                  | Jump previous subdirectory   |
| M-{           | dired-prev-marked-file             | Previous marked file         |
| M-}           | dired-next-marked-file             | Next marked file             |
| %u            | dired-upcase                       | Upcase file name             |
| %l            | dired-downcase                     | Downcase file name           |
| %d            | dired-flag-files-regexp            | Flag files regex             |
| %g            | dired-mark-files-containing-regexp | Mark files regex             |
| %m            | dired-mark-files-regexp            | Mark files regex             |
| %r            | dired-do-rename-regexp             | Rename files regex           |
| %C            | dired-do-copy-regexp               | Copy files regex             |
| %H            | dired-do-hardlink-regexp           | Hardlink files regex         |
| %R            | dired-do-rename-regexp             | Rename files regex           |
| %S            | dired-do-symlink-regexp            | Symlink files regex          |
| %&            | dired-flag-garbage-files           | Flag garbage files           |
| **            | dired-mark-executables             | Mark executables             |
| */            | dired-mark-directories             | Mark directories             |
| *@            | dired-mark-symlinks                | Mark symlinks                |
| *%            | dired-mark-files-regexp            | Mark files regex             |
| *(            | dired-mark-sexp                    | Mark sexp files              |
| *.            | dired-mark-extension               | Mark by extension            |
| *O            | dired-mark-omitted                 | Mark omitted files           |
| *c            | dired-change-marks                 | Change marks                 |
| *s            | dired-mark-subdir-files            | Mark subdirectory files      |
| *m            | dired-mark                         | Mark file                    |
| *u            | dired-unmark                       | Unmark file                  |
| *?            | dired-unmark-all-files             | Unmark all files             |
| *!            | dired-unmark-all-marks             | Unmark all marks             |
| U             | dired-unmark-all-marks             | Unmark all marks             |
| * <delete>    | dired-unmark-backward              | Unmark backward              |
| * C-n         | dired-next-marked-file             | Next marked file             |
| * C-p         | dired-prev-marked-file             | Previous marked file         |
| *t            | dired-toggle-marks                 | Toggle marks                 |
| a             | dired-find-alternate-file          | Find alternate file          |
| d             | dired-flag-file-deletion           | Flag file deletion           |
| gf            | dired-find-file                    | Find file                    |
| C-m           | dired-find-file                    | Find file                    |
| gr            | revert-buffer                      | Revert dired buffer          |
| i             | dired-toggle-read-only             | Toggle read-only             |
| I             | dired-maybe-insert-subdir          | Insert subdirectory          |
| J             | dired-goto-file                    | Go to file                   |
| K             | dired-do-kill-lines                | Kill lines                   |
| r             | dired-do-redisplay                 | Redisplay dired              |
| m             | dired-mark                         | Mark file                    |
| s             | casual-dired-sort-by-tmenu         | Sort files                   |
| t             | dired-toggle-marks                 | Toggle marks                 |
| u             | dired-unmark                       | Unmark file                  |
| W             | browse-url-of-dired-file           | Browse file URL              |
| x             | dired-do-flagged-delete            | Delete flagged files         |
| f             | dired-show-file-type               | Show file type               |
| Y             | dired-copy-filename-as-kill        | Copy filename                |
| +             | dired-create-directory             | Create directory             |
| <return>      | dired-find-file                    | Open file                    |
| S-<return>    | dired-find-file-other-window       | Open file other-window       |
| M-<return>    | dired-display-file                 | Display file                 |
| gO            | dired-find-file-other-window       | Open file other-window       |
| go            | dired-view-file                    | View file                    |
| o             | dired-sort-toggle-or-edit          | Toggle sort order            |
| gj            | dired-next-dirline                 | Next directory line          |
| gk            | dired-prev-dirline                 | Previous directory line      |
| [[            | dired-tree-up                      | Tree up directory            |
| ]]            | dired-next-dirline                 | Next directory line          |
| <             | dired-prev-dirline                 | Previous directory line      |
| >             | dired-next-dirline                 | Next directory line          |
| ^             | dired-up-directory                 | Up directory                 |
| gh            | dired-hide-subdir                  | Hide subdirectory            |
| M-$           | dired-hide-all                     | Hide all subdirectories      |
| (             | dired-hide-details-mode            | Hide details                 |
| )             | dired-omit-mode                    | Toggle omit mode             |
| M-s a C-s     | dired-do-isearch                   | Incremental search files     |
| M-s a M-C-s   | dired-do-isearch-regexp            | Regex search files           |
| M-s f C-s     | dired-isearch-filenames            | Incremental search filenames |
| M-s f M-C-s   | dired-isearch-filenames-regexp     | Regex search filenames       |
| g?            | dired-summary                      | Show summary                 |
| <delete>      | dired-unmark-backward              | Unmark backward              |
| C-o           | casual-dired-tmenu                 | Transient menu               |
| C-t d         | image-dired-display-thumbs         | Display image thumbnails     |
| C-t t         | image-dired-tag-files              | Tag image files              |
| C-t r         | image-dired-delete-tag             | Delete image tags            |
| C-t j         | image-dired-jump-thumbnail-buffer  | Jump thumbnail buffer        |
| C-t i         | image-dired-dired-display-image    | Display image                |
| C-t x         | image-dired-dired-display-external | Display external image       |
| C-t a         | image-dired-display-thumbs-append  | Append image thumbnails      |
| C-t .         | image-dired-display-thumb          | Display single thumbnail     |
| C-t c         | image-dired-dired-comment-files    | Comment image files          |

*** Diff HL Key Bindings
Diff highlighting keybindings for version control visualization. → [[*Diff HL Package][Generated Code]]
#+NAME: diff-hl-keys
| Key | Command                    | Description             |
|-----+----------------------------+-------------------------|
| j   | diff-hl-show-hunk-next     | Jump to next change     |
| k   | diff-hl-show-hunk-previous | Jump to previous change |

*** Symbol Overlay Bindings
Symbol overlay keybindings for highlighting and navigation. → [[*General Package][Generated Code]]
#+NAME: symbol-overlay-keys
| Key       | Command                      | Description                 |
|-----------+------------------------------+-----------------------------|
| g SPC SPC | symbol-overlay-put           | Highlight symbol at point   |
| g SPC j   | symbol-overlay-jump-next     | Jump to next occurrence     |
| g SPC k   | symbol-overlay-jump-prev     | Jump to previous occurrence |
| g SPC r   | symbol-overlay-remove-all    | Remove all overlays         |
| g SPC q   | symbol-overlay-query-replace | Query replace symbol        |

*** Git Timemachine Mode Keybindings
#+NAME: git-timemachine-keys
| Key | Command                                | Description       |
|-----+----------------------------------------+-------------------|
| J   | git-timemachine-show-previous-revision | Previous revision |
| K   | git-timemachine-show-next-revision     | Next revision     |

*** Magit Status Mode Key Bindings
Magit status mode specific keybindings for evil normal mode. → [[*Magit Package][Generated Code]]
#+NAME: magit-status-keys
| Key | Command           | Description          |
|-----+-------------------+----------------------|
| v   | evil-visual-char  | Enter visual mode    |

** Local Bindings
*** Vertico Keybindings Table
Vertico completion interface keybindings. → [[*Vertico Package][Generated Code]]
#+NAME: vertico-keys
| Key           | Command                            | Description                    |
|---------------+------------------------------------+--------------------------------|
| C-r           | marginalia-cycle                   | Rotate visual information      |
| C-v           | vertico-multiform-vertical         | Vertical layout                |
| C-t           | vertico-multiform-grid             | Grid layout                    |
| C-u           | vertico-multiform-unobtrusive      | Unobtrusive layout             |
| C-z           | vertico-multiform-flat             | flat layout                    |
| C-q           | vertico-multiform-reverse          | Reverse style                  |
| C-o           | vertico-quick-exit                 | Quick exit completion          |
| M-e           | qq/vertico-quick-embark            | Custom quick embark            |
| C-j           | next-line-or-history-element       | Selects the next candidate     |
| C-k           | previous-line-or-history-element   | Selects the previous candidate |
| C-a           | minibuffer-beginning-of-buffer     | Selects the first candidate    |
| C-e           | end-of-buffer                      | Selects the last candidate     |
| C-b           | vertico-scroll-down                | Scrolls up                     |
| C-f           | vertico-scroll-up                  | Scrolls down                   |
| C-w           | kill-ring-save                     | Copy text                      |
| <escape>      | keyboard-escape-quit               | Cancel minibuffer              |
| C-d           | vertico-next-group                 | Next completion group          |
| C-c           | vertico-previous-group             | Previous completion group      |
| <backspace>   | vertico-directory-delete-char      | Delete char or go up directory |
| <C-backspace> | vertico-directory-delete-word      | Delete word in directory       |
| RET           | vertico-directory-enter            | Enter directory or file        |
| <backtab>     | vertico-quick-insert               | Quick insert completion        |
| TAB           | vertico-insert                     | Insert selection to text area  |
| ?             | minibuffer-completion-help         | Show completion help           |
| <C-return>    | minibuffer-force-complete-and-exit | Force complete and exit        |

*** Embark Keybindings Table
Embark contextual action keybindings. → [[*Embark Package][Generated Code]]
#+NAME: embark-keys
| Key  | Command    | Description                  |
|------+------------+------------------------------|
| <f7> | embark-dwim| Embark do-what-I-mean        |
| <f8> | embark-act | Apply embark-act on target   |

*** Org Mode Keybindings Table
Org-mode keybindings. → [[*Org Mode Keybindings][Generated Code]]

#+NAME: org-keys
| Key   | Command                      | Description                      |
|-------+------------------------------+----------------------------------|
| RET   | org-open-at-point            | Follow link at point             |
| TAB   | org-cycle                    | Toggle opening/closing heading   |
| <tab> | org-cycle                    | Toggle opening/closing heading   |
| C-c r | qq/save-tangle-reload-config | Save, tangle, and reload config  |
| >     | org-demote-subtree           | Demote heading and its children  |
| <     | org-promote-subtree          | Promote heading and its children |

* Packages
** Evil Mode
Complete vim emulation with modern undo system and extensive configuration. → [[*Evil Package][Generated Code]]
*** Evil Init Block
#+NAME: evil-init
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(setq evil-want-keybinding nil
      evil-want-integration t
      evil-symbol-word-search t
      evil-ex-search-vim-style-regexp t
      evil-search-module 'evil-search
      evil-magic 'very-magic
      evil-want-C-u-delete t
      evil-want-C-u-scroll t
      evil-undo-system 'undo-redo
      evil-respect-visual-line-mode t
      hs-minor-mode-map nil)
#+END_SRC

*** Evil Configuration Block
#+NAME: evil-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable evil mode globally
(evil-mode 1)

;; Configure evil initial states
(dolist (mode '((dired-mode . normal)
                (help-mode . emacs)
                (Custom-mode . emacs)
                (vterm-mode . emacs)
                (backtrace-mode . normal)))
  (evil-set-initial-state (car mode) (cdr mode)))
;; allow eldoc to trigger directly after changing modes
(eldoc-add-command #'evil-normal-state
                   #'evil-insert
                   #'evil-change
                   #'evil-delete
                   #'evil-replace)
#+END_SRC

*** General.el Configuration
Keybinding framework for consistent leader key management. → [[*General Package][Generated Code]]
#+NAME: general-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(general-evil-setup)
(general-auto-unbind-keys)

;; Set up leader key
;; (general-create-definer qq/leader-keys
;;   :states '(normal insert motion visual emacs)
;;   :keymaps 'override
;;   :prefix "SPC"
;;   :global-prefix "C-SPC")

(general-create-definer qq/leader-keys
  :states '(normal insert visual emacs)
  :keymaps 'override
  :prefix "SPC" ;; set leader
  :global-prefix "C-SPC") ;; access leader in insert mode

;; set up ',' as the local leader key
(general-create-definer qq/local-keys
  :states '(normal insert visual emacs)
  :keymaps 'override
  :prefix "," ;; set local leader
  :global-prefix "C-,") ;; access local leader in insert mode

;; Global window navigation keybindings will be added in Generated Code section
#+END_SRC

** Evil Extensions
Extensive evil-mode extensions for complete vim-like experience. → [[*Evil Extensions Packages][Generated Code]]
*** Evil Collection
Evil Collection provides evil-friendly bindings for many modes that don't have them by default. This is essential for a complete evil experience across all of Emacs. → [[*Evil Collection Package][Generated Code]]

**** Evil Collection Configuration Block
#+NAME: evil-collection-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable evil collection for better evil integration
(evil-collection-init)
:init
(setq evil-collection-magit-want-horizontal-movement t
      evil-collection-unimpaired-want-repeat-mode-integration t)
(add-hook 'org-agenda-mode-hook
          (lambda () (evil-collection-unimpaired-mode -1)))
#+END_SRC

*** Evil Org
Provides evil keybindings for org-mode with additional org-specific functionality like easy table navigation, heading movement, and org-aware text objects. → [[*Evil Org Package][Generated Code]]

**** Evil Org Configuration Block
#+NAME: evil-org-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable evil-org in agenda
(require 'evil-org-agenda)
(evil-org-agenda-set-keys)

;; Configure evil-org keybindings
(with-eval-after-load 'evil-org
  (evil-org-set-key-theme '(navigation insert textobjects additional calendar)))

;; Enable evil-org-mode for org-mode buffers
:hook (org-mode . (lambda () evil-org-mode))
#+END_SRC

*** Evil Surround
Provides vim-surround functionality for evil mode. Change surroundings with cs"', delete with ds", and add with ys. → [[*Evil Surround Package][Generated Code]]

**** Evil Surround Configuration Block
#+NAME: evil-surround-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(global-evil-surround-mode 1)

;; `s' for surround instead of `subtitute'
(general-def 'visual evil-surround-mode-map
  "s" 'evil-surround-region
  "S" 'evil-substitute)
:custom
(evil-surround-pairs-alist
 '((?\( . ("(" . ")"))
   (?\[ . ("[" . "]"))
   (?\{ . ("{" . "}"))

   (?\) . ("(" . ")"))
   (?\] . ("[" . "]"))
   (?\} . ("{" . "}"))

   (?< . ("<" . ">"))
   (?` . ("`" . "'"))
   (?> . ("<" . ">"))))
:hook (after-init . global-evil-surround-mode)
#+END_SRC

*** Evil Nerd Commenter
Better commenting support for evil mode with gcc, gc, and other comment operations. → [[*Evil Nerd Commenter Package][Generated Code]]

**** Evil Nerd Commenter Configuration Block
#+NAME: evil-nerd-commenter-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable evil-nerd-commenter
;; Key bindings: gcc (comment line), gc (comment operator)
(evilnc-default-hotkeys)
#+END_SRC

*** Evil Numbers
Increment and decrement numbers at point with C-a and C-x, just like in vim. → [[*Evil Numbers Package][Generated Code]]

**** Evil Numbers Configuration Block
#+NAME: evil-numbers-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable evil-numbers for number increment/decrement
;; C-a to increment, C-x to decrement
#+END_SRC

*** Evil Visualstar
Search for visual selection with * in visual mode, extending the standard vim behavior to work with selected text regions. → [[*Evil Visualstar Package][Generated Code]]

**** Evil Visualstar Configuration Block
#+NAME: evil-visualstar-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable evil-visualstar for visual selection search
;; Use * and # in visual mode to search for selection
#+END_SRC

*** Evil Matchit
Enhanced % command that works with more than just parentheses - HTML tags, if-endif blocks, etc. → [[*Evil Matchit Package][Generated Code]]

**** Evil Matchit Configuration Block
#+NAME: evil-matchit-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable global evil-matchit mode
(global-evil-matchit-mode 1)
#+END_SRC

*** Evil Exchange
Exchange text objects with gx. Mark first object with gx, then second object with gx to exchange them. → [[*Evil Exchange Package][Generated Code]]

**** Evil Exchange Configuration Block
#+NAME: evil-exchange-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable evil-exchange
(evil-exchange-install)
#+END_SRC

*** Evil Args
Provides text objects for function arguments. Use cia to change inner argument, dia to delete, via to select. → [[*Evil Args Package][Generated Code]]
Functionality
**** evil-inner-arg/evil-outer-arg
Select an inner/outer argument text object.

For example, cia transforms:
#+begin_src
function(ar|g1, arg2, arg3)
function(|, arg2, arg3)
#+end_src
or
#+begin_src
function(arg1, ar|g2, arg3)
function(arg1, |, arg3)
#+end_src

daa transforms:
#+begin_src
function(ar|g1, arg2, arg3)
function(|arg2, arg3)
#+end_src
or
#+begin_src
function(arg1, ar|g2, arg3)
function(arg1, |arg3)
#+end_src

**** evil-forward-arg/evil-backward-arg
Move the curser to the next/previous argument.
For example, successive presses of evil-forward-arg yield:
#+begin_src
function(ar|g1, arg2, arg3)
function(arg1, |arg2, arg3)
function(arg1, arg2, |arg3)
function(arg1, arg2, arg3|)
#+end_src

Successive presses of evil-backward-arg yield:
#+begin_src
function(arg1, arg2, ar|g3)
function(arg1, arg2, |arg3)
function(arg1, |arg2, arg3)
function(|arg1, arg2, arg3)
#+end_src

**** evil-jump-out-args
Moves to the beginning of the first object outside of the current argument context.
For example, pressing evil-jump-out-args yields:
#+begin_src
function(arg1, arg2, ar|g3)
|function(arg1, arg2, arg3)
#+end_src

Successive presses of evil-jump-out-args yield:
#+begin_src
if (x == y) {
    statement1;
    state|ment2;
}
if (|x == y) {
    statement1;
    statement2;
}
|if (x == y) {
    statement1;
    statement2;
}
#+end_src

**** Evil Args Configuration Block
#+NAME: evil-args-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Define evil-args text objects
(define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
(define-key evil-outer-text-objects-map "a" 'evil-outer-arg)

;; Bind evil-forward/backward-args
(define-key evil-normal-state-map "gl" 'evil-forward-arg)
(define-key evil-normal-state-map "gh" 'evil-backward-arg)

;; Bind evil-jump-out-args
(define-key evil-normal-state-map "gK" 'evil-jump-out-args)
#+END_SRC

*** Evil Snipe
Two-character search like vim-sneak. Use s{char}{char} to search forward, S{char}{char} to search backward. → [[*Evil Snipe Package][Generated Code]]

**** Evil Snipe Configuration Block
#+NAME: evil-snipe-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable evil-snipe mode
(evil-snipe-mode +1)
(evil-snipe-override-mode +1)

;; Configure evil-snipe settings
(setq evil-snipe-scope 'visible)
(setq evil-snipe-repeat-scope 'visible)
(setq evil-snipe-char-fold t)
#+END_SRC

*** Evil Multiedit
Multiple cursors implementation designed specifically for evil mode. More reliable than evil-mc. → [[*Evil Multiedit Package][Generated Code]]

**** Evil Multiedit Configuration Block
#+NAME: evil-multiedit-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable evil-multiedit
;; Key bindings will be set up automatically
#+END_SRC

*** Evil Goggles
Provides visual feedback for evil operations like delete, yank, paste, etc. → [[*Evil Goggles Package][Generated Code]]

**** Evil Goggles Configuration Block
#+NAME: evil-goggles-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable evil-goggles for visual feedback
(evil-goggles-mode)
;; Configure evil-goggles appearance
(setq evil-goggles-pulse t)
(setq evil-goggles-duration 0.200)
#+END_SRC

*** Evil Lion
Align text objects with gl and gL operators. → [[*Evil Lion Package][Generated Code]]

**** Evil Lion Configuration Block
#+NAME: evil-lion-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable evil-lion for alignment
;; gl{motion}{char} to align left
;; gL{motion}{char} to align right
#+END_SRC

*** Evil Quickscope
Enhanced character navigation with vim-quickscope-like highlighting for fast f/F/t/T commands. → [[*Evil Quickscope Package][Generated Code]]

**** Evil Quickscope Configuration Block
#+NAME: evil-quickscope-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(setq evil-quickscope-word-separator " -./")
;; Enable evil-quickscope for enhanced character navigation
(global-evil-quickscope-always-mode +1)
;; Configure quickscope colors for better visibility
(setq evil-quickscope-cross-lines t)
(setq evil-quickscope-smart t)
#+END_SRC

** Language Support
LanguagesServer Protocol and development tools. → [[*Language Support Packages][Generated Code]]
*** Treesit Auto
Automatically enables tree-sitter modes for supported languages and handles grammar installation. → [[*Treesit Auto Package][Generated Code]]

**** Treesit Auto Configuration Block
#+NAME: treesit-auto-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable treesit-auto for automatic tree-sitter mode detection
(treesit-auto-add-to-auto-mode-alist 'all)
(setq treesit-auto-install 'prompt)
(global-treesit-auto-mode)
#+END_SRC

*** LSP Mode
Language Server Protocol support providing IDE-like features including auto-completion, jump-to-definition, error checking, and refactoring across multiple programming languages. → [[*LSP Mode Package][Generated Code]]

**** LSP Mode Configuration Block
#+NAME: lsp-mode-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Performance optimization: use plists for better speed
(setq lsp-use-plists t)

;; Configure LSP settings
(setq lsp-completion-provider :capf
      lsp-session-file (concat qq/cache-directory "lsp-session-v1")
      lsp-auto-guess-root t
      lsp-keymap-prefix nil                          ; Prefix for LSP actions
      lsp-diagnostics-provider :flycheck
      lsp-keep-workspace-alive nil                     ; Close LSP server if all project buffers are closed
      lsp-idle-delay 0.5                               ; Debounce timer for `after-change-function'
      ;; core
      lsp-enable-xref t                                ; Use xref to find references
      lsp-auto-configure t                             ; Used to decide between current active servers
      lsp-eldoc-enable-hover t                         ; Display signature information in the echo area
      lsp-enable-dap-auto-configure t                  ; Debug support
      lsp-enable-file-watchers nil
      lsp-enable-folding nil                           ; I disable folding since I use origami
      lsp-enable-imenu t
      lsp-enable-indentation nil                       ; I use prettier
      lsp-enable-links nil                             ; No need since we have `browse-url'
      lsp-enable-on-type-formatting nil                ; Prettier handles this
      lsp-enable-suggest-server-download t             ; Useful prompt to download LSP providers
      lsp-enable-symbol-highlighting t                 ; Shows usages of symbol at point in the current buffer
      lsp-enable-text-document-color nil               ; This is Treesitter's job

      ;; completion
      lsp-completion-enable t
      lsp-completion-enable-additional-text-edit t     ; Ex: auto-insert an import for a completion candidate
      lsp-enable-snippet t                             ; Important to provide full JSX completion
      lsp-completion-show-kind t                       ; Optional
      ;; headerline
      lsp-headerline-breadcrumb-enable t               ; Optional, I like the breadcrumbs
      lsp-headerline-breadcrumb-enable-diagnostics nil ; Don't make them red, too noisy
      lsp-headerline-breadcrumb-enable-symbol-numbers nil
      lsp-headerline-breadcrumb-icons-enable nil
      ;; modeline
      lsp-modeline-code-actions-enable nil     ; Modeline should be relatively clean
      lsp-modeline-diagnostics-enable nil      ; Already supported through `flycheck'
      lsp-modeline-workspace-status-enable nil ; Modeline displays "LSP" when lsp-mode is enabled
      lsp-signature-doc-lines 1                ; Don't raise the echo area. It's distracting
      lsp-eldoc-render-all nil                 ; This would be very useful if it would respect `lsp-signature-doc-lines', currently it's distracting
      ;; lens
      lsp-lens-enable nil                      ; Optional, I don't need it
      ;; semantic
      lsp-semantic-tokens-enable nil           ; Related to highlighting, and we defer to treesitter
      )
;; LSP performance tuning
(setq read-process-output-max (* 1024 1024)) ; 1MB
(setq lsp-idle-delay 0.500)
(setq lsp-log-io nil) ; Disable logging for performance

;; suppress this annoying msg: Unknown notification: semgrep/rulesRefreshed
(add-to-list 'warning-suppress-log-types '(lsp-mode))
(add-to-list 'warning-suppress-types '(lsp-mode))

;; Map leader key to LSP prefix
(with-eval-after-load 'evil
  (general-def 'normal lsp-mode :definer 'minor-mode "SPC m" lsp-command-map)
  (general-def 'insert lsp-mode :definer 'minor-mode "C-SPC m" lsp-command-map)
  (general-def 'visual lsp-mode :definer 'minor-mode "SPC m" lsp-command-map)
  )

;; Helper function for conditional LSP loading
(defun qq/lsp-deferred-if-supported ()
  "Run lsp-deferred if it's a supported mode."
  (unless (derived-mode-p 'emacs-lisp-mode) (lsp-deferred)))

:hook
(php-mode . lsp-deferred)
(lsp-mode . evil-normalize-keymaps)
(lsp-mode . lsp-enable-which-key-integration)
#+END_SRC

**** LSP UI
Enhanced UI for LSP mode with sideline information, documentation popups, and improved visual feedback. → [[*LSP UI Package][Generated Code]]

***** LSP UI Configuration Block
#+NAME: lsp-ui-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure LSP UI
(setq lsp-ui-doc-enable t
      lsp-ui-doc-position 'at-point
      lsp-ui-doc-delay 2.0  ;; Increase delay before showing documentation
      lsp-ui-doc-max-height 70
      lsp-ui-doc-max-width 100
      lsp-ui-doc-header t
      lsp-ui-doc-include-signature t
      lsp-ui-doc-use-childframe t

      ;; If this is true then you can't see the docs in terminal
      lsp-ui-doc-use-webkit nil
      lsp-ui-flycheck-enable t

      lsp-ui-imenu-enable t
      lsp-ui-imenu-kind-position 'left

      lsp-ui-peek-enable t
      lsp-ui-peek-fontify 'on-demand ;; never, on-demand, or always
      lsp-ui-peek-list-width 50
      lsp-ui-peek-peek-height 20
      lsp-ui-peek-show-directory t

                                        ;inline right flush docs
      lsp-ui-sideline-enable t

      lsp-ui-sideline-ignore-duplicate t
      lsp-ui-sideline-show-code-actions nil
      lsp-ui-sideline-show-diagnostics t
      lsp-ui-sideline-show-hover nil      ; Sideline used only for diagnostics
      lsp-ui-sideline-diagnostic-max-lines 20 ; 20 lines since typescript errors can be quite big
      lsp-ui-sideline-show-symbol nil)

(add-hook 'lsp-ui-mode-hook
          (lambda ()
            (setq-local lsp-ui-doc-enable t
                        evil-lookup-func #'lsp-ui-doc-glance ; Makes K in evil-mode toggle the doc for symbol at point
                        lsp-ui-doc-show-with-cursor nil      ; Don't show doc when cursor is over symbol - too distracting
                        lsp-ui-doc-include-signature t       ; Show signature
                        lsp-ui-doc-position 'at-point)))

;; LSP Booster configuration
;; https://github.com/blahgeek/emacs-lsp-booster
(defun lsp-booster--advice-json-parse (old-fn &rest args)
  "Try to parse bytecode instead of json."
  (or
   (when (equal (following-char) ?#)
     (let ((bytecode (read (current-buffer))))
       (when (byte-code-function-p bytecode)
         (funcall bytecode))))
   (apply old-fn args)))

(advice-add (if (progn (require 'json)
                       (fboundp 'json-parse-buffer))
                'json-parse-buffer
              'json-read)
            :around
            #'lsp-booster--advice-json-parse)

(defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
  "Prepend emacs-lsp-booster command to lsp CMD."
  (let ((orig-result (funcall old-fn cmd test?)))
    (if (and (not test?)                             ;; for check lsp-server-present?
             (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
             lsp-use-plists
             (not (functionp 'json-rpc-connection))  ;; native json-rpc
             (executable-find "emacs-lsp-booster"))
        (progn
          (when-let ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
            (setcar orig-result command-from-exec-path))
          (message "Using emacs-lsp-booster for %s!" orig-result)
          (cons "emacs-lsp-booster" orig-result))
      orig-result)))

(advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)
#+END_SRC

*** DAP Mode
Debug Adapter Protocol implementation providing debugging capabilities for multiple languages with breakpoints, variable inspection, and step-through debugging. → [[*DAP Mode Package][Generated Code]]

**** DAP Mode Configuration Block
#+NAME: dap-mode-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable DAP mode only in programming modes
(add-hook 'prog-mode-hook #'dap-mode)

;; Enable additional DAP features only in programming modes
(add-hook 'prog-mode-hook #'dap-ui-mode)
(add-hook 'prog-mode-hook #'dap-ui-controls-mode)
(add-hook 'prog-mode-hook #'dap-ui-sessions-mode)
(add-hook 'prog-mode-hook #'dap-ui-breakpoints-mode)

;; Enable mouse hover support
(dap-tooltip-mode 1)

;; Configure DAP settings
(setq dap-auto-configure-features '(sessions locals controls tooltip))

;; Remove all insert mode keybindings from dap-ui-breakpoints-mode
(with-eval-after-load 'dap-ui
  (setq dap-ui-breakpoints-mode-map
        (evil-get-auxiliary-keymap dap-ui-breakpoints-mode-map 'normal)))
#+END_SRC

*** YASnippet
Template system for expanding abbreviations into code snippets, supporting multiple languages with intelligent field navigation and transformation. → [[*YASnippet Package][Generated Code]]

**** YASnippet Configuration Block
#+NAME: yasnippet-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable yasnippet globally
(yas-global-mode 1)

;; Configure yasnippet directories
(setq yas-snippet-dirs (list (concat qq/cache-directory "snippets/")))

;; Create snippets directory if it doesn't exist
(unless (file-directory-p (concat qq/cache-directory "snippets/"))
  (make-directory (concat qq/cache-directory "snippets/") t))
#+END_SRC

*** YASnippet Snippets
Collection of snippets for yasnippet template expansion system. → [[*YASnippet Snippets Package][Generated Code]]

**** YASnippet Snippets Configuration Block
#+NAME: yasnippet-snippets-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Collection of snippets for yasnippet
;; No additional configuration needed - automatically loads when yasnippet is loaded
#+END_SRC

*** Web Mode
Major mode for editing web templates with support for multiple languages in a single file (HTML, CSS, JavaScript, PHP, etc.) with intelligent syntax highlighting and indentation. → [[*Web Mode Package][Generated Code]]

**** Web Mode Configuration Block
#+NAME: web-mode-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Associate web-mode with file extensions
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

;; Configure web-mode settings
(setq web-mode-markup-indent-offset 2)
(setq web-mode-css-indent-offset 2)
(setq web-mode-code-indent-offset 2)
(setq web-mode-enable-auto-pairing t)
(setq web-mode-enable-auto-closing t)
(setq web-mode-enable-current-element-highlight t)
#+END_SRC

*** CCLS
High-performance C/C++/Objective-C language server providing fast code navigation, completion, and analysis for large codebases. Alternative to clangd with different performance characteristics. → [[*CCLS Package][Generated Code]]

**** CCLS Configuration Block
#+NAME: ccls-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure CCLS language server
(setq ccls-executable (cond
                       ((member qq/current-system '("eagle" "bullseye")) "/usr/bin/ccls")
                       ((string= qq/current-system "darwin") "/usr/local/bin/ccls")
                       ((string= qq/current-system "archlinux") "/usr/bin/ccls")
                       (t "ccls")))

;; CCLS settings
(setq ccls-cache-dir (concat qq/cache-directory "ccls-cache/"))

;; Create CCLS cache directory
(unless (file-directory-p ccls-cache-dir)
  (make-directory ccls-cache-dir t))
#+END_SRC

*** Clangd
Official Clang C/C++ language server providing excellent performance, modern C++ support, and comprehensive IDE features. Recommended alternative to ccls with better standards compliance. → [[*Clangd Package][Generated Code]]

**** Clangd Configuration Block
#+NAME: clangd-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure clangd language server
(setq lsp-clients-clangd-args '(
                                ;; If set to true, code completion will include index symbols that are not defined in the scopes
                                ;; (e.g. namespaces) visible from the code completion point. Such completions can insert scope qualifiers
                                "--all-scopes-completion"
                                ;; Index project code in the background and persist index on disk.
                                "--background-index"
                                ;; Enable clang-tidy diagnostics
                                "--clang-tidy"
                                ;; Whether the clang-parser is used for code-completion
                                ;;   Use text-based completion if the parser is not ready (auto)
                                "--completion-parse=auto"
                                ;; Granularity of code completion suggestions
                                ;;   One completion item for each semantically distinct completion, with full type information (detailed)
                                "--completion-style=detailed"
                                ;; clang-format style to apply by default when no .clang-format file is found
                                ;;"--fallback-style=WebKit"
                                ;; When disabled, completions contain only parentheses for function calls.
                                ;; When enabled, completions also contain placeholders for method parameters
                                "--function-arg-placeholders"
                                ;; Add #include directives when accepting code completions
                                ;;   Include what you use. Insert the owning header for top-level symbols, unless the
                                ;;   header is already directly included or the symbol is forward-declared
                                "--header-insertion=iwyu"
                                ;; Donot prepend a circular dot or space before the completion label, depending on whether an include line will be inserted or not
                                "--header-insertion-decorators=0"
                                ;; Enable index-based features. By default, clangd maintains an index built from symbols in opened files.
                                ;; Global index support needs to enabled separatedly
                                "--index"
                                ;; Attempts to fix diagnostic errors caused by missing includes using index
                                "--suggest-missing-includes"
                                ;; "--log=verbose"
                                ;; Number of async workers used by clangd. Background index also uses this many workers.
                                "-j=8"
                                ))

;; (setq lsp-clients-clangd-args '("--header-insertion-decorators=0" "-j=4" "-background-index" "-logaverbose"))
;; Set clangd executable path based on system
(setq lsp-clients-clangd-executable
      (cond
       ((member qq/current-system '("eagle" "Legion-U")) "/usr/bin/clangd")
       ((string= qq/current-system "darwin") "/usr/local/opt/llvm/bin/clangd")
       ((string= qq/current-system "archlinux") "/usr/bin/clangd")
       (t "clangd")))

;; Enable clangd for C/C++ modes
(add-hook 'c-mode-hook 'lsp-deferred)
(add-hook 'c++-mode-hook 'lsp-deferred)
(add-hook 'c-ts-mode-hook 'lsp-deferred)
(add-hook 'c++-ts-mode-hook 'lsp-deferred)
#+END_SRC

*** Additional Language Support
**** JavaScript/TypeScript

***** JS Doc
Generate JSDoc comments automatically for JavaScript functions. → [[*JS Doc Package][Generated Code]]

****** JS Doc Configuration Block
#+NAME: js-doc-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure js-doc for JavaScript documentation
(setq js-doc-mail-address user-mail-address
      js-doc-author (format "<%s>" user-mail-address)
      js-doc-url user-full-name
      js-doc-license "")
#+END_SRC

***** RJSX Mode
Enhanced React JSX support with better syntax highlighting and indentation. → [[*RJSX Mode Package][Generated Code]]

****** RJSX Mode Configuration Block
#+NAME: rjsx-mode-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Associate RJSX mode with React files
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode))
(add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))

;; Configure RJSX mode settings
(setq js2-mode-show-parse-errors nil
      js2-mode-show-strict-warnings nil
      js2-basic-offset 2
      sgml-basic-offset 2)
#+END_SRC

***** JSON Mode
Enhanced JSON editing with syntax highlighting and validation. → [[*JSON Mode Package][Generated Code]]

****** JSON Mode Configuration Block
#+NAME: json-mode-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure JSON mode
(setq json-reformat:indent-width 2)
#+END_SRC

**** C/C++ Development

***** CMake Mode
Support for CMake build system with syntax highlighting and completion. → [[*CMake Mode Package][Generated Code]]

****** CMake Mode Configuration Block
#+NAME: cmake-mode-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Associate cmake-mode with CMake files
(add-to-list 'auto-mode-alist '("CMakeLists\\.txt\\'" . cmake-mode))
(add-to-list 'auto-mode-alist '("\\.cmake\\'" . cmake-mode))
#+END_SRC

***** CMake Font Lock
Enhanced syntax highlighting for CMake files. → [[*CMake Font Lock Package][Generated Code]]

****** CMake Font Lock Configuration Block
#+NAME: cmake-font-lock-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable cmake-font-lock for better highlighting
(autoload 'cmake-font-lock-activate "cmake-font-lock" nil t)
(add-hook 'cmake-mode-hook 'cmake-font-lock-activate)
#+END_SRC

***** Clang Format
Code formatting for C/C++ using clang-format. → [[*Clang Format Package][Generated Code]]

****** Clang Format Configuration Block
#+NAME: clang-format-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure clang-format
(setq clang-format-style "file")

;; Add hooks for automatic formatting
(add-hook 'c-mode-hook
          (lambda () (add-hook 'before-save-hook 'clang-format-buffer nil 'local)))
(add-hook 'c++-mode-hook
          (lambda () (add-hook 'before-save-hook 'clang-format-buffer nil 'local)))
(add-hook 'c-ts-mode-hook
          (lambda () (add-hook 'before-save-hook 'clang-format-buffer nil 'local)))
(add-hook 'c++-ts-mode-hook
          (lambda () (add-hook 'before-save-hook 'clang-format-buffer nil 'local)))
#+END_SRC

**** Additional Languages

***** Markdown Mode
Comprehensive markdown editing with live preview and syntax highlighting. → [[*Markdown Mode Package][Generated Code]]

****** Markdown Mode Configuration Block
#+NAME: markdown-mode-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Associate markdown-mode with markdown files
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))

;; Configure markdown mode settings
(setq markdown-command "pandoc")
#+END_SRC

***** YAML Mode
YAML file editing with proper indentation and syntax highlighting. → [[*YAML Mode Package][Generated Code]]

****** YAML Mode Configuration Block
#+NAME: yaml-mode-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Associate yaml-mode with YAML files
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
#+END_SRC

***** Markdown TS Mode
Tree-sitter powered Markdown editing with enhanced syntax highlighting. → [[*Markdown TS Mode Package][Generated Code]]

****** Markdown TS Mode Configuration Block
#+NAME: markdown-ts-mode-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(add-to-list 'treesit-language-source-alist '(markdown "https://github.com/tree-sitter-grammars/tree-sitter-markdown" "split_parser" "tree-sitter-markdown/src"))
(add-to-list 'treesit-language-source-alist '(markdown-inline "https://github.com/tree-sitter-grammars/tree-sitter-markdown" "split_parser" "tree-sitter-markdown-inline/src"))
:mode ("\\.md\\'" . markdown-ts-mode)
:defer 't
#+END_SRC

***** Lua Mode
Lua scripting language support with syntax highlighting and indentation. → [[*Lua Mode Package][Generated Code]]

****** Lua Mode Configuration Block
#+NAME: lua-mode-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure Lua mode
(setq lua-indent-level 2)
#+END_SRC

***** QML Mode
Qt QML file editing support with syntax highlighting. → [[*QML Mode Package][Generated Code]]

****** QML Mode Configuration Block
#+NAME: qml-mode-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Associate qml-mode with QML files
(add-to-list 'auto-mode-alist '("\\.qml\\'" . qml-mode))
#+END_SRC

***** Docker Support
Docker and Docker Compose file editing support. → [[*Dockerfile Mode Package][Dockerfile Generated Code]] / [[*Docker Compose Mode Package][Docker Compose Generated Code]]

****** Dockerfile Mode Configuration Block
#+NAME: dockerfile-mode-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Associate dockerfile-mode with Docker files
(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
#+END_SRC

****** Docker Compose Mode Configuration Block
#+NAME: docker-compose-mode-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Associate docker-compose-mode with compose files
(add-to-list 'auto-mode-alist '("docker-compose[^/]*\\.ya?ml\\'" . docker-compose-mode))
#+END_SRC

***** PlantUML Mode
Diagram-as-code support for PlantUML with syntax highlighting and preview. → [[*PlantUML Mode Package][Generated Code]]

****** PlantUML Mode Configuration Block
#+NAME: plantuml-mode-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure PlantUML
(setq plantuml-jar-path (concat user-emacs-directory "extern/org/plantuml.jar"))
(setq plantuml-default-exec-mode 'jar)
#+END_SRC

**** Format All
Universal code formatter supporting multiple languages with consistent formatting. → [[*Format All Package][Generated Code]]

***** Format All Configuration Block
#+NAME: format-all-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable format-all for automatic code formatting
(add-hook 'prog-mode-hook #'format-all-ensure-formatter)

;; Optional: format on save
;; (add-hook 'prog-mode-hook #'format-all-mode)
#+END_SRC

**** Programming Mode Hooks
Common configuration applied to all programming modes for consistent development environment. → [[*Programming Mode Configuration][Generated Code]]

***** Programming Mode Configuration Block
#+NAME: prog-mode-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Common programming mode setup
(add-hook 'prog-mode-hook
          (lambda ()
            ;; Enable line numbers
            (display-line-numbers-mode 1)

            ;; Enable LSP if supported
            (when (and (fboundp 'lsp-deferred)
                       (not (derived-mode-p 'emacs-lisp-mode)))
              (lsp-deferred))

            ;; Enable yasnippet
            (when (fboundp 'yas-minor-mode)
              (yas-minor-mode 1))

            ;; Set C-c C-c to compile
            (local-set-key (kbd "C-c C-c") 'compile)))

;; Tree-sitter mode hooks
(dolist (hook '(c-ts-mode-hook
                c++-ts-mode-hook
                js-ts-mode-hook
                typescript-ts-mode-hook
                python-ts-mode-hook
                css-ts-mode-hook
                html-ts-mode-hook
                json-ts-mode-hook
                yaml-ts-mode-hook
                bash-ts-mode-hook))
  (add-hook hook
            (lambda ()
              (display-line-numbers-mode 1)
              (when (fboundp 'lsp-deferred)
                (lsp-deferred)))))
#+END_SRC

*** Combobulate
Advanced tree-sitter-based code manipulation and navigation for structured editing. → [[*Combobulate Package][Generated Code]]

**** Combobulate Configuration Block
#+NAME: combobulate-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable combobulate for tree-sitter modes
(add-hook 'prog-mode-hook
          (lambda ()
            (when (and (fboundp 'combobulate-mode)
                       (treesit-parser-list))
              (combobulate-mode 1))))

;; Configure combobulate for better structured editing
(setq combobulate-key-prefix "C-c o")
#+END_SRC

*** Navigation and Text Editing
Fast navigation and intelligent text editing tools for improved productivity.

**** Avy
Avy is a powerful navigation tool that allows you to jump to any visible text by typing a few characters. → [[*Avy Package][Generated Code]]

***** Avy Configuration Block
#+NAME: avy-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure avy for fast navigation
(setq avy-background t)
(setq avy-style 'at-full)
(setq avy-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
#+END_SRC

**** Expand Region
Expand Region increases the selected region by semantic units. Very useful for quick text selection. → [[*Expand Region Package][Generated Code]]

***** Expand Region Configuration Block
#+NAME: expand-region-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure expand-region for intelligent text selection
;; No additional configuration needed
#+END_SRC

**** Smartparens
Smartparens provides intelligent parentheses handling, auto-pairing, and structural editing commands. → [[*Smartparens Package][Generated Code]]

***** Smartparens Configuration Block
#+NAME: smartparens-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable smartparens globally
(smartparens-global-mode 1)

;; Enable smartparens in minibuffer
(add-hook 'minibuffer-setup-hook 'turn-on-smartparens-mode)

;; Configure smartparens for programming modes
(add-hook 'prog-mode-hook #'turn-on-smartparens-mode)

;; Show matching parens
(show-smartparens-global-mode 1)

;; Smartparens configuration for various modes
(sp-with-modes '(markdown-mode gfm-mode rst-mode)
(sp-local-pair "*" "*" :bind "C-*")
(sp-local-tag "2" "**" "**")
(sp-local-tag "s" "```scheme" "```")
(sp-local-tag "<"  "<_>" "</_>" :transform 'sp-match-sgml-tags))

;; Smartparens for web development
(sp-with-modes '(html-mode sgml-mode web-mode)
(sp-local-pair "<" ">"))
#+END_SRC

**** Flycheck
Flycheck provides on-the-fly syntax checking for many programming languages. → [[*Flycheck Package][Generated Code]]

***** Flycheck Configuration Block
#+NAME: flycheck-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable flycheck globally
(global-flycheck-mode 1)

;; Configure flycheck
(setq flycheck-check-syntax-automatically '(save mode-enabled))
(setq flycheck-highlighting-mode 'lines)
(setq flycheck-indication-mode 'left-fringe)

;; Use consult for flycheck errors
(setq flycheck-display-errors-function #'flycheck-display-error-messages-unless-error-list)
#+END_SRC

**** Fancy Compilation
Enhanced compilation output with progress display and improved diagnostics for cleaner compilation output. → [[*Fancy Compilation Package][Generated Code]]

***** Fancy Compilation Configuration Block
#+NAME: fancy-compilation-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable fancy-compilation mode globally
(with-eval-after-load 'compile
  (fancy-compilation-mode 1))

;; Configure fancy-compilation for better output
(setq fancy-compilation-quiet-prelude t)
(setq fancy-compilation-override-colors t)

;; Additional compilation-mode settings
(setq compilation-scroll-output 'first-error)
(setq compilation-window-height 12)
(setq compilation-ask-about-save nil)
(setq compilation-always-kill t)
#+END_SRC

**** VTerm
VTerm provides a fully-featured terminal emulator inside Emacs using libvterm. → [[*VTerm Package][Generated Code]]

***** VTerm Configuration Block
#+NAME: vterm-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure vterm
(setq vterm-max-scrollback 10000)
(setq vterm-buffer-name-string "vterm %s")

;; Keybindings for vterm
(with-eval-after-load 'vterm
(define-key vterm-mode-map (kbd "C-c C-t") 'vterm-copy-mode))
#+END_SRC

**** Multi-VTerm
Multi-VTerm provides multiple vterm sessions for better terminal management. → [[*Multi-VTerm Package][Generated Code]]

***** Multi-VTerm Configuration Block
#+NAME: multi-vterm-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure multi-vterm
(setq multi-vterm-buffer-name "vterm")
(setq multi-vterm-dedicated-window-height-percent 30)
#+END_SRC

**** Eat
Eat (Emulate A Terminal) is a terminal emulator for Emacs written in Emacs Lisp. → [[*Eat Package][Generated Code]]

***** Eat Configuration Block
#+NAME: eat-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure eat terminal emulator
(setq eat-buffer-name "*eat*")
(setq eat-kill-buffer-on-exit t)

;; Enable evil integration
(add-to-list 'evil-emacs-state-modes 'eat-mode)

;; Integration with eshell
(add-hook 'eshell-load-hook #'eat-eshell-mode)
(add-hook 'eshell-load-hook #'eat-eshell-visual-command-mode)
#+END_SRC

**** Shell Here
Shell Here provides convenient functions to open shell in current directory. → [[*Shell Here Package][Generated Code]]

***** Shell Here Configuration Block
#+NAME: shell-here-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure shell-here
;; No additional configuration needed - provides convenient functions
#+END_SRC

*** File Management and Dired
Enhanced file management tools and dired improvements for better file operations.

**** Dired Sidebar
Dired Sidebar provides a file tree sidebar similar to modern IDEs. → [[*Dired Sidebar Package][Generated Code]]

***** Dired Sidebar Configuration Block
#+NAME: dired-sidebar-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure dired-sidebar
(setq dired-sidebar-theme 'nerd-icons)
(setq dired-sidebar-use-term-integration t)
(setq dired-sidebar-use-custom-font t)

;; Evil integration
(add-to-list 'evil-emacs-state-modes 'dired-sidebar-mode)
#+END_SRC

**** Dired Hacks
Collection of useful dired extensions including dired-subtree, dired-filter, and dired-collapse. → [[*Dired Hacks Package][Generated Code]]

***** Dired Hacks Configuration Block
#+NAME: dired-hacks-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable dired-subtree for tree-like navigation
(with-eval-after-load 'dired-subtree
  (setq dired-subtree-use-backgrounds nil))

;; Enable dired-filter for filtering files
(with-eval-after-load 'dired-filter
  (define-key dired-mode-map (kbd "/") dired-filter-map))

;; Enable dired-collapse for collapsing unique subdirectories
(add-hook 'dired-mode-hook #'dired-collapse-mode)
#+END_SRC

**** Dired Git Info
Shows git status information in dired buffers. → [[*Dired Git Info Package][Generated Code]]

***** Dired Git Info Configuration Block
#+NAME: dired-git-info-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure dired-git-info
(setq dgi-commit-message-format "%h %cs %s")
(setq dgi-auto-hide-details-p nil)

;; Enable for git repositories
(add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable)
#+END_SRC

**** Dired Narrow
Provides live filtering of dired buffers. → [[*Dired Narrow Package][Generated Code]]

***** Dired Narrow Configuration Block
#+NAME: dired-narrow-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure dired-narrow
;; Use / to start filtering in dired
#+END_SRC

**** Dired Rainbow
Colors different file types in dired buffers. → [[*Dired Rainbow Package][Generated Code]]

***** Dired Rainbow Configuration Block
#+NAME: dired-rainbow-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure dired-rainbow for file type colors
(dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
(dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
(dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
(dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
(dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
(dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
(dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
(dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
(dired-rainbow-define log "#c17d11" ("log"))
(dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
(dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
(dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
(dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
(dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
(dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
(dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
(dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
(dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
(dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
(dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")
#+END_SRC

**** Dired Plus
Enhanced dired with additional features and keybindings. → [[*Dired Plus Package][Generated Code]]

***** Dired Plus Configuration Block
#+NAME: dired-plus-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(setq diredp-hide-details-initially-flag nil)
(setq diredp-hide-details-propagate-flag nil)

;; Unbind SPC in dired-mode to avoid conflict with leader key
(with-eval-after-load 'dired+
  (define-key dired-mode-map (kbd "SPC") nil)
  (define-key diredp-mode-map (kbd "SPC") nil))
#+END_SRC

**** Ace Window
Fast window switching with visual overlays. → [[*Ace Window Package][Generated Code]]

***** Ace Window Configuration Block
#+NAME: ace-window-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure ace-window
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
(setq aw-scope 'frame)
#+END_SRC

**** Treemacs
A tree-style file explorer for Emacs. → [[*Treemacs Package][Generated Code]]

***** Treemacs Configuration Block
#+NAME: treemacs-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure treemacs
(setq treemacs-width 30)
(setq treemacs-follow-mode t)
(setq treemacs-filewatch-mode t)

;; Evil integration
(with-eval-after-load 'treemacs
  (define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action))
#+END_SRC

** Vertico
A performant and minimalistic completion UI. → [[*Vertico Package][Generated Code]]
*** Vertico Init Block
#+NAME: vertico-init
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable vertico mode on startup
(setq vertico-count 20)
(setq vertico-resize t)
(setq vertico-cycle t)
;; Enable vertico globally
(vertico-mode 1)
#+END_SRC

*** Vertico Configuration Block
#+NAME: vertico-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure vertico scroll margin
(setq vertico-scroll-margin 0)

;; Ensure proper quit handling
(setq enable-recursive-minibuffers t)
(setq completion-auto-help nil)
(setq completion-auto-select nil)

;; Enable savehist for vertico-repeat
(savehist-mode +1)

;; Enable vertico multiform mode
(vertico-multiform-mode)

(vertico-grid-separator "       ")
(vertico-grid-lookahead 50)
(vertico-buffer-display-action '(display-buffer-reuse-window)) ; Default
(vertico-multiform-categories                                  ; Choose a multiform
 '((file reverse)
   (consult-grep buffer)
   (consult-location)
   (imenu buffer)
   (library reverse indexed)
   (org-roam-node reverse indexed)
   (t reverse)))
(vertico-multiform-commands
 '(("flyspell-correct-*" grid reverse)
   (org-refile grid reverse indexed)
   (consult-yank-pop indexed)
   (consult-flycheck)
   (consult-lsp-diagnostics)))

(defun qq/vertico-quick-embark (&optional arg)
  "Embark on candidate using quick keys."
  (interactive)
  (when (vertico-quick-jump)
    (embark-act arg)))

;; Prefix the current candidate with “» ”. From
;; https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
(advice-add #'vertico--format-candidate :around
            (lambda (orig cand prefix suffix index _start)
              (setq cand (funcall orig cand prefix suffix index _start))
              (concat
               (if (= vertico--index index)
                   (propertize "» " 'face 'vertico-current)
                 "  ")
               cand)))
:hook ((rfn-eshadow-update-overlay . vertico-directory-tidy) ; Clean up file path when typing
       (minibuffer-setup . vertico-repeat-save)) ; Make sure vertico state is saved
#+END_SRC

*** Vertico Posframe
Floating posframe display for vertico completion UI with customizable positioning. → [[*Vertico Posframe Package][Generated Code]]

**** Vertico Posframe Configuration Block
#+NAME: vertico-posframe-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable vertico-posframe mode
(vertico-posframe-mode 1)

(defun qq/posframe-poshandler-frame-center-eyelevel (info)
  "Posframe position handler to put the posframe at eye level,
          horizontally centered. Top position is fixed to avoid jittering
          when filtering.

          INFO can be found in docstring of `posframe-show'."
  (cons (- (/ (- (plist-get info :parent-frame-width) 0) 2)
           (/ (plist-get info :posframe-width) 2))
        (- (/ (plist-get info :parent-frame-height) 6)
           (/ vertico-posframe-min-height 2))))


;; Configure vertico-posframe appearance
(setq vertico-count 20
      vertico-posframe-border-width 2
      vertico-multiform-categories
      vertico-posframe-min-height 1
      '((file posframe
              (vertico-sort-function . vertico-sort-directories-first)
              (:keymap . vertico-directory-map))
        (project-file posframe)
        (imenu buffer
               (vertico-buffer-display-action . (display-buffer-use-least-recent-window)))
        (consult-location buffer
                          (vertico-buffer-display-action . (display-buffer-use-least-recent-window)))
        (consult-grep buffer
                      (vertico-buffer-display-action . (display-buffer-same-window)))
        (t posframe))

      ;; vertico-posframe-poshandler 'posframe-poshandler-frame-center
      vertico-posframe-poshandler 'qq/posframe-poshandler-frame-center-eyelevel
      vertico-posframe-parameters '((left-fringe . 8)
                                    (right-fringe . 8)))
#+END_SRC

*** Marginalia
Rich annotations for completion candidates in the minibuffer. → [[*Marginalia Package][Generated Code]]
**** Marginalia Configuration Block
#+NAME: marginalia-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(marginalia-mode)

;; Marginalia settings
(setq marginalia-max-relative-age 0
      marginalia-align 'right)
    (add-to-list 'marginalia-prompt-categories '("sketch" . sketch))
    (add-to-list 'marginalia-censor-variables "-api-key")
    (cl-pushnew #'marginalia-annotate-symbol-with-alias
          (alist-get 'command marginalia-annotator-registry))
    (cl-pushnew #'marginalia-annotate-symbol-with-alias
          (alist-get 'function marginalia-annotator-registry))
    (cl-pushnew #'marginalia-annotate-symbol-with-alias
          (alist-get 'symbol marginalia-annotator-registry))

  (defun marginalia-annotate-alias (cand)
    "Annotate CAND with the function it aliases."
    (when-let ((sym (intern-soft cand))
               (alias (car (last (function-alias-p sym))))
               (name (and (symbolp alias) (symbol-name alias))))
      (format " (%s)" name)))

  (defun marginalia-annotate-symbol-with-alias (cand)
    "Annotate symbol CAND with its documentation string.
      Similar to `marginalia-annotate-symbol'."
    (when-let (sym (intern-soft cand))
      (concat
       (marginalia-annotate-binding cand)
       (marginalia--fields
        ((marginalia-annotate-alias cand) :face 'marginalia-function)
        ((marginalia--symbol-class sym) :face 'marginalia-type)
        ((cond
          ((fboundp sym) (marginalia--function-doc sym))
          ((facep sym) (documentation-property sym 'face-documentation))
          (t (documentation-property sym 'variable-documentation)))
         :truncate 1.0 :face 'marginalia-documentation)))))
#+END_SRC

*** Orderless
Flexible completion matching styles for advanced filtering. → [[*Orderless Package][Generated Code]]
**** Orderless Configuration Block
#+NAME: orderless-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure completion styles
(setq completion-styles '(orderless basic)
      completion-category-defaults nil
      completion-category-overrides '((file (styles orderless))
                                      (buffer (styles orderless))))

;; Configure orderless matching styles
(setq orderless-matching-styles
      '(orderless-literal
        orderless-regexp
        orderless-flex))

;; Hide commands in M-x which do not work in the current mode
(setq read-extended-command-predicate #'command-completion-default-include-p)
#+END_SRC

*** Embark
Contextual actions on completion targets with flexible keybindings. → [[*Embark Package][Generated Code]]
**** Embark Configuration Block
#+NAME: embark-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Replace the key help with a completing-read interface
(setq prefix-help-command #'embark-prefix-help-command)

;; Hide the mode line of the Embark live/completions buffers
(add-to-list 'display-buffer-alist
             '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
               nil
               (window-parameters (mode-line-format . none))))
#+END_SRC

*** Embark-Consult
Integration between embark and consult for enhanced completion actions. → [[*Embark-Consult Package][Generated Code]]
**** Embark-Consult Configuration Block
#+NAME: embark-consult-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Embark-Consult integration
(add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode)
#+END_SRC

*** Consult
An excellent collection of commands based on completing-read. → [[*Consult Package][Generated Code]]
**** Consult Configuration Block
#+NAME: consult-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(consult-customize
 consult-theme :preview-key '(:debounce 0.2 any)
 consult-ripgrep consult-git-grep consult-grep
 consult-bookmark consult-recent-file consult-xref
 consult--source-bookmark consult--source-file-register
 consult--source-recent-file consult--source-project-recent-file
 ;; :preview-key "M-."
 :preview-key '(:debounce 0.4 any))

;; Configure consult-buffer sources to include recentf
(setq consult-buffer-sources
      '(consult--source-buffer
        consult--source-recent-file
        consult--source-bookmark
        consult--source-project-buffer-hidden
        consult--source-project-recent-file-hidden))

;; Enable automatic preview at point in the *Completions* buffer. This is
;; relevant when you use the default completion UI.
:hook (completion-list-mode . consult-preview-at-point-mode)

;; The :init configuration is always executed (Not lazy)
:init

;; Tweak the register preview for `consult-register-load',
;; `consult-register-store' and the built-in commands.  This improves the
;; register formatting, adds thin separator lines, register sorting and hides
;; the window mode line.
(advice-add #'register-preview :override #'consult-register-window)
(setq register-preview-delay 0.5)

;; Use Consult to select xref locations with preview
(setq xref-show-xrefs-function #'consult-xref
      xref-show-definitions-function #'consult-xref)
#+END_SRC

** Magit
The ultimate Git interface for Emacs. → [[*Magit Package][Generated Code]]
*** Magit Configuration Block
#+NAME: magit-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure magit with performance optimizations
(setq magit-diff-refine-hunk nil
      magit-diff-highlight-hunk-body nil
      magit-diff-paint-whitespace nil
      magit-diff-highlight-trailing nil
      magit-diff-options '("--histogram")
      magit-diff-arguments '("--stat" "--no-ext-diff" "-C1")  ; Reduced context from C3 to C1
      magit-repository-directories '(("~/src" . 2))
      magit-push-always-verify nil
      magit-stage-all-confirm nil
      magit-status-show-hashes-in-headers nil
      magit-status-headers-hook
      (remove 'magit-insert-head-branch-header magit-status-headers-hook)
      magit-display-buffer-function #'magit-display-buffer-fullcolumn-most-v1
      magit-bury-buffer-function 'magit-restore-window-configuration
      transient-history-file (concat qq/cache-directory "transient_hist.el")
      ;; Performance optimizations
      magit-diff-adjust-tab-width nil        ; Skip tab width adjustment
      magit-diff-expansion-threshold 10.0    ; Only expand small diffs
      magit-status-refresh-hook nil)         ; Disable refresh hooks for speed
(setopt magit-format-file-function #'magit-format-file-nerd-icons)
;; Show gravatars
(setopt magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
;; Always show recent/unpushed/unpulled commits
(setopt magit-section-initial-visibility-alist '((unpushed . show)
                                                 (unpulled . show)))
#+END_SRC

*** Git Commit Configuration
#+NAME: git-commit-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(setopt git-commit-major-mode 'git-commit-gfm-mode)
:init
(define-derived-mode git-commit-gfm-mode markdown-mode "GIT-GFM"
  "Major mode for editing commit messages in GitHub Flavored Markdown.
Like the official markdown gfm-mode but `#' at the beginning of a line
is not a title but instead is displayed as a comment."
  (setopt markdown-link-space-sub-char "-")
  (setq-local markdown-regex-comment-start "^#")
  (setq-local markdown-regex-comment-end "$")
  (setq-local markdown-table-at-point-p-function 'gfm--table-at-point-p)
  (markdown-gfm-parse-buffer-for-languages))

;; Mark a few major modes as safe
(put 'git-commit-major-mode 'safe-local-variable
     (lambda (m) (or (eq m 'git-commit-gfm-mode)
 		             (eq m 'gfm-mode)
 		             (eq m 'text-mode)
 		             (eq m 'git-commit-elisp-text-mode))))

;; Set evil insert mode during commit
(setq git-commit-finish-query-functions nil)
(add-hook 'git-commit-mode-hook
          #'(lambda () (auto-fill-mode 0)
              (evil-insert-state))
          ;; append rather than prepend to git-commit-mode-hook, since the
          ;; thing that turns auto-fill-mode on in the first place is itself
          ;; another hook on git-commit-mode.
          t)

;; set variable pitch mode for commit
(custom-set-faces
 '(git-commit-overlong-summary ((t (:inherit nil))))
 '(git-commit-nonempty-second-line ((t (:inherit nil))))
 '(git-commit-summary ((t nil))))

#+END_SRC

** Blamer
Git blame information display in the buffer for code authorship tracking. → [[*Blamer Package][Generated Code]]

*** Blamer Configuration Block
#+NAME: blamer-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure blamer for git blame information
(setq blamer-idle-time 0.3)
(setq blamer-min-offset 70)
(setq blamer-prefix " > ")
(setq blamer-prettify-time-p t)

;; Enable blamer in programming modes
(add-hook 'prog-mode-hook 'blamer-mode)

;; Configure blamer appearance
(set-face-attribute 'blamer-face nil
                    :foreground "#7a88cf"
                    :background nil
                    :height 140
                    :italic t)
#+END_SRC

** Diff HL
Highlight uncommitted changes in the buffer fringe with VCS integration for visual change tracking.

*** Diff HL Configuration Block
#+NAME: diff-hl-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable diff-hl globally
(global-diff-hl-mode 1)

;; Enable highlighting changes on the fly
(diff-hl-flydiff-mode 1)

;; Use margin instead of fringe in terminal
(unless (display-graphic-p)
  (diff-hl-margin-mode 1))

;; Refresh diff-hl when magit operations complete
(add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
(add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)

;; Configure diff-hl colors for better visibility
(set-face-background 'diff-hl-change "#46D9FF")
(set-face-background 'diff-hl-delete "#ff6c6b")
(set-face-background 'diff-hl-insert "#98be65")
#+END_SRC

** VC Msg
Enhanced version control message display with multi-VCS support for on-demand commit information. → [[*VC Msg Package][Generated Code]]

*** VC Msg Configuration Block
#+NAME: vc-msg-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure vc-msg for enhanced commit message display
(setq vc-msg-force-vcs nil)  ; Auto-detect VCS
(setq vc-msg-newbie-friendly-msg t)  ; Show helpful hints

;; Hook to customize behavior after showing commit
(add-hook 'vc-msg-show-code-hook
          (lambda ()
            ;; You can add custom actions here
            (message "vc-msg: Commit information displayed")))

;; Optional: Integration with git-link if available
(with-eval-after-load 'git-link
  (setq vc-msg-git-show-commit-function 'vc-msg-git-show-code))
#+END_SRC

** Which-key
Displays available keybindings in popup. → [[*Which-key Package][Generated Code]]
*** Which-key Configuration Block
#+NAME: which-key-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable which-key globally
(which-key-mode 1)

;; Configure which-key behavior
(setq which-key-idle-delay 0.3)
(setq which-key-prefix-prefix "+")
(setq which-key-max-display-columns 5)
(setq which-key-sort-order 'which-key-key-order-alpha)
(setq which-key-allow-imprecise-window-fit t)
(setq which-key-min-display-lines 6)
(setq which-key-sort-order 'which-key-local-then-key-order)
(setq-default which-key-max-description-length 50)

(setq which-key-key-replacement-alist
      '(("<\\([[:alnum:]-]+\\)>" . "\\1")
        ("left"                . "◀")
        ("right"               . "▶")
        ("up"                  . "▲")
        ("down"                . "▼")
        ("delete"              . "DLT") ; delete key
        ("\\`DEL\\'"             . "BS") ; backspace key
        ("next"                . "PgDn")
        ("prior"               . "PgUp")))

;; Configure prefix descriptions
(which-key-add-key-based-replacements
  "SPC f" "files"
  "SPC F" "Tree "
  "SPC b" "buffers"
  "SPC g" "git"
  "SPC s" "search/symbols"
  "SPC i" "info/insert"
  "SPC h" "help/helpful"
  "SPC m" "lsp-command-map"
  "SPC m =" "lsp-format"
  "SPC m F" "lsp-workspace"
  "SPC m G" "lsp-ui-peek-find"
  "SPC m T" "lsp-toggle mode"
  "SPC m a" "lsp tools"
  "SPC m g" "find/treemacs"
  "SPC m h" "help/describe"
  "SPC m r" "organize/rename"
  "SPC m w" "lsp utilities"
  "SPC x" "execute"
  "SPC y" "yank"
  "SPC j" "jump/navigation"
  "SPC e" "errors/diagnostics"
  "SPC t" "terminal"
  "SPC w" "window"
  "SPC z" "zoom"
  "SPC d" "docker"
  "SPC a" "ai/assistant"
  "C-w" "windows"
  "C-c o" "combobulate"
  "C-c z" "debug/toggle"
  "C-x x" "perspective-mode")
#+END_SRC

*** Which-key Posframe
Displays which-key in posframe. → [[*Which-key Posframe Package][Generated Code]]
**** Which-key Posframe Configuration Block
#+NAME: which-key-posframe-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable which-key-posframe mode
(which-key-posframe-mode 1)

;; Configure which-key-posframe appearance
(setq which-key-posframe-poshandler 'posframe-poshandler-frame-center)
(setq which-key-posframe-parameters
      '((left-fringe . 8)
        (right-fringe . 8)))
#+END_SRC

** Transient Posframe
Displays which-key in posframe. → [[*Transient Posframe Package][Generated Code]]
*** Transient Posframe Configuration Block
#+NAME: transient-posframe-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable transient-posframe mode
(transient-posframe-mode 1)

;; Configure transient-posframe appearance
(setq transient-posframe-poshandler 'posframe-poshandler-frame-center)
(setq transient-posframe-parameters
      '((left-fringe . 8)
        (right-fringe . 8)))
#+END_SRC

** Symbol Overlay
Highlight symbols with overlays for better code navigation, providing visual feedback for symbol occurrences throughout the buffer. → [[*Symbol Overlay Package][Generated Code]]

*** Symbol Overlay Configuration Block
#+NAME: symbol-overlay-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure symbol-overlay for symbol highlighting
(setq symbol-overlay-idle-time 0.1)
(setq symbol-overlay-scope t)

;; Enable symbol-overlay in programming modes
(add-hook 'prog-mode-hook 'symbol-overlay-mode)
#+END_SRC

** Helpful
Better help system with more detailed documentation, enhanced function and variable descriptions with examples and source code links. → [[*Helpful Package][Generated Code]]

*** Helpful Configuration Block
#+NAME: helpful-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure helpful (keybindings handled by leader keys)
;; Add helpful to evil-collection
(with-eval-after-load 'evil-collection
  (evil-collection-define-key 'normal 'helpful-mode-map
    "q" 'quit-window))
#+END_SRC

** Popper
Popup window management for temporary buffers with one-key access, providing intelligent buffer grouping and context-aware popup toggling. → [[*Popper Package][Generated Code]]

*** Popper Configuration Block
#+NAME: popper-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Custom display functions for popper categories
(defun qq/popper-display-at-frame-right (buffer alist)
  "Display BUFFER in a popup window on the right side of the frame."
  (let ((window (split-window (frame-root-window) -100 'right)))
    (set-window-buffer window buffer)
    (select-window window)
    window))

(defun qq/popper-display-split-below (buffer alist)
  "Display BUFFER by splitting the selected window below."
  (let ((window (split-window (selected-window) -120 'below)))
    (set-window-buffer window buffer)
    (select-window window)
    window))

;; Configure popper for popup window management
;; Define buffer categories for different display behaviors
(setq popper-reference-buffers
      '(;; Right-side popup buffers
        ("\\*Messages\\*" . right-side)
        ("\\*scratch\\*" . right-side)
        ;; Split-below buffers
        (compilation-mode . split-below)
        ;; Default popup buffers
        "Output\\*$"
        "\\*Async Shell Command\\*"
        help-mode
        helpful-mode))

;; Define popper groups with custom display functions
(setq popper-group-function #'popper-group-by-project)

;; Custom display control for different categories
(setq popper-display-control t)
(setq popper-display-function-alist
      '((right-side . qq/popper-display-at-frame-right)
        (split-below . qq/popper-display-split-below)))

;; Enable popper globally
(popper-mode +1)
(popper-echo-mode +1)

;; Helper functions to toggle different popper categories
(defun qq/popper-toggle-right-side ()
  "Toggle popper buffer on the right side of frame."
  (interactive)
  (let ((popper-display-function 'qq/popper-display-at-frame-right))
    (popper-toggle)))

(defun qq/popper-toggle-split-below ()
  "Toggle popper buffer by splitting below active window."
  (interactive)
  (let ((popper-display-function 'qq/popper-display-split-below))
    (popper-toggle)))

;; Cycling functions for specific categories
(defun qq/popper-cycle-right-side ()
  "Cycle through right-side popup buffers only."
  (interactive)
  (let ((popper-display-function 'qq/popper-display-at-frame-right)
        (right-side-buffers '("*Messages*" "*scratch*")))
    (if-let ((current-buffers (seq-filter (lambda (buf)
                                            (member (buffer-name buf) right-side-buffers))
                                          (popper--get-reference-buffers))))
        (popper-cycle)
      (message "No right-side popup buffers available"))))

(defun qq/popper-cycle-split-below ()
  "Cycle through split-below popup buffers only."
  (interactive)
  (let ((popper-display-function 'qq/popper-display-split-below)
        (split-below-buffers (seq-filter (lambda (buf)
                                           (with-current-buffer buf
                                             (derived-mode-p 'compilation-mode)))
                                         (buffer-list))))
    (if split-below-buffers
        (popper-cycle)
      (message "No split-below popup buffers available"))))
#+END_SRC

** Solaire Mode
Visual distinction between file-visiting and temporary buffers, providing subtle background color differences to help identify buffer types. → [[*Solaire Mode Package][Generated Code]]

*** Solaire Mode Configuration Block
#+NAME: solaire-mode-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable solaire-mode globally
(solaire-global-mode 1)

;; Ensure solaire-mode works with themes
(add-hook 'after-load-theme-hook 'solaire-mode-restore-persp-mode-buffers)
#+END_SRC

** Restart Emacs
Restart Emacs from within Emacs for configuration testing and debugging, providing a convenient way to reload your entire Emacs session. → [[*Restart Emacs Package][Generated Code]]

*** Restart Emacs Configuration Block
#+NAME: restart-emacs-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; No additional configuration needed - provides restart-emacs command
#+END_SRC

** Exec Path From Shell
Get PATH and environment variables from shell for proper environment setup, especially important on macOS where GUI Emacs doesn't inherit shell environment. → [[*Exec Path From Shell Package][Generated Code]]

*** Exec Path From Shell Configuration Block
#+NAME: exec-path-from-shell-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Only needed on macOS where GUI apps don't inherit shell environment
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize)

  ;; Copy additional environment variables
  (exec-path-from-shell-copy-envs
   '("PATH" "MANPATH" "GOPATH" "GOROOT" "NPM_TOKEN" "LC_ALL" "LANG")))
#+END_SRC

** Auto Dim Other Buffers
Dim inactive buffers to focus on current work, providing visual distinction between the active and inactive windows for better concentration. → [[*Auto Dim Other Buffers Package][Generated Code]]

*** Auto Dim Other Buffers Configuration Block
#+NAME: auto-dim-other-buffers-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable auto-dim-other-buffers globally
(auto-dim-other-buffers-mode 1)

;; Configure dimming behavior
(setq auto-dim-other-buffers-dim-on-focus-out t)
(setq auto-dim-other-buffers-dim-on-switch-to-minibuffer t)

;; Configure faces affected by dimming
(custom-set-variables
 '(auto-dim-other-buffers-affected-faces
   '((default auto-dim-other-buffers) (fringe auto-dim-other-buffers)
     (org-block auto-dim-other-buffers) (org-hide auto-dim-other-buffers-hide)
     (org-level-1 auto-dim-other-buffers) (org-level-2 auto-dim-other-buffers)
     (org-level-3 auto-dim-other-buffers) (org-level-4 auto-dim-other-buffers)
     (org-level-5 auto-dim-other-buffers) (org-level-6 auto-dim-other-buffers)
     (font-lock-type-face auto-dim-other-buffers) (font-lock-string-face auto-dim-other-buffers)
     (font-lock-function-name-face auto-dim-other-buffers))))

;; Workaround for vterm buffer
(defun old-version-of-vterm--get-color (index &rest args)
  "This is the old version before it was broken by commit
https://github.com/akermu/emacs-libvterm/commit/e96c53f5035c841b20937b65142498bd8e161a40.
Re-introducing the old version fixes auto-dim-other-buffers for vterm buffers."
  (cond
   ((and (>= index 0) (< index 16))
    (face-foreground
     (elt vterm-color-palette index)
     nil 'default))
   ((= index -11)
    (face-foreground 'vterm-color-underline nil 'default))
   ((= index -12)
    (face-background 'vterm-color-inverse-video nil 'default))
   (t
    nil)))
(advice-add 'vterm--get-color :override #'old-version-of-vterm--get-color)
#+END_SRC

** Goggles
Highlight changes and operations for better feedback, providing visual confirmation of text manipulation actions like yank, undo, and replace. → [[*Goggles Package][Generated Code]]

*** Goggles Configuration Block
#+NAME: goggles-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure pulse duration
(setq goggles-pulse-duration 0.2)
(setq-default goggles-pulse t)
:hook ((prog-mode text-mode) . goggles-mode)
#+END_SRC

** Docker
Docker interface for container management, providing convenient commands for working with Docker containers, images, and networks from within Emacs. → [[*Docker Package][Generated Code]]

*** Docker Configuration Block
#+NAME: docker-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure docker for container management
;; No additional configuration needed - provides docker commands
#+END_SRC

** Casual Suite
Discoverable transient interfaces for common Emacs tools, providing an intuitive and explorable way to access complex functionality. → [[*Casual Suite Package][Generated Code]]

*** Casual Suite Configuration Block
#+NAME: casual-suite-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure casual suite for discoverable interfaces
;; Individual casual packages are autoloaded when needed
(keymap-set calc-mode-map "C-o" #'casual-calc-tmenu)
(keymap-set dired-mode-map "C-o" #'casual-dired-tmenu)
(keymap-set isearch-mode-map "C-o" #'casual-isearch-tmenu)
(keymap-set ibuffer-mode-map "C-o" #'casual-ibuffer-tmenu)
(keymap-set ibuffer-mode-map "F" #'casual-ibuffer-filter-tmenu)
(keymap-set ibuffer-mode-map "s" #'casual-ibuffer-sortby-tmenu)
(keymap-set Info-mode-map "C-o" #'casual-info-tmenu)
(keymap-set reb-mode-map "C-o" #'casual-re-builder-tmenu)
(keymap-set reb-lisp-mode-map "C-o" #'casual-re-builder-tmenu)
(keymap-set bookmark-bmenu-mode-map "C-o" #'casual-bookmarks-tmenu)
(keymap-set org-agenda-mode-map "C-o" #'casual-agenda-tmenu)
(keymap-set symbol-overlay-map "C-o" #'casual-symbol-overlay-tmenu)
(general-def 'normal "g C-g" #'casual-editkit-main-tmenu)
#+END_SRC

** Claude Code
Claude AI integration with seamless Emacs workflow and project isolation, providing real-time buffer sync and intelligent MCP server integration. → [[*Claude Code Package][Generated Code]]

*** Claude Code Configuration Block
#+NAME: claude-code-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(claude-code-ide-emacs-tools-setup) ; Optionally enable Emacs MCP tools
#+END_SRC

** Corfu
Completion Overlay Region Function - A small completion UI. → [[*Corfu Package][Generated Code]]
*** Corfu Configuration Block
#+NAME: corfu-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable corfu globally
(global-corfu-mode 1)

;; Configure corfu behavior
(setq corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
(setq corfu-auto t)                 ;; Enable auto completion
(setq corfu-separator ?\s)          ;; Orderless field separator
(setq corfu-quit-at-boundary t)     ;; quit at completion boundary
(setq corfu-quit-no-match t)        ;; quit, if there is no match
(setq corfu-preview-current nil)    ;; Disable current candidate preview
(setq corfu-preselect 'prompt)      ;; Preselect the prompt
(setq corfu-on-exact-match nil)     ;; Configure handling of exact matches
(setq corfu-scroll-margin 5)        ;; Use scroll margin
(setq tab-always-indent 'complete)
(setq corfu-preview-current nil)
(setq corfu-min-width 20)
(setq corfu-popupinfo-delay '(1.25 . 0.5))
(corfu-popupinfo-mode 1) ; shows documentation after `corfu-popupinfo-delay'

(with-eval-after-load 'savehist
  (corfu-history-mode 1)
  (add-to-list 'savehist-additional-variables 'corfu-history))

;; Enable corfu for programming modes
(add-hook 'prog-mode-hook #'corfu-mode)
(add-hook 'shell-mode-hook #'corfu-mode)
(add-hook 'eshell-mode-hook #'corfu-mode)
#+END_SRC

** Kind Icon
Icons for completion candidates with corfu and other completion frameworks. → [[*Kind Icon Package][Generated Code]]
*** Kind Icon Configuration Block
#+NAME: kind-icon-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure kind-icon for completion icons
(setq kind-icon-default-face 'corfu-default)
(setq kind-icon-use-icons t)
(setq kind-icon-blend-background nil)
(setq kind-icon-blend-frac 0.08)

;; Add kind-icon to corfu margin formatters
(add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)
#+END_SRC

** Cape
Completion at points package. → [[*Cape Package][Generated Code]]
*** Cape Configuration Block
#+NAME: cape-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Add useful completion functions to `completion-at-point-functions'
(add-to-list 'completion-at-point-functions #'cape-dabbrev)
(add-to-list 'completion-at-point-functions #'cape-file)
(add-to-list 'completion-at-point-functions #'cape-elisp-block)
#+END_SRC

** Doom Modeline
A fancy and fast mode-line inspired by minimalism design. → [[*Doom Modeline Package][Generated Code]]
*** Doom Modeline Configuration Block
#+NAME: doom-modeline-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Define custom modeline
(doom-modeline-def-modeline 'qq-simple-line
  '(bar modals workspace-name window-number buffer-position matches buffer-info remote-host minor-modes)
  '(word-count selection-info misc-info major-mode process vcs lsp))

;; Setup function for custom modeline
(defun setup-custom-doom-modeline ()
  (doom-modeline-set-modeline 'qq-simple-line 'default))

;; Configure doom-modeline settings
(setq doom-modeline-minor-modes t
      doom-modeline-bar-width 6
      doom-modeline-buffer-file-name-style 'buffer-name)

;; Apply modeline font height (set in site-specific configuration)
(set-face-attribute 'mode-line nil :height qq/modeline-font-height)
(set-face-attribute 'mode-line-inactive nil :height qq/modeline-font-height)

;; Add hook and enable
(add-hook 'doom-modeline-mode-hook 'setup-custom-doom-modeline)
(doom-modeline-mode 1)
#+END_SRC

** Minions
A minor-mode menu for the mode line. → [[*Minions Package][Generated Code]]
*** Minions Configuration Block
#+NAME: minions-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable minions mode
(minions-mode 1)
;; Hide the minions indicator
(setq minions-mode-line-lighter "")
#+END_SRC

** Nerd Icons
Icon support with completion, dired integration. → [[*Nerd Icons Package][Generated Code]]
*** Nerd Icons Configuration Block
#+NAME: nerd-icons-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Nerd icons configuration (automatically loaded)
#+END_SRC

*** Nerd Icons Completion
Icon support in completion interfaces for better visual identification. → [[*Nerd Icons Completion Package][Generated Code]]
**** Nerd Icons Completion Configuration Block
#+NAME: nerd-icons-completion-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable nerd icons completion
(nerd-icons-completion-mode)
;; Setup marginalia integration
(add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup)
#+END_SRC

*** Nerd Icons Dired
Icon display in dired buffers for enhanced file type recognition. → [[*Nerd Icons Dired Package][Generated Code]]
**** Nerd Icons Dired Configuration Block
#+NAME: nerd-icons-dired-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable nerd icons in dired
(add-hook 'dired-mode-hook #'nerd-icons-dired-mode)
#+END_SRC

*** Nerd Icons Multimodal
Multimodal icon support across different Emacs interfaces. → [[*Nerd Icons Multimodal Package][Generated Code]]
**** Nerd Icons Multimodal Configuration Block
#+NAME: nerd-icons-multimodal-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable nerd icons multimodal globally
(global-nerd-icons-multimodal-mode 1)
#+END_SRC

** Emoji Font Configuration
Emoji font fallback setup for better UTF-8 emoji display. → [[*Emoji Font Setup][Generated Code]]
*** Emoji Font Configuration Block
#+NAME: emoji-font-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure emoji font fallback for better UTF-8 emoji display
(when (display-graphic-p)
  ;; Set fallback fonts for emoji
  (set-fontset-font t 'emoji "Noto Color Emoji" nil 'prepend)
  (set-fontset-font t 'symbol "Noto Color Emoji" nil 'prepend)
  (set-fontset-font t 'unicode "Noto Color Emoji" nil 'prepend)

  ;; Alternative fallback fonts if Noto Color Emoji is not available
  (set-fontset-font t 'emoji "Apple Color Emoji" nil 'append)
  (set-fontset-font t 'symbol "Apple Color Emoji" nil 'append)
  (set-fontset-font t 'unicode "Apple Color Emoji" nil 'append)

  ;; Symbola as final fallback
  (set-fontset-font t 'emoji "Symbola" nil 'append)
  (set-fontset-font t 'symbol "Symbola" nil 'append))
#+END_SRC

** Org Mode
Org-mode configuration with modern enhancements. → [[*Org Mode Package][Generated Code]]
*** Basic Org Settings
**** Basic Org Settings Configuration Block
#+NAME: basic-org-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Core org-mode behavior
(setq org-startup-folded 'content               ; Start with content visible
      org-startup-indented t                    ; Enable visual indentation
      org-startup-truncated nil                 ; Wrap lines
      org-startup-with-inline-images t          ; Show images by default
      org-pretty-entities t                     ; Show special symbols nicely
      org-use-sub-superscripts '{}              ; Only interpret _ and ^ with braces
      org-fontify-emphasized-text t             ; Highlight markup
      org-fontify-whole-heading-line t          ; Highlight entire heading line
      org-fontify-quote-and-verse-blocks t      ; Highlight quote blocks

      ;; Heading behavior
      org-cycle-separator-lines 2               ; Keep blank lines between headings
      org-special-ctrl-k t                      ; Smart kill line

      ;; Link behavior
      org-return-follows-link t                 ; Enter follows links
      org-mouse-1-follows-link t                ; Mouse follows links
      org-link-descriptive t                    ; Show link descriptions, not URLs
      org-link-file-path-type 'relative         ; Use relative paths

      ;; Editing behavior
      org-edit-src-content-indentation 0        ; No extra indentation in src blocks
      org-edit-timestamp-down-means-later t     ; Down arrow makes time later
      org-yank-adjusted-subtrees t              ; Adjust level when yanking
      org-yank-folded-subtrees nil              ; Don't fold pasted subtrees

      ;; Code blocks and babel
      org-confirm-babel-evaluate nil            ; Don't ask before executing
      org-src-fontify-natively t                ; Syntax highlighting in blocks
      org-src-tab-acts-natively t               ; Tab acts as in native mode
      org-src-preserve-indentation t            ; Keep indentation
      org-highlight-latex-and-related '(native) ; fontify latex blocks natively
      org-src-window-setup 'current-window)     ; Edit in current window

;; Todo keywords with colors
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "STARTED(s)" "|" "DONE(d)" "CANCELLED(c)")))

(setq org-todo-keyword-faces
      '(("TODO" . (:foreground "#ff6c6b" :weight bold))
        ("NEXT" . (:foreground "#ECBE7B" :weight bold))
        ("STARTED" . (:foreground "#1B9EE0" :weight bold))
        ("DONE" . (:foreground "#98be65" :weight bold))
        ("CANCELLED" . (:foreground "#5B6268" :weight bold))))

;; Lists
(setq org-list-allow-alphabetical t)         ; Allow alphabetical lists
(setq org-list-indent-offset 2)              ; Indent list items

;; Timestamps and scheduling
(setq org-time-stamp-rounding-minutes '(0 5)) ; Round to 5 minutes
(setq org-display-custom-times t)            ; Use custom time format
(setq org-time-stamp-custom-formats
      '("<%Y-%m-%d %a>" . "<%Y-%m-%d %a %H:%M>"))

;; Archive
(setq org-archive-location "archive/%s_archive::")

;; Refile targets
(setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)

;; Speed commands (single letter commands at beginning of heading)
(setq org-use-speed-commands t)

;; Images
(setq org-image-actual-width '(300))         ; Default image width

;; Export settings
(setq org-export-with-smart-quotes t)        ; Use smart quotes
(setq org-export-with-broken-links 'mark)    ; Mark broken links

;; Custom function to save, tangle, and reload emacs configuration
(defun qq/save-tangle-reload-config ()
  "Save init.org, tangle to ~/.emacs.d/, and reload Emacs."
  (interactive)
  (when (string-match "init\\.org$" (buffer-file-name))
    (save-buffer)
    (message "Saving init.org...")

    ;; Tangle the file (automatically saves to ~/.emacs.d/ via tangle headers)
    (org-babel-tangle-file (buffer-file-name))
    (message "Tangled configuration files to ~/.emacs.d/...")

    ;; Reload Emacs configuration
    (message "Reloading Emacs configuration...")
    (load-file (expand-file-name "~/.emacs.d/init.el"))
    (message "Configuration reloaded successfully!")))

;; (add-hook 'org-mode-hook  #'variable-pitch-mode)
(add-hook 'org-mode-hook  (lambda () (electric-indent-local-mode -1))) ;; disable electric indentation
(set-face-attribute 'org-ellipsis nil :inherit 'default :box nil)
#+END_SRC

#+NAME: org-babel-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure org-babel for code execution (after packages are loaded)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (shell . t)
   (python . t)
   (js . t)
   (plantuml . t)
   (sql . t)
   (org . t)
   (dot . t)
   (rust . t)
   (typescript . t)
   (http . t)
   (restclient . t)
   (java . t)
   (C . t)
   (perl . t)
   (ruby . t)
   (clojure . t)
   (lua . t)
   (haskell . t)))
#+END_SRC

*** Org Modern
Modern styling for org-mode that replaces traditional org-mode visual elements with Unicode symbols and improved typography. This package provides a cleaner, more visually appealing org-mode experience by using modern Unicode characters for bullets, checkboxes, and other elements while maintaining full compatibility with standard org-mode functionality. → [[*Org Modern Package][Generated Code]]

**** Org Modern Configuration Block
#+NAME: org-modern-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure org-modern for better org-mode styling
(setq org-modern-hide-stars nil
      org-modern-table nil
      org-modern-list '((?* . "•") (?+ . "‣"))
      ;; Edit settings
      org-auto-align-tags nil
      org-tags-column 0
      org-catch-invisible-edits 'show-and-error
      org-special-ctrl-a/e t
      org-insert-heading-respect-content t

      ;; Org styling, hide markup etc.
      org-hide-emphasis-markers t
      org-pretty-entities t

      ;; Ellipsis styling
      org-ellipsis "…"

      ;; Agenda styling
      org-agenda-tags-column 0
      org-agenda-block-separator ?─
      org-agenda-time-grid
      '((daily today require-timed)
        (800 1000 1200 1400 1600 1800 2000)
        " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
      org-agenda-current-time-string
      "⭠ now ─────────────────────────────────────────────────")
(set-face-attribute 'org-ellipsis nil :inherit 'default :box nil)
(global-org-modern-mode)
(set-face-attribute 'org-modern-symbol nil :family "Iosevka")
#+END_SRC

*** Org Modern Indent
Provides improved visual indentation for org-mode when used with org-modern. This package enhances the visual hierarchy of org documents by adding subtle indentation guides that make the structure more apparent while maintaining the clean aesthetic of org-modern. → [[*Org Modern Indent Package][Generated Code]]

**** Org Modern Indent Configuration Block
#+NAME: org-modern-indent-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable org-modern-indent for better visual indentation
(add-hook 'org-mode-hook #'org-modern-indent-mode)
#+END_SRC

*** Org Cliplink
Simplifies the process of inserting web links into org-mode documents by automatically fetching the title of web pages from URLs in the clipboard. This package eliminates the need to manually copy and format web page titles, making it much faster to create properly formatted org-mode links with descriptive titles. → [[*Org Cliplink Package][Generated Code]]

**** Org Cliplink Configuration Block
#+NAME: org-cliplink-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Org-cliplink for inserting URLs from clipboard
;; No additional configuration needed
#+END_SRC

*** Org Roam
A powerful note-taking system that implements the Zettelkasten method within org-mode. Org-roam creates a network of interconnected notes, allowing for non-linear thinking and knowledge building. It provides features like backlinks, graph visualization, daily notes, and a robust search system that makes it easy to build and navigate a personal knowledge base. → [[*Org Roam Package][Generated Code]]

**** Org Roam Configuration Block
#+NAME: org-roam-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure org-roam for zettelkasten-style note-taking
(setq org-roam-db-location (concat qq/cache-directory "org-roam.db")
      org-roam-completion-everywhere t
      org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag))
      org-roam-directory qq/org-roam-base-directory)

;; Directory already created in site-specific configuration

;; Enable org-roam features
(require 'org-roam-protocol)
(require 'org-roam-dailies)

;; Initialize org-roam with error handling
(condition-case err
    (progn
      (org-roam-db-autosync-mode)
      (org-roam-setup))
  (error
   (message "Org-roam initialization failed: %s" err)
   (message "Try deleting %s and restart Emacs" org-roam-db-location)))

;; Fast note insertion for smoother writing flow
(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))
#+END_SRC

*** Org Appear
Dynamically shows and hides org-mode markup characters based on cursor position. When editing org documents, this package reveals emphasis markers (like *bold* and /italic/) only when the cursor is positioned on them, providing a cleaner reading experience while maintaining easy access to markup when needed for editing. → [[*Org Appear Package][Generated Code]]

**** Org Appear Configuration Block
#+NAME: org-appear-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure org-appear to only show markup in insert mode
(setq org-appear-autoemphasis nil)      ; Don't show emphasis markers on cursor
(setq org-appear-autolinks nil)         ; Don't show link markup on cursor
(setq org-appear-autosubmarkers nil)    ; Don't show sub/superscript markers on cursor
(setq org-appear-trigger 'manual)       ; Only trigger manually

;; Enable org-appear-mode and configure evil insert mode integration
(add-hook 'org-mode-hook (lambda ()
                           (org-appear-mode 1)  ; Enable org-appear-mode
                           (add-hook 'evil-insert-state-entry-hook
                                     #'org-appear-manual-start
                                     nil
                                     t)
                           (add-hook 'evil-insert-state-exit-hook
                                     #'org-appear-manual-stop
                                     nil
                                     t)))
#+END_SRC

*** Org Download
Enables drag-and-drop functionality for images in org-mode documents. This package automatically handles image insertion, file naming, and link creation when images are dropped into org buffers. It also provides screenshot functionality and automatic image organization, making it easy to include visual content in org documents. → [[*Org Download Package][Generated Code]]

**** Org Download Configuration Block
#+NAME: org-download-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure org-download for drag-and-drop images
(setq org-download-method 'directory
      org-download-image-dir "images"
      org-download-screenshot-method "gnome-screenshot -a -f %s")
#+END_SRC

*** Org Web Tools
Provides various web-related utilities for org-mode, including the ability to insert web page content as org-mode text, convert HTML to org format, and extract readable content from web pages. This package is particularly useful for research and content curation workflows within org-mode. → [[*Org Web Tools Package][Generated Code]]

**** Org Web Tools Configuration Block
#+NAME: org-web-tools-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Org web tools for web utilities
;; No additional configuration needed
#+END_SRC

*** Org QL
Provides a SQL-like query language for searching and filtering org-mode content. This package allows for powerful, flexible searches across org files using an intuitive syntax that supports complex conditions, date ranges, and property matching. It's particularly useful for large org-mode databases and advanced agenda views. → [[*Org QL Package][Generated Code]]

**** Org QL Configuration Block
#+NAME: org-ql-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Org-ql for SQL-like queries of org files
;; No additional configuration needed
#+END_SRC

*** Org Contrib
Contains additional org-mode functionality and exporters that extend the core org-mode capabilities. This package includes extra export backends, additional org-mode features, and various utilities that enhance the org-mode experience. It's particularly useful for specialized workflows and advanced org-mode usage. → [[*Org Contrib Package][Generated Code]]

**** Org Contrib Configuration Block
#+NAME: org-contrib-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure org-contrib extras
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))
#+END_SRC

*** Org Eldoc
Provides function signature display in org-mode, showing function documentation and signatures for elisp functions at point. This enhances the development experience when working with elisp code in org-mode documents. → [[*Org Eldoc Package][Generated Code]]

**** Org Eldoc Configuration Block
#+NAME: org-eldoc-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure org-eldoc for function signature display
(add-hook 'org-mode-hook 'org-eldoc-load)
#+END_SRC

*** Org Tempo
Built-in org-mode template expansion system for quick insertion of common structures like code blocks, quotes, and examples. Enables shortcuts like <s TAB to insert source blocks. → [[*Org Tempo Package][Generated Code]]

**** Org Tempo Configuration Block
#+NAME: org-tempo-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable org-tempo for template expansion
(require 'org-tempo)

;; Add custom tempo templates if needed
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
#+END_SRC

*** Org Habit
Built-in org-mode habit tracking functionality for building and monitoring daily habits. Provides visual habit graphs and consistency tracking in your agenda views. → [[*Org Habit Package][Generated Code]]

**** Org Habit Configuration Block
#+NAME: org-habit-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable org-habit tracking
(require 'org-habit)

;; Configure habit display
(setq org-habit-show-habits-only-for-today t)
(setq org-habit-graph-column 60)
(setq org-habit-preceding-days 7)
(setq org-habit-following-days 1)
#+END_SRC

*** Org Phscroll
Provides smooth scrolling functionality for org-mode, enhancing navigation experience with fluid scrolling animations. This package improves the visual experience when moving through large org documents. → [[*Org Phscroll Package][Generated Code]]

**** Org Phscroll Configuration Block
#+NAME: org-phscroll-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure org-phscroll for smooth scrolling
(setq org-phscroll-enable t)
#+END_SRC

*** Org Popup Posframe
Display org-mode popups in posframe floating windows. This package enhances the org-mode experience by displaying various popups (like tag selection, todo keywords) in floating frames instead of the default echo area, providing better visibility and context. → [[*Org Popup Posframe Package][Generated Code]]

**** Org Popup Posframe Configuration Block
#+NAME: org-popup-posframe-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable org-popup-posframe mode
(org-popup-posframe-mode 1)

;; Configure popup appearance
;; (setq org-popup-posframe-width 80)
;; (setq org-popup-posframe-height 20)
#+END_SRC

*** Ob Napkin
Provides babel support for creating diagrams using napkin, a simple diagram markup language. This package allows you to create and render diagrams directly within org-mode documents using code blocks, making it easy to include visual documentation and diagrams in your org files. → [[*Ob Napkin Package][Generated Code]]

**** Ob Napkin Configuration Block
#+NAME: ob-napkin-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure ob-napkin for diagram support
(add-to-list 'org-src-lang-modes '("napkin-puml" . plantuml))
#+END_SRC

** Projectile
Project management and navigation. → [[*Projectile Package][Generated Code]]
*** Projectile Configuration Block
#+NAME: projectile-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable projectile globally
(projectile-global-mode)

;; Performance settings
(setq projectile-enable-caching t)
(setq projectile-git-submodule-command nil)
(setq projectile-tags-command "gtags")

;; Cache file locations
(setq projectile-cache-file (concat qq/cache-directory "projectile.cache")
      projectile-known-projects-file (concat qq/cache-directory "projectile-bookmarks.eld"))

;; Global ignores
(add-to-list 'projectile-globally-ignored-files ".tern-port")
(add-to-list 'projectile-globally-ignored-files "GTAGS")
(add-to-list 'projectile-globally-ignored-files "GPATH")
(add-to-list 'projectile-globally-ignored-files "GRTAGS")
(add-to-list 'projectile-globally-ignored-files "GSYMS")
(add-to-list 'projectile-globally-ignored-files ".DS_Store")
(add-to-list 'projectile-globally-ignored-files ".clang-format")
(add-to-list 'projectile-globally-ignored-files ".clang-tidy")
(add-to-list 'projectile-globally-ignored-files ".gitignore")
(add-to-list 'projectile-globally-ignored-files ".gitattributes")
(add-to-list 'projectile-globally-ignored-directories ".cquery_cached_index")
#+END_SRC

** Additional Tools
*** Undo System
**** Undo-Fu-Session
Persistent undo history across Emacs sessions, maintaining undo trees between restarts. → [[*Undo-Fu-Session Package][Generated Code]]

***** Undo-Fu-Session Configuration Block
#+NAME: undo-fu-session-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure undo-fu-session for persistent undo
(setq undo-fu-session-directory (concat qq/cache-directory "undo-fu-session/"))
(undo-fu-session-global-mode)
#+END_SRC

**** Vundo
Modern visual undo system with tree-like interface, superior to undo-tree. → [[*Vundo Package][Generated Code]]

***** Vundo Configuration Block
#+NAME: vundo-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure vundo for visual undo
(setq vundo-glyph-alist vundo-unicode-symbols)
#+END_SRC

*** Document Viewing
**** PDF Tools
Superior PDF viewing in Emacs, much better than the default doc-view mode. → [[*PDF Tools Package][Generated Code]]

***** PDF Tools Configuration Block
#+NAME: pdf-tools-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
  ;; Configure pdf-tools for better PDF viewing
  ;; Install epdfinfo on first PDF open (deferred installation)
  (setq pdf-view-continuous t)
  (setq pdf-annot-activate-created-annotations t)
  (setq pdf-view-midnight-colors '("#ffffff" . "#000000"))
  ;; Load pdf-tools without installing (binary already built)
  (pdf-tools-install :no-query)
#+END_SRC

*** Code Formatting
**** Apheleia
Modern code formatting that works with LSP and various formatters. Essential for automatic code formatting on save. → [[*Apheleia Package][Generated Code]]

***** Apheleia Configuration Block
#+NAME: apheleia-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure apheleia for code formatting
(apheleia-global-mode)
(setq apheleia-log-only-errors t)
#+END_SRC

*** Security & Password Management
**** Bitwarden
Password management integration for secure credential access. → [[*Bitwarden Package][Generated Code]]

***** Bitwarden Configuration Block
#+NAME: bitwarden-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure bitwarden for password management
;; Basic configuration - customize as needed
#+END_SRC

*** Development Enhancement
**** Perspective
Workspace management that groups buffers and windows by project/task context. → [[*Perspective Package][Generated Code]]

***** Perspective Configuration Block
#+NAME: perspective-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(defvar qq/persp-save-dir (concat  qq/cache-directory "persp-conf/"))
;; Configure perspective for workspace management
(setq persp-mode-prefix-key (kbd "C-x x"))
;; Store perspective state in cache directory
(setq persp-state-default-file (concat qq/persp-save-dir "default"))
;; Save perspective state on quit
(setq persp-auto-save-fname (concat qq/persp-save-dir "perspective-auto-save"))
(setq persp-save-dir qq/persp-save-dir)
(setq persp-auto-save-opt 2) ; Save on quit
(persp-mode)
(setq persp-show-modestring t)

;; Create save folder if it doesn't exist
(unless (file-exists-p qq/persp-save-dir)
  (make-directory qq/persp-save-dir))

;; Ignore temporary buffers
(add-hook 'persp-common-buffer-filter-functions
          (lambda (b) (or (string-prefix-p "*" (buffer-name b))
                          (string-prefix-p "magit" (buffer-name b)))))

;; Autosave perspective on quit
(add-hook 'kill-emacs-hook #'persp-state-save)

;; Use perspective buffer list instead of the default buffer list
(with-eval-after-load "persp-mode"
  (substitute-key-definition #'switch-to-buffer #'persp-switch-to-buffer* global-map)
  (substitute-key-definition #'kill-buffer #'persp-kill-buffer* global-map))

;; Map leader key to perspective prefix
(with-eval-after-load 'evil
  (general-def '(normal visual) "SPC l" 'perspective-map)
  (general-def 'insert "C-SPC l" 'perspective-map))
#+END_SRC
**** Deadgrep
Fast ripgrep interface with better performance than built-in grep commands. → [[*Deadgrep Package][Generated Code]]

***** Deadgrep Configuration Block
#+NAME: deadgrep-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure deadgrep for fast searching
;; No additional configuration needed - works out of the box
#+END_SRC

**** Magit Delta
Enhanced diff display in Magit with improved syntax highlighting and readability. → [[*Magit Delta Package][Generated Code]]

***** Magit Delta Configuration Block
#+NAME: magit-delta-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure magit-delta for better diffs
(add-hook 'magit-mode-hook (lambda () (magit-delta-mode +1)))
#+END_SRC

**** Git Timemachine
Interactive git history browsing that lets you step through file changes over time. → [[*Git Timemachine Package][Generated Code]]

***** Git Timemachine Configuration Block
#+NAME: git-timemachine-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure git-timemachine
;; No additional configuration needed - works out of the box
#+END_SRC

**** Difftastic
Structural diff tool that understands syntax for better code diffs. → [[*Difftastic Package][Generated Code]]

***** Difftastic Configuration Block
#+NAME: difftastic-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure difftastic
;; (difftastic-bindings-mode)
(setq difftastic-executable "difft")
(general-define-key
 :keymaps 'difftastic-mode-map
 :states '(normal)
 "gr" #'difftastic-rerun
 "q" #'kill-buffer-and-window)
:commands (difftastic-magit-diff
           difftastic-magit-show
           difftastic-files
           difftastic-buffers)
:init
(let ((suffix '("d" "Difftastic show" difftastic-magit-show)))
  (with-eval-after-load 'magit-blame
    (unless (equal (transient-parse-suffix 'magit-blame suffix)
                   (transient-get-suffix 'magit-blame "b"))
      (transient-append-suffix 'magit-blame "b" suffix))
    (keymap-set magit-blame-read-only-mode-map
                "d" #'difftastic-magit-show)))
(with-eval-after-load 'magit-diff
  (transient-append-suffix 'magit-diff '(-1 -1)
    [("D" "Difftastic diff (dwim)" difftastic-magit-diff)
     ("S" "Difftastic show" difftastic-magit-show)])
  (general-define-key
   :keymaps 'magit-blame-read-only-mode-map
   :states 'normal
   "D" #'difftastic-magit-show
   "S" #'difftastic-magit-show))
#+END_SRC

*** UI Enhancement
**** Mode Line Bell
Visual bell notification instead of audio beep for better user experience. → [[*Mode Line Bell Package][Generated Code]]

***** Mode Line Bell Configuration Block
#+NAME: mode-line-bell-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure mode-line-bell for visual notifications
(mode-line-bell-mode)
#+END_SRC

**** Fixed Pitch Mode
Forces fixed-width font for specific modes and contexts. → [[*Fixed Pitch Mode Package][Generated Code]]

***** Fixed Pitch Mode Configuration Block
#+NAME: fixed-pitch-mode-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure fixed-pitch-mode for fixed-width fonts
(setq-default cursor-type 'bar)
:custom
(fixed-pitch-whitelist-hooks
 '(display-line-numbers-mode-hook
   vertico-mode-hook
   vertico-posframe-mode-hook
   which-key-mode-hook))
(fixed-pitch-blacklist-hooks
 '(comint-mode-hook))
(fixed-pitch-dont-change-cursor t)
#+END_SRC

**** Highlight Indent Guides
Visual indentation guides for better code readability and structure. → [[*Highlight Indent Guides Package][Generated Code]]

***** Highlight Indent Guides Configuration Block
#+NAME: highlight-indent-guides-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure highlight-indent-guides
(add-hook 'prog-mode-hook #'highlight-indent-guides-mode)
(custom-set-variables
 '(highlight-indent-guides-method 'character))
#+END_SRC

**** Colorful Mode
Colorize color names and hex codes in buffers for better visual recognition of colors in CSS, web development, and config files. → [[*Colorful Mode Package][Generated Code]]

***** Colorful Mode Configuration Block
#+NAME: colorful-mode-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(global-colorful-mode t)
(add-to-list 'global-colorful-modes 'helpful-mode)
:custom
(colorful-use-prefix t)
(colorful-only-strings 'only-prog)
(css-fontify-colors nil)
#+END_SRC

* Basic Settings
** Site-Specific Configuration
*** System Detection and Paths
Multi-machine configuration based on hostname detection. → [[*System Detection and Paths Code][Generated Code]]
#+NAME: system-detection-paths
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Site-specific configuration based on system-name
(defvar qq/current-system (system-name)
  "Current system hostname for site-specific configuration.")

;; Define site-specific variables
(defvar qq/org-roam-base-directory nil
  "Base directory for org-roam notes, set per-site.")
#+END_SRC

*** Linux Work Desktop (eagle, Legion-U)
#+NAME: linux-work-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(setq qq/org-roam-base-directory "~/Documents/Org-files/RoamNotes/")
;; Font configuration for Linux work desktop
(setq use-default-font-for-symbols nil)
(set-fontset-font t 'unicode (font-spec :family "JuliaMono"))
;; (custom-theme-set-faces
;;  'user
;;  '(variable-pitch ((t (:family "Alegreya" :height 1.2))))
;;  '(fixed-pitch ((t (:family "PragmataPro Liga" :slant normal :weight normal :height 1.0 :width normal)))))
(defvar qq/modeline-font-height 120)
;; (set-face-attribute 'default nil :family "Iosevka" :height 108)
(set-face-attribute 'default nil :font (font-spec :family "PragmataPro Liga" :size 10.5 :weight 'regular))
(set-face-attribute 'fixed-pitch nil :font (font-spec :family "PragmataPro Liga" :size 10.5 :weight 'regular))
(set-face-attribute 'variable-pitch nil :font (font-spec :family "Alegreya" :height 1.0 :weight 'medium))

#+END_SRC

*** Mac @home (darwin)
#+NAME: mac-home-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(setq qq/org-roam-base-directory "~/Documents/OrgFiles/RoamNotes/")
;; Font configuration for Mac
(custom-theme-set-faces
 'user
 '(variable-pitch ((t (:family "Iosevka Aile" :height 200))))
 '(fixed-pitch ((t (:family "PragmataPro Liga" :slant normal :weight normal :height 180 :width normal)))))
(defvar qq/modeline-font-height 220)
(set-face-attribute 'default nil :family "PragmataPro Liga" :height 180)
(set-frame-font "PragmataPro Liga 18" nil t)
#+END_SRC

*** Arch Linux / Manjaro (archlinux, z390-manjaro)
#+NAME: arch-manjaro-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(setq qq/org-roam-base-directory "~/org/roam/")
;; Font configuration for Arch/Manjaro
(custom-theme-set-faces
 'user
 '(variable-pitch ((t (:family "Cabin" :height 1.2))))
 '(fixed-pitch ((t (:family "PragmataPro Liga" :slant normal :weight normal :height 1.1 :width normal)))))
(defvar qq/modeline-font-height 140)
(set-face-attribute 'default nil :family "PragmataPro Liga" :height 108)
#+END_SRC

*** Work Laptop (ThinkPad E14/E440)
#+NAME: thinkpad-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(setq qq/org-roam-base-directory "~/Documents/Org-files/RoamNotes/")
;; Font configuration for ThinkPad
(custom-theme-set-faces
 'user
 '(variable-pitch ((t (:family "Cabin" :height 1.2))))
 '(fixed-pitch ((t (:family "PragmataPro" :slant normal :weight normal :height 1.0 :width normal)))))
(defvar qq/modeline-font-height 120)
(set-face-attribute 'default nil :family "PragmataPro" :height 120)
#+END_SRC

*** Default Configuration
#+NAME: default-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(setq qq/org-roam-base-directory (concat qq/cache-directory "RoamNotes/"))
;; Default font configuration
(custom-theme-set-faces
 'user
 '(variable-pitch ((t (:family "Iosevka Aile" :height 1.3))))
 '(fixed-pitch ((t (:family "PragmataPro Liga" :slant normal :weight normal :height 98 :width normal)))))
(defvar qq/modeline-font-height 120)
(set-face-attribute 'default nil :family "PragmataPro Liga" :height 98)
(set-frame-font "PragmataPro Liga 9" nil t)
#+END_SRC

*** End Configuration
#+NAME: end-site-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none

;; Ensure org-roam directory exists
(unless (file-directory-p qq/org-roam-base-directory)
  (make-directory qq/org-roam-base-directory t))

(message "Site-specific config loaded for: %s" qq/current-system)
(message "Org-roam directory: %s" qq/org-roam-base-directory)
#+END_SRC

** Tree-sitter Configuration
*** Tree-sitter Setup and Language Sources
Automatic tree-sitter mode activation and language grammar management. → [[*Tree-sitter Code][Generated Code]]
#+NAME: tree-sitter-setup
#+BEGIN_SRC emacs-lisp :tangle no :exports none
  ;; Require tree-sitter support
  (require 'treesit)

  ;; Configure tree-sitter to use cache directory
  (add-to-list 'treesit-extra-load-path (concat qq/cache-directory "tree-sitter"))

  ;; Create tree-sitter directory if it doesn't exist
  (unless (file-directory-p (concat qq/cache-directory "tree-sitter"))
    (make-directory (concat qq/cache-directory "tree-sitter") t))

  ;; Override tree-sitter installation directory
  (setq treesit-extra-load-path (list (concat qq/cache-directory "tree-sitter")))

  ;; Advice to install grammars in cache directory
  (advice-add 'treesit-install-language-grammar :around
              (lambda (orig-fun lang &optional out-dir)
                (let ((install-dir (or out-dir (concat qq/cache-directory "tree-sitter"))))
                  (funcall orig-fun lang install-dir))))

  ;; Set up major mode remapping for tree-sitter modes
  (dolist (mapping
           '((python-mode . python-ts-mode)
             (css-mode . css-ts-mode)
             (typescript-mode . typescript-ts-mode)
             (js-mode . js-ts-mode)
             (js2-mode . js-ts-mode)
             (c-mode . c-ts-mode)
             (c++-mode . c++-ts-mode)
             (c-or-c++-mode . c-or-c++-ts-mode)
             (bash-mode . bash-ts-mode)
             (json-mode . json-ts-mode)
             (js-json-mode . json-ts-mode)
             (sh-mode . bash-ts-mode)
             (sh-base-mode . bash-ts-mode)))
    (add-to-list 'major-mode-remap-alist mapping))

  ;; Configure tree-sitter language sources
  (setq treesit-language-source-alist
        '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
          (c . ("https://github.com/tree-sitter/tree-sitter-c"))
          (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
          (css . ("https://github.com/tree-sitter/tree-sitter-css"))
          (cmake . ("https://github.com/uyha/tree-sitter-cmake"))
          (elisp . ("https://github.com/Wilfred/tree-sitter-elisp"))
          (go . ("https://github.com/tree-sitter/tree-sitter-go"))
          (html . ("https://github.com/tree-sitter/tree-sitter-html"))
          (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
          (json . ("https://github.com/tree-sitter/tree-sitter-json"))
          (julia . ("https://github.com/tree-sitter/tree-sitter-julia"))
          (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
          (make . ("https://github.com/alemuller/tree-sitter-make"))
          (markdown . ("https://github.com/ikatyang/tree-sitter-markdown"))
          (python . ("https://github.com/tree-sitter/tree-sitter-python"))
          (php . ("https://github.com/tree-sitter/tree-sitter-php" "master" "php/src"))
          (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
          (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
          (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
          (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
          (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
          (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
          (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))
          (prisma . ("https://github.com/victorhqc/tree-sitter-prisma"))
          (zig . ("https://github.com/GrayJack/tree-sitter-zig"))))

  ;; Set tree-sitter font-lock level for better highlighting
  (setq treesit-font-lock-level 4)

  ;; Configure C/C++ indentation
  (custom-set-variables '(c-ts-mode-indent-offset 4))

  (message "Tree-sitter configuration loaded with %d languages" (length treesit-language-source-alist))
#+END_SRC

** Treesit Fold
Code folding functionality based on tree-sitter for structured code navigation and organization. This package provides intelligent folding that understands code structure. → [[*Treesit Fold Package][Generated Code]]

*** Treesit Fold Configuration Block
#+NAME: treesit-fold-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure treesit-fold for code folding
(global-treesit-fold-mode 1)

;; Enable treesit-fold indicators
(treesit-fold-indicators-mode 1)
#+END_SRC

** Performance Optimizations
Performance and garbage collection optimizations. → [[*Performance Optimizations Code][Generated Code]]
#+NAME: performance-optimizations
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Garbage Collection Optimization
(setq gc-cons-threshold (* 100 1024 1024)) ; 100MB after startup
;; Remove aggressive GC timers that cause stuttering
;; (run-with-idle-timer 2 t #'garbage-collect)  ; Too frequent, causes lag
;; (add-hook 'focus-out-hook #'garbage-collect) ; Causes window switch lag

;; Performance optimizations
(setq inhibit-compacting-font-caches t)
(setq read-process-output-max (* 1024 1024)) ; 1MB for better process communication

;; Redisplay optimizations
(setq redisplay-dont-pause t
      bidi-paragraph-direction 'left-to-right
      bidi-display-reordering nil
      jit-lock-defer-time 0.05
      fast-but-imprecise-scrolling t
      cursor-in-non-selected-windows nil
      highlight-nonselected-windows nil
      idle-update-delay 1.0)
#+END_SRC

** UI Cleanup and Visual Settings
User interface cleanup and visual improvements. → [[*UI Cleanup and Visual Settings Code][Generated Code]]
#+NAME: ui-cleanup
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Disable unnecessary UI elements
(dolist (mode
         '(tool-bar-mode       ; No toolbars
           scroll-bar-mode     ; No scroll bars
           menu-bar-mode       ; No menu bar
           blink-cursor-mode)) ; No blinking cursor
  (funcall mode 0))

;; Startup behavior
(setq inhibit-splash-screen t
      inhibit-startup-echo-area-message t
      inhibit-startup-message t
      show-trailing-whitespace t
      initial-scratch-message nil)

;; enable smooth scrolling
(pixel-scroll-precision-mode 1)

;; Visual improvements
(setq ring-bell-function 'ignore) ; Quiet bell
(global-hl-line-mode 1)          ; Highlight current line

;; Basic transparency (optional)
(set-frame-parameter (selected-frame) 'alpha '(95 . 95))
(add-to-list 'default-frame-alist '(alpha . (95 . 95)))

;; Fix italics rendering
(set-face-attribute 'italic nil :inherit nil :slant 'italic)

(set-charset-priority 'unicode) ;; utf8 everywhere
(setq locale-coding-system 'utf-8
      coding-system-for-read 'utf-8
      coding-system-for-write 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))

;; less noise when compiling elisp
(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
(setq native-comp-async-report-warnings-errors nil)
(setq load-prefer-newer t)
#+END_SRC

** Essential Modes
Enable essential built-in modes. → [[*Essential Modes Code][Generated Code]]
#+NAME: essential-modes
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Enable useful modes
(dolist (mode
         '(abbrev-mode
           column-number-mode
           delete-selection-mode
           recentf-mode
           show-paren-mode
           global-auto-revert-mode
           transient-mark-mode
           line-number-mode
           display-time-mode
           size-indication-mode))
  (funcall mode 1))

;; Savehist for minibuffer history
(savehist-mode +1)
#+END_SRC

** Cache Directory Setup
Configure cache directories for better organization. → [[*Cache Directory Setup Code][Generated Code]]
#+NAME: cache-directory-setup
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Cache directory already defined in bootstrap section, now set as defcustom for completeness
(defcustom qq/cache-directory
  (concat user-emacs-directory ".cache/")
  "The storage location for various persistent files."
  :type '(string)
  :group 'qq)

;; Create cache directory if it doesn't exist
(unless (file-directory-p qq/cache-directory)
  (make-directory qq/cache-directory t))

;; Configure package directories to use cache
(setq transient-history-file (concat qq/cache-directory "transient/history.el")
      transient-levels-file (concat qq/cache-directory "transient/levels.el")
      transient-values-file (concat qq/cache-directory "transient/values.el"))

;; Create transient directory
(unless (file-directory-p (concat qq/cache-directory "transient/"))
  (make-directory (concat qq/cache-directory "transient/") t))

;; Configure native compilation cache
(setq native-comp-eln-load-path (list (concat qq/cache-directory "eln-cache/")))

;; Create eln-cache directory
(unless (file-directory-p (concat qq/cache-directory "eln-cache/"))
  (make-directory (concat qq/cache-directory "eln-cache/") t))

;; Custom Cache
(setq custom-file (concat qq/cache-directory "custom.el"))
(when (file-exists-p custom-file)
  (load custom-file))

#+END_SRC

** File and Buffer Management
File handling, backups, and buffer management. → [[*File and Buffer Management Code][Generated Code]]
#+NAME: file-buffer-management
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Backup and autosave configuration
(setq backup-by-copying t
      delete-old-versions t
      kept-new-versions 2
      kept-old-versions 2
      version-control t
      create-lockfiles nil ; Turn off lockfiles
      make-backup-files t ; Enable backup files
      auto-save-default t) ; Enable auto-save

;; Create backup and auto-save directories
(unless (file-directory-p (concat qq/cache-directory "backups/"))
  (make-directory (concat qq/cache-directory "backups/") t))
(unless (file-directory-p (concat qq/cache-directory "auto-save-list/"))
  (make-directory (concat qq/cache-directory "auto-save-list/") t))

;; Configure file locations to use cache directory
(setq save-place-file (concat qq/cache-directory "places")
      savehist-file (concat qq/cache-directory "savehist")
      recentf-save-file (concat qq/cache-directory "recentf")
      bookmark-default-file (concat qq/cache-directory "bookmarks")
      backup-directory-alist `(("." . ,(concat qq/cache-directory "backups/")))
      auto-save-file-name-transforms `(("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" ,(concat qq/cache-directory "auto-save-list/" "\\2") t)))

;; Use y/n instead of yes/no
(fset 'yes-or-no-p 'y-or-n-p)

;; Better buffer names for duplicates
(setq uniquify-buffer-name-style 'reverse
      uniquify-separator "|"
      uniquify-ignore-buffers-re "^\\*"
      uniquify-after-kill-buffer-p t)

;; File handling
(setq recentf-max-saved-items 1000
      recentf-max-menu-items 500
      savehist-autosave-interval 60
      bookmark-save-flag 1
      delete-auto-save-files t)

;; Additional recentf configuration
(add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")

;; Load recent files list
(recentf-load-list)
#+END_SRC

** Tempbuf
Automatically kills buffers that haven't been used for a while, helping maintain a clean buffer list by removing unused temporary buffers. → [[*Tempbuf Package][Generated Code]]

*** Tempbuf Configuration Block
#+NAME: tempbuf-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure tempbuf for automatic buffer cleanup
(setq tempbuf-minimum-timeout 300)  ; Kill after 5 minutes of inactivity
(setq tempbuf-maximum-timeout 1800) ; Always kill after 30 minutes

;; Enable tempbuf for specific modes
(add-hook 'help-mode-hook 'turn-on-tempbuf-mode)
(add-hook 'Man-mode-hook 'turn-on-tempbuf-mode)
(add-hook 'view-mode-hook 'turn-on-tempbuf-mode)
#+END_SRC

** Default Text Scale
Easily adjust text scale across all buffers globally, maintaining consistent font sizing throughout your Emacs session. → [[*Default Text Scale Package][Generated Code]]

*** Default Text Scale Configuration Block
#+NAME: default-text-scale-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure default-text-scale for global text scaling
;; Provides C-M-= and C-M-- for global text scaling
#+END_SRC

** WS Butler
Trim whitespace on save without affecting cursor position, providing a clean approach to whitespace management that doesn't disrupt your editing flow. → [[*WS Butler Package][Generated Code]]

*** WS Butler Configuration Block
#+NAME: ws-butler-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configure ws-butler for clean whitespace management
(setq ws-butler-keep-whitespace-before-point nil)

;; Enable ws-butler globally for programming modes
(add-hook 'prog-mode-hook 'ws-butler-mode)
(add-hook 'text-mode-hook 'ws-butler-mode)
#+END_SRC

** Text Editing Behavior
Text editing behavior and preferences. → [[*Text Editing Behavior Code][Generated Code]]
#+NAME: text-editing-behavior
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Default indentation and text behavior
(setq-default fill-column 99
              indent-tabs-mode nil
              tab-width 4
              line-spacing nil)

;; Better scrolling
(setq scroll-conservatively 9999
      scroll-preserve-screen-position t)

;; Window splitting preferences
(setq split-height-threshold 0
      split-width-threshold nil)

;; Text editing improvements
(setq sentence-end-double-space nil
      save-interprogram-paste-before-kill t
      history-delete-duplicates t
      require-final-newline t)

;; Faster command echo
(setq echo-keystrokes 0.1)

;; Case-insensitive completion
(setq read-file-name-completion-ignore-case t
      read-buffer-completion-ignore-case t)

;; Better line movement for wrapped lines
(setq line-move-visual t)

;; Hide mouse while typing
(setq make-pointer-invisible t)

;; Image support
(setq image-use-external-converter t)

(with-eval-after-load 'transient
  (define-key transient-map (kbd "<escape>") 'transient-quit-one))
#+END_SRC

** Font and Emoji Support
Font configuration and emoji support. → [[*Font and Emoji Support Code][Generated Code]]
#+NAME: font-emoji-support
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Emoji font support
(defun qq/set-emoji-font (frame)
  "Adjust the font settings of FRAME so Emacs can display emoji properly."
  (if (eq system-type 'darwin)
      (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)
    (set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))

(qq/set-emoji-font nil)
(add-hook 'after-make-frame-functions 'qq/set-emoji-font)
#+END_SRC

** Trailing Whitespace Management
Configurable trailing whitespace handling. → [[*Trailing Whitespace Management Code][Generated Code]]
#+NAME: trailing-whitespace-management
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Configurable trailing whitespace deletion
(defvar qq/delete-trailing-whitespace t
  "Non-nil will enable deleting trailing whitespace during file save operation.")

(defun qq/trailing-whitespace-behavior ()
  (when qq/delete-trailing-whitespace
    (delete-trailing-whitespace)))

(add-hook 'write-file-functions 'qq/trailing-whitespace-behavior)

(defun qq/toggle-delete-trailing-whitespace ()
  "Enable/disable deleting of trailing whitespace on saving a file"
  (interactive)
  (setq qq/delete-trailing-whitespace (not qq/delete-trailing-whitespace))
  (message "Trailing whitespace will be %s on file save"
           (if qq/delete-trailing-whitespace "DELETED" "IGNORED")))
#+END_SRC

** Recipes
Utility functions ported from legacy configuration for specialized text manipulation and system operations.

*** Show File Name
Display the full path of the current buffer in the minibuffer. → [[*Recipes Code][Generated Code]]
#+NAME: show-file-name-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Show current buffer full path in minibuffer
(defun qq/show-file-name ()
  "Show the full path file name in the minibuffer."
  (interactive)
  (message (buffer-file-name)))
#+END_SRC

*** Display ANSI Colors
Apply ANSI color codes to entire buffer for viewing logs or terminal output. → [[*Recipes Code][Generated Code]]
#+NAME: display-ansi-colors-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Apply ANSI color codes to entire buffer
(defun display-ansi-colors ()
  "Apply ANSI color codes to entire buffer."
  (interactive)
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region (point-min) (point-max))))
#+END_SRC

*** ANSI Color Region
Apply ANSI color codes to selected region for partial colorization. → [[*Recipes Code][Generated Code]]
#+NAME: ansi-color-region-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Apply ANSI color codes to selected region
(defun ansi-color-apply-on-region-int (beg end)
  "Colorize using the ANSI color codes."
  (interactive "r")
  (ansi-color-apply-on-region beg end))
#+END_SRC

*** Unfill Paragraph
Convert multi-line paragraph into single line (opposite of fill-paragraph). → [[*Recipes Code][Generated Code]]
#+NAME: unfill-paragraph-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Unfill paragraph - opposite of fill-paragraph
(defun qq/unfill-paragraph ()
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive)
  (let ((fill-column (point-max)))
    (fill-paragraph nil)))
#+END_SRC

*** Duplicate file of the existing buffer
Duplicates the buffer and its associated file. → [[*Recipes Code][Generated Code]]
#+NAME: duplicate-buffer-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
(defun qq/duplicate-file-buffer ()
  "Duplicate the current buffer and its associated file, with overwrite confirmation."
  (interactive)
  (let* ((file (buffer-file-name)))
    (if (not file)
        (user-error "Current buffer is not visiting a file")
      (let* ((default-name (concat (file-name-sans-extension file)
                                   "-copy."
                                   (file-name-extension file)))
             (new-file (read-file-name "Duplicate to: " nil nil nil default-name)))
        (when (and (file-exists-p new-file)
                   (not (yes-or-no-p (format "File %s exists. Overwrite? " new-file))))
          (user-error "Aborted: file already exists"))
        (copy-file file new-file t)
        (find-file new-file)))))
#+END_SRC

*** Diff Two Regions
Compare two selected regions using external diff command. → [[*Recipes Code][Generated Code]]
#+NAME: diff-region-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Diff two regions utility functions
(defun diff-region-format-region-boundary (b e)
  "Make sure lines are selected and B is less than E"
  (let (tmp rlt)
    ;; swap b e, make sure b < e
    (when (> b e)
      (setq tmp b)
      (setq b e)
      (set e tmp))
    ;; select lines
    (save-excursion
      (if (and (> e b)
               (save-excursion (goto-char e) (= e (line-beginning-position)))
               (boundp 'evil-state) (eq evil-state 'visual))
          (setq e (1- e)))
      (goto-char b)
      (setq b (line-beginning-position))
      (goto-char e)
      (setq e (line-end-position)))
    (setq rlt (list b e))
    rlt))

(defun diff-region-tag-selected-as-a ()
  "Select a region to compare"
  (interactive)
  (when (region-active-p)
    (let (tmp buf)
      ;; select lines
      (setq tmp (diff-region-format-region-boundary (region-beginning) (region-end)))
      (setq buf (get-buffer-create "*Diff-regionA*"))
      (save-current-buffer
        (set-buffer buf)
        (erase-buffer))
      (append-to-buffer buf (car tmp) (cadr tmp))))
  (message "Now select other region to compare and run `diff-region-compare-with-b`"))

(defun diff-region-compare-with-b ()
  "Compare current region with region selected by `diff-region-tag-selected-as-a'"
  (interactive)
  (if (region-active-p)
      (let (rlt-buf
            diff-output
            (fa (make-temp-file (expand-file-name "scor"
                                                  (or small-temporary-file-directory
                                                      temporary-file-directory))))
            (fb (make-temp-file (expand-file-name "scor"
                                                  (or small-temporary-file-directory
                                                      temporary-file-directory)))))
        ;;  save current content as file B
        (when fb
          (setq tmp (diff-region-format-region-boundary (region-beginning) (region-end)))
          (write-region (car tmp) (cadr tmp) fb))

        (setq rlt-buf (get-buffer-create "*Diff-region-output*"))
        (when (and fa (file-exists-p fa) fb (file-exists-p fb))
          ;; save region A as file A
          (save-current-buffer
            (set-buffer (get-buffer-create "*Diff-regionA*"))
            (write-region (point-min) (point-max) fa))
          ;; diff NOW!
          (setq diff-output (shell-command-to-string (format "diff -Nabur %s %s" fa fb)))
          ;; show the diff output
          (if (string= diff-output "")
              ;; two regions are same
              (message "Two regions are SAME!")
            ;; show the diff
            (save-current-buffer
              (switch-to-buffer-other-window rlt-buf)
              (set-buffer rlt-buf)
              (erase-buffer)
              (insert diff-output)
              (diff-mode))))

        ;; clean the temporary files
        (if (and fa (file-exists-p fa))
            (delete-file fa))
        (if (and fb (file-exists-p fb))
            (delete-file fb)))
    (message "Please select region at first!")))
#+END_SRC

*** Remote RPM Copy
Copy RPM files with specific prefix from various local directories to remote location via TRAMP. → [[*Recipes Code][Generated Code]]
#+NAME: remote-rpm-copy-config
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Remote RPM copy utility for collecting files with specific prefix from local dirs to remote
(defun qq/remote-copy-rpm-files (&optional base-dir prefixes remote-destination-dir)
  "Interactively select and copy RPM files with specified prefixes from BASE-DIR to REMOTE-DESTINATION-DIR via TRAMP.

BASE-DIR defaults to /data/vest-linux/my_softing_eaglet/tmp/deploy/rpm.
PREFIXES defaults to predefined list of eagle/mw prefixes:
- eagle-system-1.0*
- eagle-common-git*
- libmw-post1-1.0-*
- mwapp-v*
- libmw-fpga-1*
- libmw-uart-1*
- libmw-fiber-1*
- libmw-copper-1*
- mwutils-v*

Files sent to remote:
All RPM files matching the specified prefixes from the base directory.
Uses TRAMP protocol for remote copying (e.g., /ssh:user@host:/path/to/dir/).
Each file is copied individually with interactive confirmation."
  (interactive)

  (let* ((default-base-dir "/data/vest-linux/my_softing_eaglet/tmp/deploy/rpm")
         (default-prefixes '("eagle-system-1.0" "eagle-common-git" "libmw-post1-1.0-"
                           "mwapp-v" "libmw-fpga-1" "libmw-uart-1" "libmw-fiber-1"
                           "libmw-copper-1" "mwutils-v"))
         (search-base-dir (or base-dir
                            (read-directory-name "Base directory to search: " default-base-dir)))
         (rpm-prefixes (or prefixes
                         (if (y-or-n-p "Use default RPM prefixes (eagle-system, libmw-*, mwapp-v, etc.)? ")
                             default-prefixes
                           (let ((custom-prefixes '()))
                             (while (let ((prefix (read-string "RPM prefix (empty to finish): ")))
                                      (when (not (string-empty-p prefix))
                                        (push prefix custom-prefixes)
                                        t)))
                             (reverse custom-prefixes)))))
         (dest-dir (or remote-destination-dir
                      (read-string "Remote destination (e.g., /ssh:user@host:/path/to/dir/): ")))
         (selected-files '())
         (total-copied 0))

    ;; Search for RPM files with each prefix
    (when (file-directory-p search-base-dir)
      (dolist (prefix rpm-prefixes)
        (message "Searching for RPMs with prefix '%s'..." prefix)
        (let* ((pattern (concat "^" (regexp-quote prefix) ".*\\.rpm$"))
               (files (directory-files search-base-dir t pattern)))
          (message "Using search pattern: %s" pattern)
          (if files
              (progn
                (message "✓ Found %d RPM files with prefix '%s': %s"
                        (length files) prefix
                        (mapconcat (lambda (f) (file-name-nondirectory f)) files ", "))
                (dolist (file files)
                  (when (y-or-n-p (format "Copy %s? " (file-name-nondirectory file)))
                    (push file selected-files))))
            (message "✗ No RPM files found with prefix '%s'" prefix)))))

    ;; Ensure remote destination directory exists
    (unless (file-directory-p dest-dir)
      (make-directory dest-dir t))

    ;; Copy selected files to remote destination
    (if selected-files
        (progn
          (message "Copying %d selected files to remote..." (length selected-files))
          (dolist (file selected-files)
            (let ((dest-file (expand-file-name (file-name-nondirectory file) dest-dir)))
              (condition-case err
                  (progn
                    (copy-file file dest-file t)
                    (setq total-copied (1+ total-copied))
                    (message "Copied to remote: %s" (file-name-nondirectory file)))
                (error
                 (message "Failed to copy %s: %s" file (error-message-string err))))))
          (message "Successfully copied %d/%d RPM files to %s"
                  total-copied (length selected-files) dest-dir))
      (message "No files selected for copying."))))

(defun qq/remote-copy-rpm-batch (prefix local-dirs remote-destination-dir)
  "Batch copy all RPM files with PREFIX from LOCAL-DIRS to REMOTE-DESTINATION-DIR.
   Non-interactive version for scripting."
  (let ((total-found 0)
        (total-copied 0))

    ;; Ensure remote destination directory exists
    (unless (file-directory-p remote-destination-dir)
      (make-directory remote-destination-dir t))

    ;; Process each local directory
    (dolist (local-dir local-dirs)
      (when (file-directory-p local-dir)
        (message "Processing %s..." local-dir)
        (let ((files (directory-files local-dir t
                                     (concat "^" (regexp-quote prefix) ".*\\.rpm$"))))
          (setq total-found (+ total-found (length files)))
          (dolist (file files)
            (let ((dest-file (expand-file-name (file-name-nondirectory file) remote-destination-dir)))
              (condition-case err
                  (progn
                    (copy-file file dest-file t)
                    (setq total-copied (1+ total-copied))
                    (message "Copied to remote: %s" (file-name-nondirectory file)))
                (error
                 (message "Failed to copy %s: %s" file (error-message-string err)))))))))

    (message "Batch copy complete: %d/%d RPM files copied to %s"
            total-copied total-found remote-destination-dir)
    (list total-found total-copied)))
#+END_SRC

#+RESULTS: remote-rpm-copy-config
: qq/remote-copy-rpm-batch

** Theme Configuration
*** Theme Loading Protection
Disable existing themes before loading new ones. → [[*Theme Loading Protection Code][Generated Code]]
#+NAME: theme-loading-protection
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Disable any existing themes before loading new ones
(defadvice load-theme
  (before disable-before-load (theme &optional no-confirm no-enable) activate)
  (mapc 'disable-theme custom-enabled-themes))
#+END_SRC

*** Theme Path Setup
Configure theme directories and copy quickbeans theme. → [[*Theme Path Setup Code][Generated Code]]
#+NAME: theme-path-setup
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Add custom theme directory to load path
(add-to-list 'custom-theme-load-path (concat qq/cache-directory "themes/"))

;; Create themes directory if it doesn't exist
(unless (file-directory-p (concat qq/cache-directory "themes/"))
  (make-directory (concat qq/cache-directory "themes/") t))

;; Copy quickbeans theme to cache directory if it doesn't exist
(let ((source-theme (expand-file-name "quickbeans-theme.el" (file-name-directory load-file-name)))
      (dest-theme (concat qq/cache-directory "themes/quickbeans-theme.el")))
  (when (and (file-exists-p source-theme)
             (not (file-exists-p dest-theme)))
    (copy-file source-theme dest-theme)))
#+END_SRC

*** Load Quickbeans Theme
Activate the quickbeans theme. → [[*Load Quickbeans Theme Code][Generated Code]]
#+NAME: load-quickbeans-theme
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Load the quickbeans theme
(load-theme 'quickbeans t)
#+END_SRC

*** Theme Customizations
Custom face settings and final success message. → [[*Theme Customizations Code][Generated Code]]
#+NAME: theme-customizations
#+BEGIN_SRC emacs-lisp :tangle no :exports none
;; Smartparens face customizations
(custom-set-faces
 '(sp-show-pair-match-face ((t (:inherit nil :background "#282828" :bold t :foreground "#ffffff"))))
 '(sp-pair-overlay-face ((t (:inherit nil :background nil :foreground "#7cfc00"))))
 '(sp-wrap-overlay-face ((t (:inherit nil :background nil :foreground "#ff4500"))))
 '(sp-wrap-tag-overlay-face ((t (:inherit nil :background nil :foreground "#ff1493"))))
 '(sp-show-pair-enclosing ((t (:inherit nil :foreground "#000000" :background "#ff6347"))))
 '(which-func ((t (:foreground "#87d7af")))))

;; Success message
(message "Modern Emacs configuration loaded successfully!")
#+END_SRC

* Generated Code
This section contains the actual use-package declarations that generate the final configuration.

** Tree-sitter Configuration
*** Tree-sitter Code
Automatic tree-sitter mode activation and language grammar management. → [[*Tree-sitter Setup and Language Sources][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<tree-sitter-setup>>
#+END_SRC

*** Treesit Fold Package
Intelligent code folding based on tree-sitter syntax understanding. → [[*Treesit Fold][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="treesit-fold")>>
<<treesit-fold-config>>
<<gen-pkg-end()>>
#+END_SRC

** Site-Specific Configuration
*** System Detection and Paths Code
Multi-machine configuration based on hostname detection. → [[*System Detection and Paths][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<system-detection-paths>>
;; Configure site-specific settings
(cond
 ((member qq/current-system '("eagle" "Legion-U"))
  <<linux-work-config>>
  )
 ((string= qq/current-system "darwin")
  <<mac-home-config>>
  )
 ((or (string= qq/current-system "archlinux") (string= qq/current-system "z390-manjaro"))
  <<arch-manjaro-config>>
  )
 ((or (string= qq/current-system "fikri-ThinkPad-E14-Gen-2") (string= qq/current-system "ThinkPad-E440"))
  <<thinkpad-config>>
  )
 (t
  <<default-config>>
  ))
<<end-site-config>>
#+END_SRC

** Theme Configuration
*** Theme Loading Protection Code
Disable existing themes before loading new ones. → [[*Theme Loading Protection][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<theme-loading-protection>>
#+END_SRC

*** Theme Path Setup Code
Configure theme directories and copy quickbeans theme. → [[*Theme Path Setup][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<theme-path-setup>>
#+END_SRC

*** Load Quickbeans Theme Code
Activate the quickbeans theme. → [[*Load Quickbeans Theme][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<load-quickbeans-theme>>
#+END_SRC

*** Theme Customizations Code
Custom face settings and final success message. → [[*Theme Customizations][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<theme-customizations>>
#+END_SRC

** Basic Settings
*** Recipes Code
Custom utility functions for various text manipulation and editing tasks. → [[*Recipes][Configuration]]
#+NAME: recipes-config
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<show-file-name-config>>
<<display-ansi-colors-config>>
<<ansi-color-region-config>>
<<unfill-paragraph-config>>
<<diff-region-config>>
<<remote-rpm-copy-config>>
<<duplicate-buffer-config>>
#+END_SRC

*** Performance Optimizations Code
Performance and garbage collection optimizations. → [[*Performance Optimizations][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<performance-optimizations>>
#+END_SRC

*** UI Cleanup and Visual Settings Code
User interface cleanup and visual improvements. → [[*UI Cleanup and Visual Settings][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<ui-cleanup>>
#+END_SRC

*** Essential Modes Code
Enable essential built-in modes. → [[*Essential Modes][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<essential-modes>>
#+END_SRC

*** Cache Directory Setup Code
Configure cache directories for better organization. → [[*Cache Directory Setup][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<cache-directory-setup>>
#+END_SRC

*** File and Buffer Management Code
File handling, backups, and buffer management. → [[*File and Buffer Management][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<file-buffer-management>>
#+END_SRC

*** Text Editing Behavior Code
Text editing behavior and preferences. → [[*Text Editing Behavior][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<text-editing-behavior>>
#+END_SRC

*** Tempbuf Package
Automatic buffer cleanup for unused temporary buffers. → [[*Tempbuf][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="tempbuf")>>
<<tempbuf-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Default Text Scale Package
Global text scaling across all buffers for consistent font sizing. → [[*Default Text Scale][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="default-text-scale")>>
<<default-text-scale-config>>
<<gen-pkg-end()>>
#+END_SRC

*** WS Butler Package
Clean whitespace management without affecting cursor position. → [[*WS Butler][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="ws-butler", strght_gh="lewang/ws-butler")>>
<<ws-butler-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Font and Emoji Support Code
Font configuration and emoji support. → [[*Font and Emoji Support][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<font-emoji-support>>
#+END_SRC

*** Trailing Whitespace Management Code
Configurable trailing whitespace handling. → [[*Trailing Whitespace Management][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<trailing-whitespace-management>>
#+END_SRC

** Evil Package
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
(use-package evil
  :init
  <<evil-init>>
  :config
  <<evil-config>>)
#+END_SRC

** Evil Extensions Packages
*** Evil Collection Package
Evil-friendly bindings for many modes that don't have them by default. → [[*Evil Collection][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="evil-collection", after="evil")>>
<<evil-collection-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Evil Org Package
Enhanced evil keybindings for org-mode with navigation and text objects. → [[*Evil Org][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="evil-org", after="org")>>
<<evil-org-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Evil Surround Package
Vim-surround functionality with cs, ds, ys operators. → [[*Evil Surround][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="evil-surround", after="evil")>>
<<evil-surround-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Evil Nerd Commenter Package
Advanced commenting functionality with gcc, gc operators. → [[*Evil Nerd Commenter][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="evil-nerd-commenter", after="evil")>>
<<evil-nerd-commenter-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Evil Numbers Package
Number increment/decrement with C-a/C-x in normal mode. → [[*Evil Numbers][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="evil-numbers", after="evil")>>
<<evil-numbers-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Evil Visualstar Package
Search for visual selection with * in visual mode for extended vim behavior. → [[*Evil Visualstar][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="evil-visualstar", after="evil")>>
<<evil-visualstar-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Evil Matchit Package
Enhanced % matching for tags, blocks, and delimiters. → [[*Evil Matchit][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="evil-matchit", after="evil")>>
<<evil-matchit-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Evil Exchange Package
Text object exchange with gx operator for swapping text. → [[*Evil Exchange][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="evil-exchange", after="evil")>>
<<evil-exchange-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Evil Args Package
Function argument text objects with cia, dia, via commands. → [[*Evil Args][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="evil-args", after="evil")>>
<<evil-args-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Evil Snipe Package
Two-character search functionality like vim-sneak. → [[*Evil Snipe][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="evil-snipe", after="evil")>>
<<evil-snipe-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Evil Multiedit Package
Multiple cursors functionality designed for evil mode. → [[*Evil Multiedit][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="evil-multiedit", after="evil")>>
<<evil-multiedit-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Evil Goggles Package
Visual feedback for evil operations like delete, yank. → [[*Evil Goggles][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="evil-goggles", after="evil")>>
<<evil-goggles-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Evil Lion Package
Text alignment with gl/gL operators for better formatting. → [[*Evil Lion][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="evil-lion", after="evil")>>
<<evil-lion-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Evil Quickscope Package
Enhanced character navigation with visual hints for fast f/F/t/T commands. → [[*Evil Quickscope][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="evil-quickscope", after="evil")>>
<<evil-quickscope-config>>
<<gen-pkg-end()>>
#+END_SRC

** Language Support Packages
*** Treesit Auto Package
Automatic tree-sitter mode activation for supported languages. → [[*Treesit Auto][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="treesit-auto")>>
<<treesit-auto-config>>
<<gen-pkg-end()>>
#+END_SRC

*** LSP Mode Package
Language Server Protocol client for intelligent code features. → [[*LSP Mode][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="lsp-mode")>>
<<lsp-mode-config>>
<<gen-pkg-end()>>
#+END_SRC

*** LSP UI Package
User interface enhancements for LSP mode. → [[*LSP UI][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="lsp-ui", after="lsp-mode")>>
<<lsp-ui-config>>
<<gen-pkg-end()>>
#+END_SRC

*** DAP Mode Package
Debug Adapter Protocol support for debugging. → [[*DAP Mode][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="dap-mode", after="lsp-mode")>>
<<dap-mode-config>>
<<gen-pkg-end()>>
#+END_SRC

*** YASnippet Package
Snippet expansion system for code templates. → [[*YASnippet][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="yasnippet")>>
<<yasnippet-config>>
<<gen-pkg-end()>>
#+END_SRC

*** YASnippet Snippets Package
Collection of snippets for YASnippet. → [[*YASnippet Snippets][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="yasnippet-snippets", after="yasnippet")>>
<<yasnippet-snippets-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Web Mode Package
Multi-language template editing for web development. → [[*Web Mode][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="web-mode")>>
<<web-mode-config>>
<<gen-pkg-end()>>
#+END_SRC

*** CCLS Package
:PROPERTIES:
:header-args: :tangle no
:END:
High-performance C/C++ language server alternative to clangd. → [[*CCLS][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="ccls", after="lsp-mode")>>
<<ccls-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Clangd Package
Official Clang C/C++ language server with excellent performance and modern features. → [[*Clangd][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<clangd-config>>
#+END_SRC

*** JS Doc Package
JSDoc comment generation for JavaScript functions. → [[*JS Doc][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="js-doc")>>
<<js-doc-config>>
<<gen-pkg-end()>>
#+END_SRC

*** RJSX Mode Package
Enhanced React JSX support with syntax highlighting. → [[*RJSX Mode][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="rjsx-mode")>>
<<rjsx-mode-config>>
<<gen-pkg-end()>>
#+END_SRC

*** JSON Mode Package
JSON file editing with syntax highlighting and validation. → [[*JSON Mode][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="json-mode")>>
<<json-mode-config>>
<<gen-pkg-end()>>
#+END_SRC

*** CMake Mode Package
CMake build system configuration file support. → [[*CMake Mode][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="cmake-mode")>>
<<cmake-mode-config>>
<<gen-pkg-end()>>
#+END_SRC

*** CMake Font Lock Package
Enhanced syntax highlighting for CMake files. → [[*CMake Font Lock][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="cmake-font-lock", after="cmake-mode")>>
<<cmake-font-lock-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Clang Format Package
Code formatting integration for C/C++ using clang-format. → [[*Clang Format][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="clang-format")>>
<<clang-format-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Markdown Mode Package
:PROPERTIES:
:header-args: :tangle no
:END:
GitHub Flavored Markdown editing and preview. → [[*Markdown Mode][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="markdown-mode")>>
<<markdown-mode-config>>
<<gen-pkg-end()>>
#+END_SRC

*** YAML Mode Package
YAML configuration file editing with syntax highlighting. → [[*YAML Mode][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="yaml-mode")>>
<<yaml-mode-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Markdown TS Mode Package
Tree-sitter powered Markdown editing with enhanced syntax highlighting. → [[*Markdown TS Mode][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="markdown-ts-mode", strght_gh="LionyxML/markdown-ts-mode")>>
<<markdown-ts-mode-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Lua Mode Package
Lua scripting language support with syntax highlighting. → [[*Lua Mode][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="lua-mode")>>
<<lua-mode-config>>
<<gen-pkg-end()>>
#+END_SRC

*** QML Mode Package
Qt QML file editing support with syntax highlighting. → [[*QML Mode][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="qml-mode")>>
<<qml-mode-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Dockerfile Mode Package
Docker configuration file editing and syntax highlighting. → [[*Docker Support][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="dockerfile-mode")>>
<<dockerfile-mode-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Docker Compose Mode Package
Docker Compose file support with syntax highlighting. → [[*Docker Support][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="docker-compose-mode")>>
<<docker-compose-mode-config>>
<<gen-pkg-end()>>
#+END_SRC

*** PlantUML Mode Package
Diagram-as-code editing with PlantUML integration. → [[*PlantUML Mode][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="plantuml-mode")>>
<<plantuml-mode-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Format All Package
Universal code formatter for multiple programming languages. → [[*Format All][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="format-all")>>
<<format-all-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Combobulate Package
:PROPERTIES:
:header-args: :tangle no
:END:
Advanced tree-sitter-based code manipulation and navigation for structured editing. → [[*Combobulate][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="combobulate", straight="(:host github :repo \"mickeynp/combobulate\")")>>
<<combobulate-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Programming Mode Configuration
Common programming mode setup for consistent development environment. → [[*Programming Mode Hooks][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
;; Apply programming mode configuration
<<prog-mode-config>>
#+END_SRC

** Navigation and Text Editing
*** Avy Package
Jump navigation to any visible text by typing characters. → [[*Avy][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="avy")>>
<<avy-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Expand Region Package
Increase selected region by semantic units for quick selection. → [[*Expand Region][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="expand-region")>>
<<expand-region-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Smartparens Package
Intelligent parentheses handling and structural editing commands. → [[*Smartparens][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="smartparens")>>
<<smartparens-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Flycheck Package
On-the-fly syntax checking for multiple programming languages. → [[*Flycheck][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="flycheck")>>
<<flycheck-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Fancy Compilation Package
On-the-fly syntax checking for multiple programming languages. → [[*Fancy Compilation][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="fancy-compilation")>>
<<fancy-compilation-config>>
;; Add compilation-mode keybindings using general.el
(with-eval-after-load 'general
  (general-def 'normal compilation-mode-map
    <<gen-keys(mode="local-mode", tname=fancy-compilation-keys)>>))
<<gen-pkg-end()>>
#+END_SRC

*** VTerm Package
Fully-featured terminal emulator using libvterm for best performance. → [[*VTerm][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="vterm", init="(setq vterm-always-compile-module t)")>>
<<vterm-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Multi-VTerm Package
Multiple vterm sessions for better terminal management. → [[*Multi-VTerm Package][Generated Code]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="multi-vterm", after="vterm")>>
<<multi-vterm-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Eat Package
Emacs-native terminal emulator written in Emacs Lisp. → [[*Eat][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="eat", straight="(:host codeberg :repo \"akib/emacs-eat\")")>>
<<eat-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Shell Here Package
Convenient functions to open shell in current directory. → [[*Shell Here][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="shell-here", straight="(:host codeberg :repo \"emacs-weirdware/shell-here\")")>>
<<shell-here-config>>
<<gen-pkg-end()>>
#+END_SRC

** General Package
Keybinding framework for consistent leader key management. → [[*General.el Configuration][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="general", after="evil")>>
<<general-config>>

;; Global keybindings
(general-def
  :states '(normal insert visual emacs)
  :keymaps 'override
  <<gen-keys(mode="global", tname=window-keys)>>
  <<gen-keys(mode="global", tname=persp-keys)>>)

;; Symbol overlay normal mode bindings
(general-def 'normal
  <<gen-keys(mode="general", tname=symbol-overlay-keys)>>
  <<gen-keys(mode="plain-gen", tname=normal-keys)>>
  <<gen-keys(mode="plain-gen", tname=avy-keys)>>)

;; Test leader key bindings
(qq/leader-keys
  <<gen-keys(mode="leader", tname=evil-keys)>>
  <<gen-keys(mode="leader", tname=org-leader-keys)>>
  <<gen-keys(mode="leader", tname=consult-keys)>>
  <<gen-keys(mode="leader", tname=magit-keys)>>
  <<gen-keys(mode="leader", tname=vc-msg-keys)>>
  <<gen-keys(mode="leader", tname=projectile-keys)>>
  <<gen-keys(mode="leader", tname=navigation-keys)>>
  <<gen-keys(mode="leader", tname=text-editing-keys)>>
  <<gen-keys(mode="leader", tname=default-text-scale-keys)>>
  <<gen-keys(mode="leader", tname=treesit-fold-keys)>>
  <<gen-keys(mode="leader", tname=restart-emacs-keys)>>
  <<gen-keys(mode="leader", tname=helpful-keys)>>
  <<gen-keys(mode="leader", tname=docker-keys)>>
  <<gen-keys(mode="leader", tname=claude-code-keys)>>
  <<gen-keys(mode="leader", tname=terminal-keys)>>
  <<gen-keys(mode="leader", tname=multi-vterm-keys)>>
  <<gen-keys(mode="leader", tname=file-management-keys)>>
  <<gen-keys(mode="leader", tname=vundo-keys)>>
  <<gen-keys(mode="leader", tname=recipes-keys)>>
  <<gen-keys(mode="leader", tname=popper-keys)>>)
<<gen-pkg-end()>>
#+END_SRC

** Vertico Package
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
(use-package vertico
  :after (marginalia orderless)
  :init
  <<vertico-init>>
  :config
  <<vertico-config>>
  :bind (:map vertico-map
         <<gen-keys(mode="bind", tname=vertico-keys)>>))
#+END_SRC

** Vertico Posframe Package
Floating posframe display for vertico completion UI. → [[*Vertico Posframe][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="vertico-posframe", after="vertico", strght_gh="tumashu/vertico-posframe")>>
<<vertico-posframe-config>>
<<gen-pkg-end()>>
#+END_SRC

** Marginalia Package
Rich annotations for completion candidates in minibuffer. → [[*Marginalia][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="marginalia")>>
<<marginalia-config>>
<<gen-pkg-end()>>
#+END_SRC

** Orderless Package
Flexible completion matching styles for advanced filtering. → [[*Orderless][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="orderless")>>
<<orderless-config>>
<<gen-pkg-end()>>
#+END_SRC

** Embark Package
Contextual actions on completion targets with flexible keybindings. → [[*Embark][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
(use-package embark
  :config
  <<embark-config>>
  :bind (
         <<gen-keys(mode="bind", tname=embark-keys)>>))
#+END_SRC

** Embark-Consult Package
Integration between embark and consult for enhanced completion actions. → [[*Embark-Consult][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="embark-consult", after="(embark consult)")>>
<<embark-consult-config>>
<<gen-pkg-end()>>
#+END_SRC

** Consult Package
Excellent collection of commands based on completing-read. → [[*Consult][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="consult")>>
<<consult-config>>
<<gen-pkg-end()>>
#+END_SRC

** Magit Package
The ultimate Git interface for Emacs with staging, branching, and merge support. → [[*Magit][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="magit")>>
<<magit-config>>
<<git-commit-config>>

;; Add magit status mode keybindings using general.el
:general
(:states 'normal
         :keymaps 'magit-status-mode-map
         <<gen-keys(mode="local-mode", tname=magit-status-keys)>>)
<<gen-pkg-end()>>
#+END_SRC

** Blamer Package :ignore:
:PROPERTIES:
:header-args: :tangle no
:END:
Git blame information display for code authorship tracking with inline annotations. → [[*Blamer][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="blamer")>>
<<blamer-config>>
<<gen-pkg-end()>>
#+END_SRC

** Diff HL Package
Highlight uncommitted changes in the buffer fringe with VCS integration for visual change tracking. → [[*Diff HL][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="diff-hl")>>
<<diff-hl-config>>
(with-eval-after-load 'general
(general-def 'normal diff-hl-command-map
<<gen-keys(mode="local-mode", tname=diff-hl-keys)>>))
<<gen-pkg-end()>>
#+END_SRC

** VC Msg Package
Enhanced commit message display with popup functionality for any line in version-controlled files. → [[*VC Msg][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="vc-msg")>>
<<vc-msg-config>>
<<gen-pkg-end()>>
#+END_SRC

** Projectile Package
Project management and navigation with intelligent project detection. → [[*Projectile][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="projectile")>>
<<projectile-config>>
<<gen-pkg-end()>>
#+END_SRC

** Which-key Package
Displays available keybindings in popup for discoverability. → [[*Which-key][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="which-key")>>
<<which-key-config>>
<<gen-pkg-end()>>
#+END_SRC

** Which-key Posframe Package
Display which-key popup in posframe for better visual presentation. → [[*Which-key Posframe][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="which-key-posframe", after="which-key")>>
<<which-key-posframe-config>>
<<gen-pkg-end()>>
#+END_SRC

** Transient Posframe Package
Display transient menus in posframe for improved UI consistency. → [[*Transient Posframe][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="transient-posframe", after="transient")>>
<<transient-posframe-config>>
<<gen-pkg-end()>>
#+END_SRC

** Symbol Overlay Package
Symbol highlighting with overlays for enhanced code navigation. → [[*Symbol Overlay][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="symbol-overlay")>>
<<symbol-overlay-config>>
<<gen-pkg-end()>>
#+END_SRC

** Helpful Package
Enhanced help system with detailed documentation and examples. → [[*Helpful][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="helpful")>>
<<helpful-config>>
<<gen-pkg-end()>>
#+END_SRC

** Popper Package
Popup window management for temporary buffers with one-key access. → [[*Popper][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="popper")>>
<<popper-config>>
<<gen-pkg-end()>>
#+END_SRC

** Solaire Mode Package
Visual distinction between file-visiting and temporary buffers. → [[*Solaire Mode][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="solaire-mode")>>
<<solaire-mode-config>>
<<gen-pkg-end()>>
#+END_SRC

** Restart Emacs Package
Restart Emacs from within Emacs for configuration testing and debugging. → [[*Restart Emacs][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="restart-emacs")>>
<<restart-emacs-config>>
<<gen-pkg-end()>>
#+END_SRC

** Exec Path From Shell Package
Shell environment setup for proper PATH and environment variables. → [[*Exec Path From Shell][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="exec-path-from-shell")>>
<<exec-path-from-shell-config>>
<<gen-pkg-end()>>
#+END_SRC

** Auto Dim Other Buffers Package
Dim inactive buffers to focus on current work. → [[*Auto Dim Other Buffers][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="auto-dim-other-buffers")>>
<<auto-dim-other-buffers-config>>
<<gen-pkg-end()>>
#+END_SRC

** Goggles Package
Highlight changes and operations for better visual feedback. → [[*Goggles][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="goggles", strght_gh="minad/goggles")>>
<<goggles-config>>
<<gen-pkg-end()>>
#+END_SRC

** Docker Package
Docker interface for container management from within Emacs. → [[*Docker][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="docker")>>
<<docker-config>>
<<gen-pkg-end()>>
#+END_SRC

** Casual Suite Package
Discoverable transient interfaces for common Emacs tools. → [[*Casual Suite][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="casual-suite")>>
<<casual-suite-config>>
<<gen-pkg-end()>>
#+END_SRC

** Claude Code Package
Claude AI integration with seamless Emacs workflow and project isolation. → [[*Claude Code][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
  <<gen-use-pkg(package="claude-code-ide", strght_gh="manzaltu/claude-code-ide.el")>>
  <<claude-code-config>>
  <<gen-pkg-end()>>
#+END_SRC

** Corfu Package
Completion Overlay Region Function - A small completion UI. → [[*Corfu][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="corfu")>>
<<corfu-config>>
<<gen-pkg-end()>>
#+END_SRC

** Kind Icon Package
Icons for completion candidates with corfu and other completion frameworks. → [[*Kind Icon][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="kind-icon", after="corfu")>>
<<kind-icon-config>>
<<gen-pkg-end()>>
#+END_SRC

** Cape Package
Completion-at-point extensions for enhanced code completion. → [[*Cape][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="cape", after="corfu")>>
<<cape-config>>
<<gen-pkg-end()>>
#+END_SRC

** Doom Modeline Package
Modern modeline with git, LSP, and project information. → [[*Doom Modeline][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="doom-modeline")>>
<<doom-modeline-config>>
<<gen-pkg-end()>>
#+END_SRC

** Minions Package
Clean minor mode display in modeline for better organization. → [[*Minions][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="minions")>>
<<minions-config>>
<<gen-pkg-end()>>
#+END_SRC

** Nerd Icons Package
Icon support with completion and dired integration for modern UI. → [[*Nerd Icons][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="nerd-icons")>>
<<nerd-icons-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Nerd Icons Completion Package
Icon support in completion interfaces for visual identification. → [[*Nerd Icons Completion][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="nerd-icons-completion", after="(nerd-icons marginalia)")>>
<<nerd-icons-completion-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Nerd Icons Dired Package :ignore:
:PROPERTIES:
:header-args: :tangle no
:END:
Icon display in dired buffers for file type recognition. → [[*Nerd Icons Dired][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="nerd-icons-dired", after="(nerd-icons dired)")>>
<<nerd-icons-dired-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Nerd Icons Multimodal Package
Multimodal icon support across different Emacs interfaces. → [[*Nerd Icons Multimodal][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="nerd-icons-multimodal", after="nerd-icons", straight="(:host github :repo \"abougouffa/nerd-icons-multimodal\")")>>
<<nerd-icons-multimodal-config>>
<<gen-pkg-end()>>
#+END_SRC

** Emoji Font Setup
Emoji font fallback configuration for proper emoji rendering. → [[*Emoji Font Configuration][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
;; Configure emoji fonts for better UTF-8 display
<<emoji-font-config>>
#+END_SRC

** Org Mode Package
  Basic org-mode configuration and babel setup. → [[*Org Mode][Configuration]]
*** Basic Org Settings
 #+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
 <<basic-org-config>>
  #+END_SRC

*** Org Modern Package
Modern styling for org-mode documents with better typography. → [[*Org Modern][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="org-modern")>>
<<org-modern-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Org Modern Indent Package
Visual indentation for org-mode structure and readability. → [[*Org Modern Indent][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="org-modern-indent", after="org-modern", straight="(:host github :repo \"jdtsmith/org-modern-indent\")")>>
<<org-modern-indent-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Org Cliplink Package
URL insertion from clipboard with automatic title extraction. → [[*Org Cliplink][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="org-cliplink")>>
<<org-cliplink-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Org Roam Package
Zettelkasten-style note-taking with backlinks and knowledge graphs. → [[*Org Roam][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="org-roam")>>
<<org-roam-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Org Appear Package
Dynamically shows and hides org-mode markup characters based on cursor position. → [[*Org Appear][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="org-appear")>>
<<org-appear-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Org Download Package
Drag-and-drop functionality for images in org-mode documents. → [[*Org Download][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="org-download")>>
<<org-download-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Org Web Tools Package
Web-related utilities for org-mode including content extraction. → [[*Org Web Tools][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="org-web-tools")>>
<<org-web-tools-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Org QL Package
SQL-like query language for searching and filtering org-mode content. → [[*Org QL][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="org-ql")>>
<<org-ql-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Org Contrib Package
Additional org-mode functionality and exporters for extended capabilities. → [[*Org Contrib][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="org-contrib")>>
<<org-contrib-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Org Eldoc Package
Function signature display in org-mode for enhanced development experience. → [[*Org Eldoc][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="org-eldoc")>>
<<org-eldoc-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Org Tempo Package
Built-in template expansion system for quick insertion of org structures. → [[*Org Tempo][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<org-tempo-config>>
#+END_SRC

*** Org Habit Package
Built-in habit tracking functionality with visual progress graphs. → [[*Org Habit][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<org-habit-config>>
#+END_SRC

*** Org Phscroll Package
Smooth scrolling functionality for enhanced org-mode navigation experience. → [[*Org Phscroll][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="org-phscroll", straight="(:host github :repo \"misohena/phscroll\")")>>
<<org-phscroll-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Org Popup Posframe Package
Display org-mode popups in posframe floating windows. → [[*Org Popup Posframe][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="org-popup-posframe", strght_gh="A7R7/org-popup-posframe")>>
<<org-popup-posframe-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Ob Napkin Package
Diagram support in org-babel using napkin markup language. → [[*Ob Napkin][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="ob-napkin")>>
<<ob-napkin-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Org Babel Language Support Packages
**** Ob Rust Package
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="ob-rust")>>
;; Enable Rust execution in org-babel
<<gen-pkg-end()>>
#+END_SRC

**** Ob TypeScript Package
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="ob-typescript")>>
;; Enable TypeScript execution in org-babel
<<gen-pkg-end()>>
#+END_SRC

**** Ob HTTP Package
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="ob-http")>>
;; Enable HTTP requests in org-babel
<<gen-pkg-end()>>
#+END_SRC

**** Ob Restclient Package
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="ob-restclient")>>
;; Enable REST API testing in org-babel
<<gen-pkg-end()>>
#+END_SRC

*** Org Babel Configuration
  Babel setup. → [[*Org Mode][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<org-babel-config>>
#+END_SRC

** Additional Tools
*** Undo System Packages
**** Undo-Fu-Session Package
Persistent undo history across Emacs sessions for better editing continuity. → [[*Undo-Fu-Session][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="undo-fu-session")>>
<<undo-fu-session-config>>
<<gen-pkg-end()>>
#+END_SRC

**** Vundo Package
Modern visual undo system with tree-like interface for better history navigation. → [[*Vundo][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="vundo")>>
<<vundo-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Document Viewing Packages
**** PDF Tools Package
Superior PDF viewing and annotation capabilities in Emacs. → [[*PDF Tools][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="pdf-tools")>>
<<pdf-tools-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Code Formatting Packages
**** Apheleia Package
Modern code formatting that works seamlessly with LSP and version control. → [[*Apheleia][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="apheleia")>>
<<apheleia-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Security & Password Management Packages
**** Bitwarden Package
Password management integration for secure credential access within Emacs. → [[*Bitwarden][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="bitwarden", straight="(:host github :repo \"seanfarley/emacs-bitwarden\")")>>
<<bitwarden-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Development Enhancement Packages
**** Perspective Package
Workspace management that groups buffers and windows by project/task context. → [[*Perspective][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="perspective", demand="t")>>
<<perspective-config>>
<<gen-pkg-end()>>
#+END_SRC

**** Deadgrep Package
Fast ripgrep interface with better performance than built-in grep commands. → [[*Deadgrep][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="deadgrep")>>
<<deadgrep-config>>
<<gen-pkg-end()>>
#+END_SRC

**** Magit Delta Package :ignore:
:PROPERTIES:
:header-args: :tangle no
:END:
Enhanced diff display in Magit with improved syntax highlighting and readability. → [[*Magit Delta][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="magit-delta", after="magit")>>
<<magit-delta-config>>
<<gen-pkg-end()>>
#+END_SRC

**** Difftastic Package
Structural diff tool that understands syntax for better code diffs. → [[*Difftastic][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="difftastic")>>
<<difftastic-config>>
<<gen-pkg-end()>>
#+END_SRC

**** Git Timemachine Package
Interactive git history browsing that lets you step through file changes over time. → [[*Git Timemachine][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="git-timemachine")>>
<<git-timemachine-config>>
:hook (git-timemachine-mode . (lambda ()
                               <<gen-keys(mode="evil-local", tname=git-timemachine-keys)>>))
<<gen-pkg-end()>>
#+END_SRC

*** UI Enhancement Packages
**** Mode Line Bell Package
Visual bell notification instead of audio beep for better user experience. → [[*Mode Line Bell][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="mode-line-bell")>>
<<mode-line-bell-config>>
<<gen-pkg-end()>>
#+END_SRC


**** Fixed Pitch Mode Package
Forces fixed-width font for specific modes and contexts. → [[*Fixed Pitch Mode][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="fixed-pitch", strght_gh="cstby/fixed-pitch-mode")>>
<<fixed-pitch-mode-config>>
<<gen-pkg-end()>>
#+END_SRC

**** Highlight Indent Guides Package
Visual indentation guides for better code readability and structure. → [[*Highlight Indent Guides][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="highlight-indent-guides")>>
<<highlight-indent-guides-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Colorful Mode Package
Colorize color names and hex codes in buffers for better visual recognition of colors. → [[*Colorful Mode][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
<<gen-use-pkg(package="colorful-mode")>>
<<colorful-mode-config>>
<<gen-pkg-end()>>
#+END_SRC

*** Org Mode Keybindings
Org-Mode keybindings generation. → [[*Org Mode Keybindings Table][Configuration]]
#+BEGIN_SRC emacs-lisp :noweb yes :exports none :results silent
;; Add org-mode keybindings
(add-hook 'org-mode-hook
          (lambda ()
            <<gen-keys(mode="org", tname=org-keys)>>
            ))
#+END_SRC
