#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el
#+STARTUP: fold
#+DATE:  <2016-01-25 Mon>

#+TITLE: Emacs configuration file
#+AUTHOR: QuiQee

* About
   An Emacs configuration file written in =org-mode=.

** How does it work?
   =org-mode= support code block exports through a process called =tangle=. This
   document have a global setting that will enable =tangle= on all code block
   except for code block marked with =:tangle no=. The resulting code is stored
   in =~/.emacs.d/init.el=. A compiled code will also be produced. Take a look
   at [[Tangling Function]] for more details.

   You can find more information about *Literate Programming* and *org-mode*
   here:
   [[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming]]

* Basic
** Meta
*** Enable =lexical-binding=
   #+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
   #+END_SRC

*** Early Init
   Emacs27 introduces =early-init.el=, which is run before =init.el=, before package and UI initialization happens.
**** Garbage collection threshold
Increase the garbage collection threshold to 500 MB to ease startup

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/early-init.el
     ;; -*- lexical-binding: t -*-

     (setq gc-cons-threshold (* 500 1024 1024))
   #+END_SRC

**** Emacs JIT

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/early-init.el
     (setq comp-speed 2)
     (setq native-comp-async-report-warnings-errors nil)
   #+END_SRC

   Add a cache-directory root folder for compiled .eln files
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/early-init.el
     (when (boundp 'native-comp-eln-load-path)
       (setcar native-comp-eln-load-path
               (expand-file-name "eln-cache/" (format "%s%s" user-emacs-directory ".cache/"))))

     (setq native-comp-async-report-warnings-errors nil)
   #+END_SRC

**** Disable package-enable-at-startup
   Package initialize occurs automatically, before user-init-file is loaded, but
   after early-init-file. We handle package initialization, so we must prevent
   Emacs from doing it early!

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/early-init.el
     (setq package-enable-at-startup nil)
   #+END_SRC

**** Unset file-name-handler-alist
Every file opened and loaded by Emacs will run through this list to check for a proper handler for the file, but during startup, it won’t need any of them.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/early-init.el
     (defvar file-name-handler-alist-original file-name-handler-alist)
     (setq file-name-handler-alist nil)
   #+END_SRC

**** Disable site-run-file
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/early-init.el
  (setq site-run-file nil)
   #+END_SRC

**** Disable Unnecessary Interface
It will be faster to disable them here before they've been initialized.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/early-init.el
     (menu-bar-mode -1)
     (unless (and (display-graphic-p) (eq system-type 'darwin))
       (push '(menu-bar-lines . 0) default-frame-alist))
     (push '(tool-bar-lines . 0) default-frame-alist)
     (push '(vertical-scroll-bars) default-frame-alist)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/early-init.el
     (provide 'early-init)
   #+END_SRC
*** Compile
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/bin/compile.el
     (defcustom qq/cache-directory
       (concat user-emacs-directory ".cache/")
       "The storage location for various persistent files."
       :type '(string)
       :group 'qq)
     (when (boundp 'comp-eln-load-path)
       (let ((eln-cache-dir (expand-file-name "eln-cache/" qq/cache-directory))
             (find-exec (executable-find "find")))
         (setcar comp-eln-load-path eln-cache-dir)
         ;; Quitting emacs while native compilation in progress can leave zero byte
         ;; sized *.eln files behind. Hence delete such files during startup.
         (when find-exec
           (call-process find-exec nil nil nil eln-cache-dir
                         "-name" "*.eln" "-size" "0" "-delete"))))
     (setq quelpa-dir (concat user-emacs-directory ".cache/quelpa/")
           package-user-dir (concat user-emacs-directory ".cache/elpa/"))
     (package-initialize)
     (require 'org-install)
     (require 'ob-tangle)
     (require 'alert)
     (setq org-confirm-babel-evaluate nil)
     (org-babel-tangle-file "~/.emacs.d/init.org")
     (let ((tangled-file "~/.emacs.d/init.el"))
       (if (byte-compile-file tangled-file)
           (progn (when (featurep 'nativecomp)
                    (setq msg-result-output (format "Native compiled %s" (file-name-nondirectory (native-compile tangled-file)))))
                  (setq msg-result-output (format "%s\nTangled and compiled %s" msg-result-output tangled-file)))
         (setq msg-result-output (format "Error trying to compile %s" tangled-file))))
     ;(cond
     ; ((string-equal system-type "darwin") ; Mac OS X
     ;  (setq alert-default-style 'osx-notifier))
     ; ((string-equal system-type "gnu/linux") ; linux
     ;  (setq alert-default-style 'libnotify)))

     (alert msg-result-output :title "Emacs")
   #+END_SRC

*** Personal Custom group
   Create a custom group to group any custom variable so it will not
   polute built in variable space

   #+BEGIN_SRC emacs-lisp
     (defgroup qq nil
       "Personal Custom configuration."
       ;:type '(string)
       :group 'local)
   #+END_SRC

   Add a cache-directory root folder custom variable

   #+BEGIN_SRC emacs-lisp
     (defcustom qq/cache-directory
       (concat user-emacs-directory ".cache/")
       "The storage location for various persistent files."
       :type '(string)
       :group 'qq)
   #+END_SRC

   Add a custom theme folder under cache-directory

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'custom-theme-load-path (concat qq/cache-directory "themes/"))
   #+END_SRC

*** Packages
   List of packages used through out this configuration.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/bin/packages.el
     (setq quelpa-dir (concat user-emacs-directory ".cache/quelpa/")
           package-user-dir (concat user-emacs-directory ".cache/elpa/"))

     (package-initialize)

     (let ((inhibit-message t))
       (unless (package-installed-p 'quelpa)
         (with-temp-buffer
           (url-insert-file-contents "https://github.com/quelpa/quelpa/raw/master/quelpa.el")
           (eval-buffer)
           (quelpa-self-upgrade))))

                                             ; find package information from following archives
     (setq package-archives (quote (("gnu" . "http://elpa.gnu.org/packages/")
                                    ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                                    ("melpa" . "https://melpa.org/packages/"))) package-menu-async nil)

     (list-packages)

     (mapcar (lambda (package)
                                             ; install package if not already installed
               (let* ((ret (car-safe package)) (meth (plist-get package ret)))
                 (unless (package-installed-p (or ret package))
                   (if (and ret (eq meth 'builtin))
                       (let ((inhibit-message t))
                         (package-install ret))
                     (let* ((inhibit-message t))
                       (quelpa package)))
                   (if (package-installed-p (or ret package))
                       (progn (setq qq/package-installed t)
                              (message "✓ Installed %s" (or ret package)))
                     (error "✕ Couldn't install %s" (or ret package))))))

                                             ; list of packages to be installed
             '(
               ;; Tools
               exec-path-from-shell
               ranger
               multi-term
               restart-emacs
               smerge-mode

               beacon

               async
               auto-dim-other-buffers
               crux
                                             ;emojify

               mixed-pitch

               move-text                     ; Move current line or region with M-up or M-down
               multiple-cursors              ; Multiple cursors for Emacs.
               org-superstar                 ; show org bullet as Unicode character
               org-cliplink
               ob-napkin
                                             ;org-pdfview
                                             ;org-sidebar
                                             ;paredit                       ; minor mode for editing parentheses
               popwin                        ; popup window manager
                                             ;(depends-on "pretty-lambdada")
               rainbow-delimiters
                                             ;smart-mode-line
               smartparens                   ; Minor mode for Emacs that deals with parens pairs
               smart-tabs-mode               ; provide semantic way of using tab in source code
               smex                          ; M-x interface with Ido-style fuzzy matching.

               vterm
               multi-vterm
               volatile-highlights
               wgrep-ag
               xcscope
               yasnippet                     ; snippet tools for emacs
               yasnippet-snippets

               ;; UI Enhancement
                                             ;window-numbering
               amx
               default-text-scale

               hydra
               vc-msg
               pretty-hydra

               flx

               calibredb
               mode-line-bell

               ;; Modes
               writegood-mode
               persp-mode
               plantuml-mode

               ;; Languages major modes
               prettier-js
               js-doc
               rjsx-mode
               json-mode
               markdown-mode
               json-mode
               swift-mode
               modern-cpp-font-lock

               fasd
               (fasd-shell :fetcher git :url "https://gitlab.com/emacs-stuff/fasd-shell.git")
               shell-here

               alert
               (csv-mode builtin)
               (auctex builtin)              ; integrated environment for *TeX*
               (rainbow-mode builtin)        ; colorized color code in file
               (undo-tree builtin)           ; Treat undo history as a tree
               (org-contrib builtin)    ; Outline-based notes management and organizer
               (bug-hunter builtin)

               clang-format

               cmake-mode
               cmake-font-lock
               eldoc-cmake

               company
               company-c-headers
               company-box
               company-posframe
               company-emoji
               company-math
               company-quickhelp
               company-flx
               company-tabnine
               company-statistics

               dired-narrow
               dired-subtree
               all-the-icons-dired
               docker-tramp

               general

               ibuffer-vc

               selectrum
               marginalia
               prescient
               selectrum-prescient
               consult
               consult-flycheck
               orderless
               mini-frame

               yaml-mode

               dap-mode
               lsp-mode
               lsp-ui
               lsp-treemacs
               ccls
                                             ;lsp-sourcekit
               vlf
               git-timemachine
               ggtags

               nyan-mode

               xcode-mode

               clean-aindent-mode
               ws-butler
               projectile
               ace-jump-mode                 ; quick cursor location minor mode
               ag
                                             ;(depends-on "ecb" :git "https://github.com/alexott/ecb.git" :files ("*" (:exclude ".git")))
               auto-compile                  ; automatically compile Emacs Lisp libraries
               ;color-identifiers-mode        ; gives colors to unique variables passed into functions

               diff-hl
                                             ;(depends-on "dired+")
               discover-my-major             ; Discover key bindings and their meaning for
                                             ; the current Emacs major mode
               elisp-slime-nav               ; Provide convinient navigation to the definitions
                                             ; of variables, functions, libraries and faces.
               elscreen                      ; window session manager

               treemacs

               speed-type

               region-state

               doom-modeline
               minions
               mini-modeline

               pdf-tools
               tablist

               (tempbuf :fetcher url :url "http://www.emacswiki.org/emacs/download/tempbuf.el" )

               expand-region

               ;; vim emulator
               evil
               evil-collection
               evil-exchange
               evil-indent-textobject
                                             ;(depends-on "evil-jumper")
               evil-matchit
               evil-nerd-commenter
               evil-numbers
               evil-surround
               evil-visualstar
               evil-quickscope
               evil-mc
               general

               flycheck                      ; on-the-fly syntax checking
               ggtags
               which-key
               ws-butler

               hungry-delete
               idle-highlight-mode           ; sets an idle timer that highlights all
                                             ; occurences in the buffer of the word under cursor
               highlight-indent-guides       ; a neat mode to show indentation

               key-chord

               latex-preview-pane

               magic-latex-buffer

               magit
               git-gutter-fringe
               git-messenger

               ))
     (cond
      ((string-equal system-type "darwin") ; Mac OS X
       (setq alert-default-style 'osx-notifier))
      ((string-equal system-type "gnu/linux") ; linux
       (setq alert-default-style 'libnotify)))

     (when (boundp 'qq/package-installed)
       (require 'alert)
       (alert "package installation done" :title "Emacs"))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (setq quelpa-dir (concat user-emacs-directory ".cache/quelpa/")
        package-user-dir (concat user-emacs-directory ".cache/elpa/"))
     (package-initialize)
   #+END_SRC

*** Init utilites
**** Evaluate after
Convenient macro to allow processing after checking existing pre-condition

   #+BEGIN_SRC emacs-lisp
     (defmacro after (feature &rest body)
       "Load BODY after FEATURE, catching errors and displaying as warnings."
       (declare (indent defun))
       `(with-eval-after-load ,feature
          (condition-case-unless-debug err
              (progn
                ,@body)
            (error
             (display-warning
              'init
              (format "%s eval-after-load: %s "
                      (symbol-name ,feature)
                      (error-message-string err))
              :error)))))


     (defmacro csetq (sym val)
       `(funcall (or (get ',sym 'custom-set) 'set-default) ',sym ,val))

   #+END_SRC

*** Tangling Function
   Emacs can only load =.el=-files. We can use =C-c C-v t= to run
   =org-babel-tangle=, which extracts the code blocks from the current file
   into a source-specific file (in this case a =.el=-file).

   To avoid doing this each time a change is made we can add a function to
   the =after-save-hook= ensuring to always tangle and byte-compile the
   =org=-document after changes.

   #+BEGIN_SRC emacs-lisp
     (defun qq/tangle-init ()
       "If the current buffer is 'init.org' the code-blocks are
                      tangled, and the tangled file is compiled."
       (when (string= "init.org" (buffer-name))
         (call-process-shell-command "~/.emacs.d/bin/tangle &" nil 0)
         ))

     (add-hook 'after-save-hook 'qq/tangle-init)
   #+END_SRC

   Disable garbage collector when tangle running

   #+BEGIN_SRC emacs-lisp
     (setq qq/default-gc-cons-threshold gc-cons-threshold)
     (defun qq/set-gc-cons-threshold (&optional multiplier notify)
       "Set `gc-cons-threshold' either to its default value or a
        `multiplier' thereof."
       (let* ((new-multiplier (or multiplier 1))
              (new-threshold (* qq/default-gc-cons-threshold
                                new-multiplier)))
         (setq gc-cons-threshold new-threshold)
         (when notify (message "Setting `gc-cons-threshold' to %s"
                               new-threshold))))
     (defun qq/double-gc-cons-threshold () "Double `gc-cons-threshold'." (qq/set-gc-cons-threshold 2))
     (add-hook 'org-babel-pre-tangle-hook #'qq/double-gc-cons-threshold)
     (add-hook 'org-babel-post-tangle-hook #'qq/set-gc-cons-threshold)
   #+END_SRC

   To export to other format, just press =C-c C-e=, which will display further
   option to choose output format like HTML, PDF or LaTeX.

*** Custom =load-path=
   The variable =load-path= lists all the directories where Emacs should look
   for Elisp files. The first file found is used, therefore the order of the
   directories is relevant.

   =load-path= is documented in the [[info:emacs#Lisp%20Libraries][Emacs Manual]] or [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Libraries.html][Emacs Online Manual]], in
   chapter *Libraries of Lisp Code for Emacs*. Useful tips are also on
   [[http://www.emacswiki.org/emacs/LoadPath][EmacsWiki]].

   #+BEGIN_SRC emacs-lisp
     (let ((default-directory (concat user-emacs-directory "elisp")))
       (unless (file-exists-p default-directory)
         (make-directory default-directory))
       (add-to-list 'load-path default-directory))
   #+END_SRC

Here we create the directory =~/.emacs.d/elisp= if it does not exist, add it to
the =load-path=. Doing that any =.el= or =.elc= files in this directory can be
required from *emacs*.

*** Custom Cache
   By default, Emacs saves the options you set via the `customize-*` functions
   in the user init file, which is “~/.emacs.d/init.el” in this setup. I prefer
   to have it put that data in a seperate file.

   Set custom file config to store any cutomized settings. Create one when not
   exist.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (concat qq/cache-directory "custom.el"))
     (when (file-exists-p custom-file)
       (load custom-file))
   #+END_SRC

*** Keybinding Generation
   The code for the keys is generated from data in a named Org table, i.e.
   =keys= using a bit of Elisp code =gen-keys= and is spit out inside a code
   block via [[http://orgmode.org/manual/noweb.html][Noweb syntax]]. I'd like to be able to have only one place to change
   key information and have it updated wherever necessary. First, we need to
   create custom macros.

   #+BEGIN_SRC emacs-lisp
     (defmacro bind (&rest commands)
       "Convience macro which creates a lambda interactive command."
       `(lambda ()
          (interactive)
          ,@commands))

     (defun qq/goto-scratch-buffer ()
       "Create a new scratch buffer."
       (interactive)
       (switch-to-buffer (get-buffer-create "*scratch*"))
       (emacs-lisp-mode))

     ;; mouse scrolling in terminal
     (unless (display-graphic-p)
       (global-set-key [mouse-4] (bind (scroll-down 1)))
       (global-set-key [mouse-5] (bind (scroll-up 1))))
   #+END_SRC


   We need to turn the mode on here so that we can map keys further below. We
   lower the delay so that chords are not triggered too easily.

   #+NAME: gen-keys
   #+BEGIN_SRC emacs-lisp :var tname=1 :var mvar="" :var mmap="" :var moda="" :results output :tangle no :exports none :colnames yes
     (mapcar (lambda (l)
               (unless (string-match "^<[[:digit:]]+>$" (format "%s" (car l)))
                 (let* ((key (car l))
                        (usemap (string< "" (format "%s" mmap)))
                        (map (if usemap
                                 (cond ((string= (format "%s" mmap) "t") (nth 1 l))
                                       ((string= (format "%s" mmap) "ev-nor") "evil-normal-state-map")
                                       ((string= (format "%s" mmap) "ev-mot") "evil-motion-state-map")
                                       ((string= (format "%s" mmap) "ev-vis") "evil-visual-state-map")
                                       ((string= (format "%s" mmap) "mvar") mvar)
                                       (t (format "%s" mmap))) nil))
                        (def (cond ((string= (format "%s" moda) "key")
                                    (format "key-chord-define-global \"%s\"" key))
                                   ((string= (format "%s" moda) "normalmap")
                                    (format "general-def 'normal %s \"%s\"" mvar key))
                                   ((string= (format "%s" moda) "evilmap")
                                    (format "general-def '%s %s \"%s\"" (nth 1 l) mvar key))
                                   ((string= (format "%s" moda) "evil")
                                    (format "general-def '%s %s \"%s\"" (nth 2 l) (nth 1 l) key))
                                   ((string= (format "%s" moda) "lead")
                                    (format "\"%s\"" key))
                                   ((string= (format "%s" moda) "xvil")
                                    (format "evil-ex-define-cmd \"%s\"" key))
                                   ((string= (format "%s" key) "[escape]")
                                    (format "bind-key %s" key))
                                   (t (format "general-define-key \"%s\"" key))))
                        (command (car (last l))))
                   (if usemap
                       (princ (format "(%s %s %s)\n" def command map))
                     (if (string= (format "%s" moda) "lead")
                         (princ (format "%s %s\n" def command map))
                       (princ (format "(%s %s)\n" def command)))
                     ))))
             tname)
   #+END_SRC

   Utility function for keys generation, this portion will add pre/post code

   #+NAME: gen-fix
   #+BEGIN_SRC emacs-lisp :var pre="" :var pos="" :result output :tangle no :exports none :colnames yes
     (let* ((beg (format "%s" pre))
            (las (format "%s" pos)))
       (if (string< "" beg) (princ (format "(%s" beg))
         (princ las)))
   #+END_SRC

** Site-Specific
*** Common
**** Fonts
   #+begin_src emacs-lisp
     (custom-theme-set-faces
      'user

      '(variable-pitch ((t (:family "Cabin"
                                    :height 1.3))))
      '(fixed-pitch ((t ( :family "PragmataPro"
                          :slant normal
                          :weight normal
                          :height 1.1
                          :width normal)))))

     ;; Setting the default general font
     (set-face-attribute 'default nil
                         :family "PragmataPro"
                         :height 140
                         )
   #+end_src

**** Ccls Executables

   #+begin_src emacs-lisp
     (defvar qq/ccls-binary "/usr/bin/ccls")
   #+end_src

**** Serial Ports

   #+begin_src emacs-lisp
     (defvar qq/serial-port1 "/dev/ttyUSB0")
   #+end_src

**** clangd Executables

   #+begin_src emacs-lisp
     (defvar qq/clangd-binary "/usr/bin/clangd")
   #+end_src

**** Shell program

   #+begin_src emacs-lisp
     (setq qq/shell-prog "/bin/bash")
   #+end_src

**** System Environment
   Don't warn about the location of environment variable settings
   #+begin_src emacs-lisp
     (setq exec-path-from-shell-check-startup-files nil)
   #+end_src

   Tells emacs to use path from shell
   #+begin_src emacs-lisp
     (exec-path-from-shell-initialize)
   #+end_src

**** Fulscreen setting

   #+begin_src emacs-lisp
     (setq qq/fullscreen-max t)
   #+end_src

*** Linux Desktop

   #+BEGIN_SRC emacs-lisp
     (defvar qq/system-name system-name)
     (cond
      ((or (string-equal qq/system-name "focal") (string-equal qq/system-name "osboxes") (string-equal qq/system-name "z390-manjaro"))
       (progn
   #+END_SRC

**** Fonts

   #+begin_src emacs-lisp
     (custom-theme-set-faces
      'user

      '(variable-pitch ((t (:family "Cabin"
                                    :height 1.3))))
      '(fixed-pitch ((t ( :family "PragmataPro"
                          :slant normal
                          :weight normal
                          :height 1.0
                          :width normal)))))

     ;; Setting the default general font
     (set-face-attribute 'default nil
                         :family "PragmataPro"
                         :height 105
                         )
   #+end_src

**** Ccls Executables

   #+begin_src emacs-lisp
     (defvar qq/ccls-binary "/usr/local/bin/ccls")
   #+end_src

**** C-Headers path
   #+BEGIN_SRC emacs-lisp
     (defvar qq/c-headers-path "/usr/include/c++/4.8.4")
   #+END_SRC

**** Gerrit Identitiy
   #+BEGIN_SRC emacs-lisp
     (defvar qq/gerrit-creds "fpribadi@gitgerrit-01.greenwavereality.eu")
   #+END_SRC

**** LibClang path

   #+BEGIN_SRC emacs-lisp
     (exec-path-from-shell-copy-env "LD_LIBRARY_PATH")
     (setq exec-path (append exec-path '("/home/fikri/local/lib")))
   #+END_SRC

**** End
   #+BEGIN_SRC emacs-lisp
     ))
   #+END_SRC

*** Mac @home
   #+BEGIN_SRC emacs-lisp
      ((string-equal system-type "darwin") ; Mac OS X
       (progn
         (message "Mac OS X")
   #+END_SRC

**** Fonts

   #+begin_src emacs-lisp
   #+end_src

**** Serial Ports

   #+begin_src emacs-lisp
     (defvar qq/serial-port1 "/dev/cu.usbserial-FTXKVR0Q")
  ;   (defvar qq/serial-port1 "/dev/cu.usbserial-FTZ84CHE")
   #+end_src

**** Fulscreen setting

   #+begin_src emacs-lisp
     (setq qq/fullscreen-max t)
   #+end_src

**** Gerrit Identitiy
   #+BEGIN_SRC emacs-lisp
     (defvar qq/gerrit-creds "")
   #+END_SRC

**** More sane scrolling with OS X mouse/trackpad

   #+BEGIN_SRC emacs-lisp
     (global-set-key [wheel-down] (lambda () (interactive) (scroll-up-command 1)))
     (global-set-key [wheel-up] (lambda () (interactive) (scroll-down-command 1)))
     (global-set-key [double-wheel-down] (lambda () (interactive) (scroll-up-command 2)))
     (global-set-key [double-wheel-up] (lambda () (interactive) (scroll-down-command 2)))
     (global-set-key [triple-wheel-down] (lambda () (interactive) (scroll-up-command 4)))
     (global-set-key [triple-wheel-up] (lambda () (interactive) (scroll-down-command 4)))
   #+END_SRC

**** =alert= notifier

   #+BEGIN_SRC emacs-lisp
     (setq alert-default-style 'osx-notifier)
   #+END_SRC

**** Modifier keys
   =C-= means =Control= in combination with another key, eg =C-x= means =Ctrl + x=
   =M-= means =Meta= in combination with another key. This is usually =Alt=,
   or ⌘ on OS X (by default). =Esc= also serves as =Meta= if it’s not separately
   bound. On OS X I want to use left ⌥ for =Meta=, and leave right ⌥ alone:

   #+begin_src emacs-lisp
       (setq ns-alternate-modifier 'meta)
       (setq ns-right-alternate-modifier nil)
   #+end_src

   =s-= means =super= key. On OS X I want this to be ⌘:

   #+begin_src emacs-lisp
       (setq ns-command-modifier 'super)
   #+end_src

   =H-= means =hyper= key. On OS X I want this to be fn:

   #+begin_src emacs-lisp
       (setq ns-function-modifier 'hyper)
   #+end_src

**** Shell environment

   #+begin_src emacs-lisp
     (setq qq/shell-prog "/usr/local/bin/bash")
     (setenv "LIBRARY_PATH" "/usr/local/opt/gcc/lib/gcc/10/:/usr/local/opt/libgccjit/lib/gcc/10:/usr/local/opt/gcc/lib/gcc/10/gcc/x86_64-apple-darwin20/10.2.0")
     (exec-path-from-shell-copy-env "PKG_CONFIG_PATH")
   #+end_src

**** Host name mangling
   Typically OS X hosts are called things like hostname.localconfig or
   hostname.local. Make Emacs report that without the extra suffix:

   #+begin_src emacs-lisp
       (setq system-name (car (split-string system-name "\\.")))
   #+end_src

**** Spelling correction
   =ispell= isn’t generally available on OS X. =aspell= is available via =Homebrew=,
   so let’s use that if we can find it:

   #+begin_src emacs-lisp
     (when (executable-find "aspell")
         (setq ispell-program-name (executable-find "aspell")))
   #+end_src

**** dired fixes
   OS X’s bundled version of ls isn’t the GNU one, so it doesn’t support the
   --dired flag. Emacs caters for that use case:

   #+begin_src emacs-lisp
     (setq dired-use-ls-dired nil)
   #+end_src

**** End
   #+BEGIN_SRC emacs-lisp
     ))
   #+END_SRC
*** GwsEmb

   #+BEGIN_SRC emacs-lisp
      ((string-equal qq/system-name "fikri-OptiPlex-5040") ; Mac OS X
       (progn
         (message "GWS Embbeded")
   #+END_SRC

**** Fonts

   #+begin_src emacs-lisp
   #+end_src

**** Ccls Executables

   #+begin_src emacs-lisp
     (setq qq/ccls-binary "/usr/local/bin/ccls")
   #+end_src

**** Serial Ports

   #+begin_src emacs-lisp
     (defvar qq/serial-port1 "/dev/ttyUSB0")
   #+end_src

**** =alert= notifier

   #+BEGIN_SRC emacs-lisp
     (setq alert-default-style 'libnotify)
   #+END_SRC

**** Gerrit Identitiy
   #+BEGIN_SRC emacs-lisp
     (defvar qq/gerrit-creds "fpribadi@gitgerrit-02.greenwavereality.eu")
   #+END_SRC

**** End
   #+BEGIN_SRC emacs-lisp
     ))
   #+END_SRC

*** Work Laptop

   #+BEGIN_SRC emacs-lisp
     ((or (string-equal qq/system-name "fikri-Latitude-E5470")
          (string-equal qq/system-name "ThinkPad-E440")) ; Lenovo Thinkpad
      (progn
        (message "Lenovo Thinkpad")
   #+END_SRC

**** Fonts

   #+begin_src emacs-lisp
   #+end_src

**** Serial Ports

   #+begin_src emacs-lisp
     (defvar qq/serial-port1 "/dev/ttyUSB0")
   #+end_src

**** =alert= notifier

   #+BEGIN_SRC emacs-lisp
     (setq alert-default-style 'libnotify)
   #+END_SRC

**** Gerrit Identitiy
   #+BEGIN_SRC emacs-lisp
     (defvar qq/gerrit-creds "fpribadi@gitgerrit-02.greenwavereality.eu")
   #+END_SRC

**** End
   #+BEGIN_SRC emacs-lisp
     ))
   #+END_SRC

*** Other Sites
   #+BEGIN_SRC emacs-lisp
      ((string-equal system-type "gnu/linux") ; linux
       (progn
         (message "Linux")
   #+END_SRC

**** Serial Ports

   #+begin_src emacs-lisp
     (defvar qq/serial-port1 "/dev/ttyUSB0")
   #+end_src

**** End
   #+BEGIN_SRC emacs-lisp
     )))
   #+END_SRC

** Settings
*** Require
   Some features are not loaded by default to minimize initialization time,
   so they have to be required (or loaded, if you will). =require= calls
   tends to lead to the largest bottleneck's in a
   configuration. =idle-reqire= delays the =require=-calls to a time where
   Emacs is in idle. So this is great for stuff you eventually want to load,
   but is not a high priority.

   #+BEGIN_SRC emacs-lisp
     (dolist (feature
              '(
                auto-compile          ; auto-compile .el files
                region-state          ; Show the number of chars/lines or rows/columns in the region
                saveplace
                ))
       (require feature))
   #+END_SRC

*** Backups
**** Set up some directories to keep backups and tell emacs to use it

   #+BEGIN_SRC emacs-lisp
     (defvar autosave-dir
       (concat qq/cache-directory "backups/"))
     (defun auto-save-file-name-p (filename)
       (string-match "^#.*#$" (file-name-nondirectory filename)))
   #+END_SRC

**** Set up file naming convention to use for backup files
   For more info refer [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Save-Files.html][here]]

   #+BEGIN_SRC emacs-lisp
     (defun make-auto-save-file-name ()
       (concat autosave-dir
               (if buffer-file-name
                   (concat "#" (file-name-nondirectory buffer-file-name) "#")
                 (expand-file-name
          (concat "#%" (buffer-name) "#")))))
   #+END_SRC

**** Always copy files when backing up to avoid breaking symlinks:

   #+BEGIN_SRC emacs-lisp
     (setq backup-by-copying t)
   #+END_SRC

**** Delete old versions automatically, and keep a limited number around:

   #+BEGIN_SRC emacs-lisp
     (setq delete-old-versions t
           kept-new-versions 2
           kept-old-versions 2
           vc-cvs-stay-local nil
   #+END_SRC

**** Finally, use version numbers in the filenames:

   #+BEGIN_SRC emacs-lisp
           version-control t)
   #+END_SRC

*** Custom variables

   #+BEGIN_SRC emacs-lisp
     (defvar best-gc-cons-threshold (* 32 1024 1024) "Best default gc threshold value (5 MB). Shouldn't be too big.")
   #+END_SRC

*** Emacs Garbage Collector
   Once startup complete decrease threshold to 5 MB

   #+begin_src emacs-lisp
     (add-hook 'after-init-hook (lambda () (setq gc-cons-threshold (* 32 1024 1024))))
   #+end_src

*** Trailing whitespace
   Ideally, I don’t want to leave trailing whitespace in files I touch, But sometimes,
   when working on shared files, I prefer to leave the file as-is and only changed what
   I explicitly do

   So I created a simple mode to toggle a hook that enable/disable deleting trailing
   whitespace after every line when saving a file:

   #+begin_src emacs-lisp
     (defvar qq/delete-trailing-whitespace t
       "Non-nil will enable deleting trailing whitespace during file save operation.")

     (defun qq/trailing-whitespace-behavior () ;; try &rest with apply if you need args
       (unless qq/delete-trailing-whitespace
         (delete-trailing-whitespace)))

     (add-hook 'write-file-functions 'qq/trailing-whitespace-behavior)

     (defun qq/toggle-delete-trailing-whitespace ()
       "Enable/disable deleting of trailing whitespace on saving a file"
       (interactive)
       (if qq/delete-trailing-whitespace
           (progn
             (setq qq/delete-trailing-whitespace nil)
             (message "Trailing whitespace will be DELETED on file save"))
         (progn
           (setq qq/delete-trailing-whitespace t)
           (message "Trailing whitespace will be IGNORED on file save"))))
   #+end_src

*** Setq

   #+BEGIN_SRC emacs-lisp
     (setq default-input-method "TeX"                   ; Use TeX when toggeling input method.
           doc-view-continuous t                        ; At page edge goto next/previous.
           global-mark-ring-max 128
           ring-bell-function 'ignore                   ; Quiet.
           mark-ring-max 64
           sentence-end-double-space nil
           save-interprogram-paste-before-kill t
           history-delete-duplicates t
   #+END_SRC

**** Startup behaviour
   Inhibit some of those annoying startup display.

   #+BEGIN_SRC emacs-lisp
           inhibit-splash-screen t
           inhibit-startup-echo-area-message t
           inhibit-startup-message t                    ; No splash screen please.
           initial-scratch-message nil                 ; Clean scratch buffer.
   #+END_SRC

**** Auto split vertically

   #+BEGIN_SRC emacs-lisp
           split-height-threshold 0
           split-width-threshold nil
   #+END_SRC

**** Better scrolling

   #+BEGIN_SRC emacs-lisp
           scroll-conservatively 9999
           scroll-preserve-screen-position t
   #+END_SRC

**** Activate default value of =C= or =R= commands to another dired window.

   #+BEGIN_SRC emacs-lisp
           dired-dwim-target t
   #+END_SRC

**** Echo commands quicker than the default 1 second

   #+begin_src emacs-lisp
           echo-keystrokes 0.1
   #+end_src

**** Ignore case when using completion for file names

   #+begin_src emacs-lisp
           read-file-name-completion-ignore-case t
           read-buffer-completion-ignore-case t
   #+end_src

**** Hide the mouse while typing

   #+begin_src emacs-lisp
           make-pointer-invisible t
   #+end_src

**** Hide the mouse while typing
   Turn off lockfiles. They cannot be moved to a different directory, and they
   consistently screw up with file watchers and version control systems, so it’d
   be just easier to turn this feature off.
   #+begin_src emacs-lisp
           create-lockfiles nil
   #+end_src

**** Long Line movement
   It's so much easier to move around lines based on how they are displayed,
   rather than the actual line. This helps a tone with long log file lines that
   may be wrapped:

   #+begin_src emacs-lisp
           line-move-visual t
   #+end_src

**** Set the internal calculator not to go to scientific form

   #+begin_src emacs-lisp
           calc-display-sci-low -5
   #+end_src

**** Better buffer names for duplicates

   #+BEGIN_SRC emacs-lisp
           uniquify-buffer-name-style 'reverse
           uniquify-separator "|"
           uniquify-ignore-buffers-re "^\\*" ; leave special buffers alone
           uniquify-after-kill-buffer-p t
   #+END_SRC

**** Security
   Tells the auth-source library to store netrc file here: [[file:~/.emacs.d/authinfo.gpg::testt][authinfo.gpg]]

   #+begin_src emacs-lisp
           epg-gpg-program "/usr/local/bin/gpg"
           auth-sources '((:source "~/.emacs.d/authinfo.gpg"))
   #+end_src

**** Save-place
   If emacs is slow to exit after enabling saveplace, you may be running afoul
   of save-place-forget-unreadable-files. On exit, it checks that every loaded
   file is readable before saving its buffer position - potentially very slow if
   you use NFS.

   #+BEGIN_SRC emacs-lisp
           save-place-forget-unreadable-files nil
   #+END_SRC

**** Read Process Output
  Increase the amount of data which Emacs reads from the process. Again the
  emacs default is too low 4k considering that the some of the language server
  responses are in 800k - 3M range.

   #+BEGIN_SRC emacs-lisp
     read-process-output-max (* 1024 1024) ;; 1mb
   #+END_SRC

**** Other Temporary files
   To avoid file system clutter we put all auto saved files in a single
   directory

   #+BEGIN_SRC emacs-lisp
     abbrev-file-name
        (concat qq/cache-directory "abbrev_defs") ; cache for abbrev_defs
     save-place-file
        (concat qq/cache-directory "places")      ; cache for save-place
     savehist-file
        (concat qq/cache-directory "savehist")    ; cache for minibuffer history
     savehist-additional-variables
        '(search ring regexp-search-ring qq/delete-trailing-whitespace)
     recentf-save-file
        (concat qq/cache-directory "recentf")     ; cache folder for recently open files
     recentf-max-saved-items 1000                 ; maximum saved items in recentf
     recentf-max-menu-items 500
     ido-save-directory-list-file
        (concat qq/cache-directory "ido.last")

     emojify-emojis-dir
        (concat  qq/cache-directory "emojis" )

     eshell-directory-name
        (concat  qq/cache-directory "eshell" )

     projectile-cache-file
        (concat  qq/cache-directory "projectile.cache" )

     persp-save-dir
        (concat  qq/cache-directory "persp-conf/")

     smex-save-file
        (concat  qq/cache-directory "smex-items")

     nsm-settings-file
        (concat  qq/cache-directory "network-security.data")

     image-dired-dir
        (concat  qq/cache-directory "image-dired")

     projectile-known-projects-file
        (concat  qq/cache-directory "projectile-bookmarks.eld")

     company-statistics-file
        (concat  qq/cache-directory "company-statistics-cache.el")

     bookmark-default-file
        (concat qq/cache-directory "bookmarks")   ; cache for bookmark

     backup-directory-alist
     `(("." . ,(concat qq/cache-directory "backups")))

     auto-save-file-name-transforms
     `(("." ,(concat qq/cache-directory "backups/") t))

     auto-save-list-file-prefix
     (concat qq/cache-directory "auto-save-list/saves-")

     tramp-persistency-file-name
        (concat qq/cache-directory "tramp")      ; cache for tramp

     tramp-auto-save-directory
        qq/cache-directory                        ; auto-save tramp files

     delete-auto-save-files t
   #+END_SRC

   #+RESULTS:
   : t

**** Don't want to answer yes everytime

   #+BEGIN_SRC emacs-lisp
           save-abbrevs 'silently
   #+END_SRC

**** Don't display if there's no function to display

   #+BEGIN_SRC emacs-lisp
           which-func-unknown ""
   #+END_SRC

**** Interval between save in seconds

   #+BEGIN_SRC emacs-lisp
           savehist-autosave-interval 60
   #+END_SRC

**** Redisplay is bit too slow

   #+BEGIN_SRC emacs-lisp
     jit-lock-defer-time 0
     fast-but-imprecise-scrolling t
   #+END_SRC

**** Autosave bookmark on each change

   #+BEGIN_SRC emacs-lisp
           bookmark-save-flag 1
   #+END_SRC

**** Most UNIX tools work best when there’s a trailing newline on all files.

   #+begin_src emacs-lisp
           require-final-newline t
   #+end_src

**** Re-builder, nice interactive tool for building regular expressions

   #+BEGIN_SRC emacs-lisp
           reb-re-syntax 'string)                       ; fix backslash madness
   #+END_SRC

*** Setq-Defaults
   Some variables are buffer-local, so changing them using =setq= will only
   change them in a single buffer. Using =setq-default= we change the
   buffer-local variable's default value.

**** Maximum line width.

   #+BEGIN_SRC emacs-lisp
     (setq-default fill-column 80
   #+END_SRC

**** Use spaces instead of tabs.

   #+BEGIN_SRC emacs-lisp
                   indent-tabs-mode nil
   #+END_SRC

**** Line Spacing (in pixels)

   #+BEGIN_SRC emacs-lisp
                   line-spacing nil
   #+END_SRC

**** Default-tab

   #+BEGIN_SRC emacs-lisp
                   tab-width 4
   #+END_SRC

**** Split verticaly by default.

   #+BEGIN_SRC emacs-lisp
                   split-width-threshold 100
   #+END_SRC

**** Savehist history length

   #+BEGIN_SRC emacs-lisp
                   history-length 1000
   #+END_SRC

**** Proced
   Display all processes, not just my own processes

   #+BEGIN_SRC emacs-lisp
                   proced-filter 'all
   #+END_SRC

**** Auto rescan buffer contents
   Automatically rescan the buffer contents so that new jump targets appear in
   the menu as they are added

   #+BEGIN_SRC emacs-lisp
                   imenu-auto-rescan t)
   #+END_SRC

*** Remember cursor position

   #+BEGIN_SRC emacs-lisp
     (if (version< emacs-version "25.0")
         (progn
           (require 'saveplace)
           (setq-default save-place t))
       (save-place-mode 1))
   #+END_SRC

*** Turn on auto-fill mode in text buffers

   #+begin_src emacs-lisp
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
   #+end_src

*** Emacs Server
   Start a server if not running, but a different server for GUI versus text-only

   #+begin_src emacs-lisp
     (add-hook 'after-init-hook
               (lambda ()
                 (require 'server)
                 (if (window-system)
                     (if (server-running-p server-name)
                         nil
                       (progn
                         (setq server-name "server-gui")
                         (server-start)))
                   (if (server-running-p server-name)
                       nil
                     (progn
                       (setq server-name "server-nw")
                       (server-start))))))
   #+end_src

j*** Local =compile-command=
   The variable compile-command is not buffer local by default, thus you can not
   set it per buffer. Command below is to change it to buffer local

   #+begin_src emacs-lisp
     (make-variable-buffer-local 'compile-command)
   #+end_src

*** Bells
   Don’t make a sound when ringing a bell - flash a visual bell instead:

   #+begin_src emacs-lisp
     (setq visible-bell t)
   #+end_src

   Override the ring-bell-function to conditionally ring the bell only when it’s
   not a valid quit case like hitting esc or C-g. Generally this means the bell
   will only ring when there’s actually an error raised somehow:

   #+begin_src emacs-lisp
     (setq ring-bell-function
           (lambda ()
             "Only rings the bell if it's not a valid quit case, e.g
     keyboard-quit"
             (unless (memq this-command
                           '(isearch-abort abort-recursive-edit exit-minibuffer keyboard-quit))
               (ding))))
   #+end_src

*** Yes or No
   Answering /yes/ and /no/ to each question from Emacs can be tedious, a
   single /y/ or /n/ will suffice.

   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

*** Automatically revert =doc-view= buffers when the file changes on disk.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'doc-view-mode-hook 'auto-revert-mode)
   #+END_SRC

*** Hook for find-file
   this will check for large file set it to read only,
   display trailing whitespace and enable visual-line-mode

   #+BEGIN_SRC emacs-lisp
     (defun qq/find-file-check-large-file ()
       (when (> (buffer-size) (* 2048 2048))
         (setq buffer-read-only t)
         (buffer-disable-undo)
         (fundamental-mode)))


     (add-hook 'find-file-hook (lambda ()
                                 (qq/find-file-check-large-file)
                                 (visual-line-mode)
                                 (setq show-trailing-whitespace t)))
   #+END_SRC

*** Leave scratch buffers alone

   #+BEGIN_SRC emacs-lisp
     (defun qq/do-not-kill-scratch-buffer ()
       (if (member (buffer-name (current-buffer)) '("*scratch*" "*Messages*"))
           (progn
             (bury-buffer)
             nil)
         t))
     (add-hook 'kill-buffer-query-functions 'qq/do-not-kill-scratch-buffer)
   #+END_SRC

*** UTF-8
   Set =utf-8= as preferred coding system.

   #+BEGIN_SRC emacs-lisp
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
     (set-language-environment "UTF-8")
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (setq locale-coding-system 'utf-8)
   #+END_SRC

   Treat clipboard input as UTF-8 string first; compound text next, etc.
   #+BEGIN_SRC emacs-lisp
     (when (display-graphic-p)
       (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
   #+END_SRC

*** Start emacs @fullscreen
   #+begin_src emacs-lisp
     (if qq/fullscreen-max
         (toggle-frame-fullscreen)
       ;(setq default-frame-alist '((left . 0) (width . 424) (fullscreen . fullheight))))

       ; settings for ultrawide screen (5120x1440)
       (setq default-frame-alist '((left . 0) (width . 729) (fullscreen . fullheight))))
       ; settings for ultrawide screen (3440x1440)
       ;(setq default-frame-alist '((left . 0) (width . 487) (fullscreen . fullheight))))
   #+end_src

** Visual
*** Theme
   Change the color-theme to =moe-theme= (downloaded using =package=).

   #+BEGIN_SRC emacs-lisp
     (load-theme 'quickbeans t)
   #+END_SRC

**** Theme customization
   Added/modify some color for some minor/major mode that I use

***** smartparens
   #+BEGIN_SRC emacs-lisp
     (custom-set-faces
         '(sp-show-pair-match-face ((t (
                         :inherit nil
                         :background "#282828"
                         :bold t
                         :foreground "#ffffff"))))

         '(sp-pair-overlay-face ((t (
                         :inherit nil
                         :background nil
                         :foreground "#7cfc00"))))

         '(sp-wrap-overlay-face ((t (
                         :inherit nil
                         :background nil
                         :foreground "#ff4500"))))

         '(sp-wrap-tag-overlay-face ((t (
                         :inherit nil
                         :background nil
                         :foreground "#ff1493"))))

         '(sp-show-pair-enclosing ((t (
                         :inherit nil
                         :foreground "#000000"
                         :background "#ff6347"))))
   #+END_SRC
***** which-func-mode
   #+BEGIN_SRC emacs-lisp
         '(which-func  ((t (:foreground "#87d7af"))))
     )
   #+END_SRC

*** Transparency
   95% transparency is nice.

   #+BEGIN_SRC emacs-lisp
     (set-frame-parameter (selected-frame) 'alpha '(95 . 95))
     (add-to-list 'default-frame-alist '(alpha . (95 . 95)))
   #+END_SRC

*** Modeline
   Using [[https://github.com/seagle0128/doom-modeline][doom-modeline]].

   #+BEGIN_SRC emacs-lisp
     (require 'doom-modeline)
     (doom-modeline-def-modeline 'qq-simple-line
       '(modals workspace-name window-number matches buffer-info remote-host minor-modes)
       '(buffer-position word-count selection-info misc-info major-mode process vcs lsp checker))
     (defun setup-custom-doom-modeline ()
       (doom-modeline-set-modeline 'qq-simple-line 'default))

     (setq doom-modeline-minor-modes t)
     (add-hook 'doom-modeline-mode-hook 'setup-custom-doom-modeline)
     (doom-modeline-mode 1)

   #+END_SRC

**** Minions Mode
   #+BEGIN_SRC emacs-lisp
     (require 'minions)
     (minions-mode 1)
     (after minions-mode
       (setq minions-mode-line-lighter ""))
   #+END_SRC

**** Filename display mode
   Determines the style used by `doom-modeline-buffer-file-name'.

   Given ~/Projects/FOSS/emacs/lisp/comint.el
     truncate-upto-project => ~/P/F/emacs/lisp/comint.el
     truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
     truncate-with-project => emacs/l/comint.el
     truncate-except-project => ~/P/F/emacs/l/comint.el
     truncate-upto-root => ~/P/F/e/lisp/comint.el
     truncate-all => ~/P/F/e/l/comint.el
     relative-from-project => emacs/lisp/comint.el
     relative-to-project => lisp/comint.el
     file-name => comint.el
     buffer-name => comint.el<2> (uniquify buffer name)

   If you are expereicing the laggy issue, especially while editing remote files
   with tramp, please try `file-name' style.
   Please refer to https://github.com/bbatsov/projectile/issues/657.
   #+BEGIN_SRC emacs-lisp
     (setq doom-modeline-buffer-file-name-style 'relative-from-project)
   #+END_SRC

*** Highlight
   Enable highlighting similar word under the cursor (point)

   #+BEGIN_SRC emacs-lisp
     ;(setq idle-highlight-idle-time 0.3)
     ;(add-hook 'prog-mode-hook 'idle-highlight-mode)
   #+END_SRC

   Highlight current line mode

   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode)
   #+END_SRC

*** Emoji font support

   #+BEGIN_SRC emacs-lisp
     (defun --set-emoji-font (frame)
       "Adjust the font settings of FRAME so Emacs can display emoji properly."
       (if (eq system-type 'darwin)
           ;; For NS/Cocoa
           (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)
         ;; For Linux
         (set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))

     ;; For when Emacs is started in GUI mode:
     (--set-emoji-font nil)
     ;; Hook for when a frame is created with emacsclient
     ;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html
     (add-hook 'after-make-frame-functions '--set-emoji-font)
   #+END_SRC

*** Fix italics
   Make the italics show as actual italics. For some unknown reason, the below
   is needed to render the italics in org-mode. The issue could be related to
   the fonts in use. But having this doesn't hurt regardless.

   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'italic nil :inherit nil :slant 'italic)
   #+END_SRC
*** PragmataPro Ligatures
   Displaying sequences of characters as fancy characters or symbols
   for example, showing -> as →

   This only work for Pragmata Pro fonts, details [[https://www.reddit.com/r/emacs/comments/4sm6fa/how_to_enable_pragmatapro_ligatures/][here]].

   #+BEGIN_SRC emacs-lisp
       ;; PRETTIFY SYMBOLS (with Pragmata Pro)
       (defun setup-pragmata-ligatures ()
         (setq prettify-symbols-alist
               (append prettify-symbols-alist
                '(("!!"   . ?)
                  ("!="   . ?)
                  ("!=="  . ?)
                  ("!≡"   . ?)
                  ("!≡≡"  . ?)
                  ("!>"   . ?)
                  ("#("   . ?)
                  ("#_"   . ?)
                  ("#{"   . ?)
                  ("#?"   . ?)
                  ("#>"   . ?)
                  ("%="   . ?)
                  ("%>"   . ?)
                  ("<~"   . ?)
                  ("&%"   . ?)
                  ("&&"   . ?)
                  ("&*"   . ?)
                  ("&+"   . ?)
                  ("&-"   . ?)
                  ("&/"   . ?)
                  ("&="   . ?)
                  ("&&&"  . ?)
                  ("&>"   . ?)
                  ("$>"   . ?)
                  ("~>"   . ?)
                  ("***"  . ?)
                  ("*="   . ?)
                  ("*/"   . ?)
                  ("*>"   . ?)
                  ("++"   . ?)
                  ("+++"  . ?)
                  ("+="   . ?)
                  ("+>"   . ?)
                  ("--"   . ?)
                  ("-<"   . ?)
                  ("-<<"  . ?)
                  ("-="   . ?)
                  ("->>"  . ?)
                  ("---"  . ?)
                  ("-->"  . ?⟶)
                  (".."   . ?)
                  ("..."  . ?)
                  ("..<"  . ?)
                  (".>"   . ?)
                  (".~"   . ?)
                  (".="   . ?)
                  ("/*"   . ?)
                  ("//"   . ?)
                  ("/>"   . ?)
                  ("/="   . ?)
                  ("/=="  . ?)
                  ("///"  . ?)
                  ("/**"  . ?)
                  ("::"   . ?)
                  (":="   . ?)
                  (":≡"   . ?)
                  (":>"   . ?)
                  (":=>"  . ?⇰)
                  ("<$>"  . ?)
                  ("<*"   . ?)
                  ("<*>"  . ?)
                  ("<+>"  . ?)
                  ("<-"   . ?)
                  ("->"   . ?)
                  ("<<"   . ?)
                  ("<<<"  . ?)
                  ("<<="  . ?)
                  ("<="   . ?)
                  ("<=>"  . ?⟺)
                  ("<>"   . ?)
                  ("<|>"  . ?)
                  ("<<-"  . ?)
                  ("<|"   . ?)
                  ("<=<"  . ?)
                  ("<~~"  . ?)
                  ("<<~"  . ?)
                  ("<$"   . ?)
                  ("<+"   . ?)
                  ("<!>"  . ?)
                  ("<@>"  . ?)
                  ("<#>"  . ?)
                  ("<%>"  . ?)
                  ("<^>"  . ?)
                  ("<&>"  . ?)
                  ("<?>"  . ?)
                  ("<.>"  . ?)
                  ("</>"  . ?)
                  ("<\>"  . ?)
                  ("<\">" . ?)
                  ("<:>"  . ?)
                  ("<~>"  . ?)
                  ("<**>" . ?)
                  ("<<^"  . ?)
                  ("<!"   . ?)
                  ("<@"   . ?)
                  ("<#"   . ?)
                  ("<%"   . ?)
                  ("<^"   . ?)
                  ("<&"   . ?)
                  ("<?"   . ?)
                  ("<."   . ?)
                  ("</"   . ?)
                  ("<\\"  . ?)
                  ("<\""  . ?)
                  ("<:"   . ?)
                  ("<->"  . ?⟷)
                  ("<!--" . ?↚)
                  ("<--"  . ?⟵)
                  ("=<<"  . ?)
                  ("=="   . ?)
                  ("==="  . ?)
                  ("==>"  . ?⟹)
                  ("=>"   . ?⇒)
                  ("=~"   . ?)
                  ("=>>"  . ?)
                  ("≡≡"   . ?)
                  ("≡≡≡"  . ?)
                  ("≡:≡"  . ?)
                  (">-"   . ?)
                  (">="   . ?)
                  (">>"   . ?)
                  (">>-"  . ?)
                  (">>="  . ?)
                  (">>>"  . ?)
                  (">=>"  . ?)
                  (">>^"  . ?)
                  ("??"   . ?)
                  ("?~"   . ?)
                  ("?="   . ?)
                  ("?>"   . ?)
                  ("^="   . ?)
                  ("^."   . ?)
                  ("^?"   . ?)
                  ("^.."  . ?)
                  ("^<<"  . ?)
                  ("^>>"  . ?)
                  ("^>"   . ?)
                  ("\\\\" . ?)
                  ("\\>"  . ?)
                  ("@>"   . ?)
                  ("|="   . ?)
                  ("||"   . ?)
                  ("|>"   . ?)
                  ("|||"  . ?)
                  ("|+|"  . ?)
                  ("~="   . ?)
                  ("~~>"  . ?)
                  ("~>>"  . ?)

                  ;; Personal preference: I like this set of arrows better than default
                  ("<==>" . ?⟺)
                  ("<=="  . ?⟸)
                  ("|->"  . ?⟼)
                  ("<-|"  . ?⟻)
                  ("|=>"  . ?⟾)
                  ("<=|"  . ?⟽)
                  ))))

       (defun refresh-pretty ()
         (prettify-symbols-mode -1)
         (prettify-symbols-mode +1))

       ;; Hooks for modes in which to install the Pragmata ligatures
       (mapc (lambda (hook)
               (add-hook hook (lambda () (setup-pragmata-ligatures) (refresh-pretty))))
             '(text-mode-hook
               prog-mode-hook))
       (global-prettify-symbols-mode +1)
   #+END_SRC

*** Frame Scaling / Zooming
  The keybindings for this are C+M+- and C+M+=.
   #+begin_src emacs-lisp
     (require 'default-text-scale)
     (default-text-scale-mode)
   #+end_src

** Advice
   An advice can be given to a function to make it behave differently. This
   advice makes =eval-last-sexp= (bound to =C-x C-e=) replace the sexp with
   the value.

   #+BEGIN_SRC emacs-lisp
   (defadvice eval-last-sexp (around replace-sexp (arg) activate)
     "Replace sexp when called with a prefix argument."
     (if arg
         (let ((pos (point)))
           ad-do-it
           (goto-char pos)
           (backward-kill-sexp)
           (forward-sexp))
       ad-do-it))
   #+END_SRC

   When interactively changing the theme (using =M-x load-theme=), the
   current custom theme is not disabled. This often gives weird-looking
   results; we can advice =load-theme= to always disable themes currently
   enabled themes.

   #+BEGIN_SRC emacs-lisp
     (defadvice load-theme
       (before disable-before-load (theme &optional no-confirm no-enable) activate)
       (mapc 'disable-theme custom-enabled-themes))
   #+END_SRC

** Modes
*** Disabled Modes
   There are some modes that are enabled by default that I don't find
   particularly useful. We create a list of these modes, and disable all of
   these.

   #+BEGIN_SRC emacs-lisp
   (dolist (mode
            '(tool-bar-mode       ; No toolbars, more room for text.
              scroll-bar-mode     ; No scroll bars either.
              menu-bar-mode       ; same for menu bar
              blink-cursor-mode)) ; The blinking cursor gets old.
     (funcall mode 0))
   #+END_SRC

*** Enabled Modes
   Let's apply the same technique for enabling modes that are disabled by
   default.

   #+BEGIN_SRC emacs-lisp
          (dolist (mode
                   '(abbrev-mode                ; E.g. sopl -> System.out.println.
                     column-number-mode         ; Show column number in mode line.
                     delete-selection-mode      ; Replace selected text.
                     recentf-mode               ; Recently opened files.
                     show-paren-mode            ; Highlight matching parentheses.

                     xterm-mouse-mode

                     global-auto-revert-mode

                     transient-mark-mode
                     delete-selection-mode

                     line-number-mode
                     display-time-mode
                     size-indication-mode
                     region-state-mode          ; A global minor-mode that shows the number of
                                                ; chars/lines or rows/columns in the region (aka. selection)

                     ;global-emojify-mode

                     ;; mess up with pdf-tools, so turn on locally per major mode
                     ))
            (funcall mode 1))

     ;;     (eval-after-load 'auto-compile
     ;;       '((auto-compile-on-save-mode)))   ; compile .el files on save.

   #+END_SRC

*** =hungry-delete-mode=
   Makes =backspace= and =C-d= erase /all/ consecutive white space in a given
   direction (instead of just one). Use it everywhere.

   #+BEGIN_SRC emacs-lisp
     (global-hungry-delete-mode)
   #+END_SRC

*** Recentf
   Plenty editors (e.g. Vim) have the feature of saving minibuffer
   history to an external file after exit. savehist provide the same
   feature for Emacs. (refer to setq & setq-default for configuration)
   Enabling Recentf mode, the file open includes a submenu containing a list
   of recently opened files.

   #+BEGIN_SRC emacs-lisp
     (savehist-mode +1)
     (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
     (recentf-mode +1)
   #+END_SRC

   After evaluating the following code the directories visited through dired
   buffers will also be put to recentf

   #+BEGIN_SRC emacs-lisp
     (after 'recentf
     '(progn
     (defun recentf-track-opened-file ()
       "Insert the name of the dired or file just opened or written into the recent list."
       (let ((buff-name (or buffer-file-name (and (derived-mode-p 'dired-mode) default-directory))))
         (and buff-name
              (recentf-add-file buff-name)))
       ;; Must return nil because it is run from `write-file-functions'.
       nil)

     (defun recentf-track-closed-file ()
       "Update the recent list when a file or dired buffer is killed.
     That is, remove a non kept file from the recent list."
       (let ((buff-name (or buffer-file-name (and (derived-mode-p 'dired-mode) default-directory))))
         (and buff-name
              (recentf-remove-if-non-kept buff-name))))

     (add-hook 'dired-after-readin-hook 'recentf-track-opened-file)))
   #+END_SRC

*** Column mode editing
   Provide ways to ways to insert sequence of numbers easily.
   One reason I enable this mode.

   #+BEGIN_SRC emacs-lisp
     (setq cua-enable-cua-keys nil)
     (cua-mode)
   #+END_SRC

*** If you change buffer, or focus, disable the current buffer's mark:

   #+begin_src emacs-lisp
     (transient-mark-mode t)
   #+end_src

*** Fringe
   Set fringe width on each side to 12 and add few indications

   #+BEGIN_SRC emacs-lisp
     (fringe-mode 8)

     ; Indicate where a buffer stars and stops
     (setq-default indicate-buffer-boundaries 'right)
     (setq-default indicate-empty-lines +1)
     (let ((hook (lambda ()
                   (setq indicate-empty-lines       nil
                         indicate-buffer-boundaries nil)))
           (mode-hooks '(shell-mode-hook term-mode-hook gnus-article-mode-hook
                         gnus-summary-mode-hook gnus-group-mode-hook
                         eshell-mode-hook)))
       (mapc (lambda (mode-hook)
               (add-hook mode-hook hook))
             mode-hooks))
     (defun qq/set-fringe-background ()
       "Set the fringe background to the same color as the regular background."
       (interactive)
       (setq qq/fringe-background-color
             (face-background 'default))
       (custom-set-faces
        `(fringe ((t (:background ,qq/fringe-background-color))))))

     (add-hook 'after-init-hook #'qq/set-fringe-background)
   #+END_SRC

*** =ediff=
[[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][   ediff]] is a full-featured visual diff and merge tool, built into Emacs.
   Make sure that the window split is always side-by-side:

   #+BEGIN_SRC emacs-lisp
     (csetq ediff-split-window-function 'split-window-horizontally)
   #+END_SRC

   Ignore whitespace changes:

   #+BEGIN_SRC emacs-lisp
    ; (setq ediff-diff-options "-w")
   #+END_SRC

   Only ever use one set of windows in one frame:

   #+BEGIN_SRC emacs-lisp
     (csetq ediff-window-setup-function 'ediff-setup-windows-plain)
   #+END_SRC
**** Restoring the windows after =Ediff= quits
   #+BEGIN_SRC emacs-lisp
     (winner-mode)
     (add-hook 'ediff-after-quit-hook-internal 'winner-undo)
   #+END_SRC
*** =tramp=
   [[https://www.emacswiki.org/emacs/TrampMode][=tramp=]] lets you edit files remotely from your local Emacs which is useful
   because it lets you have all the default configuration. Let’s make sure the
   default protocol is =ssh=.
   #+BEGIN_SRC emacs-lisp
     (setq tramp-default-method "sshx"
           enable-remote-dir-locals t)
   #+END_SRC
**** Backup remote files locally to stop autosave pain
   #+BEGIN_SRC emacs-lisp
     (setq tramp-backup-directory (concat qq/cache-directory "backups"))
     (unless (file-directory-p tramp-backup-directory)
       (make-directory tramp-backup-directory))
     (if (file-accessible-directory-p tramp-backup-directory)
         (setq tramp-auto-save-directory tramp-backup-directory)
       (error "Cannot write to ~/.emacs-backup"))
   #+END_SRC
**** Tramp remote sudo
Don't backup su and sudo files
   #+BEGIN_SRC emacs-lisp
     (setq backup-enable-predicate
           (lambda (name)
             (and (normal-backup-enable-predicate name)
                  (not
                   (let ((method (file-remote-p name 'method)))
                     (when (stringp method)
                       (member method '("su" "sudo"))))))))
   #+END_SRC
*** Ibuffer customization
**** Use human readable size column (from [[http://www.emacswiki.org/emacs/IbufferMode#toc12][coldnew]])

   #+BEGIN_SRC emacs-lisp
     (define-ibuffer-column size-h
       (:name "Size")
       (cond
        ((> (buffer-size) 1000)    (format "%7.1fk" (/ (buffer-size) 1000.0)))
        ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
        (t  (format "%8d" (buffer-size)))))
     (setq ibuffer-formats '((mark modified read-only
                              " " (name 25 25 :left :elide)
                              " " (size-h 9 -1 :right)
                              " " (mode 16 16 :left :elide)
                              " " (vc-status 16 16 :left)
                              " " filename-and-process)
                        (mark " " (name 16 -1) " " filename)))
   #+END_SRC

**** Settings

   #+BEGIN_SRC emacs-lisp
     (setq
      ibuffer-default-sorting-mode 'filename/process
      ibuffer-eliding-string "…"
      ibuffer-expert t
      ibuffer-compile-formats t
      ibuffer-show-empty-filter-groups nil)
   #+END_SRC
**** Evil initial state

   #+BEGIN_SRC emacs-lisp
     (after 'evil (evil-set-initial-state 'ibuffer-mode 'normal))
   #+END_SRC

**** 'Default' Filter groups

   #+BEGIN_SRC emacs-lisp
     (setq ibuffer-saved-filter-groups
               (quote (("default"
                        ("c++" (mode . c++-mode))
                        ("shell script" (mode . sh-mode))
                        ("swift" (mode . swift-mode))
                        ("emacs lisp" (mode . emacs-lisp-mode))
                        ("python" (mode . python-mode))
                        ("LaTeX" (or
                                  (mode . latex-mode)
                                  (mode . LaTeX-mode)
                                  (mode . tex-mode)))
                        ("ruby" (mode . ruby-mode))
                        ("java-script" (or
                                        (mode . js-mode)
                                        (mode . js2-mode)))
                        ("java" (mode . java-mode))
                        ("html" (or
                                 (mode . html-mode)
                                 (mode . web-mode)
                                 (mode . haml-mode)))
                        ("xml" (mode . nxml-mode))
                        ("css" (mode . css-mode))
                        ("org agenda"  (mode . org-agenda-mode))
                        ("org" (or
                                (mode . org-mode)
                                (name . "^\\*Calendar\\*$")
                                (name . "^diary$")))
                        ("text misc" (or
                                      (mode . text-mode)
                                      (mode . rst-mode)
                                      (mode . markdown-mode)))
                        ("w3m" (mode . w3m-mode))
                        ("git" (or
                                (mode . magit-log-edit-mode)
                                (mode . magit-log)))
                        ("dired" (mode . dired-mode))
                        ("help" (or
                                 (mode . Info-mode)
                                 (mode . help-mode)
                                 (mode . Man-mode)))
                        ("*buffer*" (name . "\\*.*\\*"))))))
   #+END_SRC

**** Choose between two filter group options

   #+BEGIN_SRC emacs-lisp
     (defvar qq/ibuffer-use-vc-groups t
       "Use filter groups detected from vc root when non-nil.
                This will be done with `ibuffer-vc-set-filter-groups-by-vc-root'
                If this is nil, then filter groups will be restored from `ibuffer-saved-filter-groups'.")

     (autoload 'ibuffer-auto-mode "ibuf-ext.el" nil t)
     (autoload 'ibuffer-switch-to-saved-filter-groups "ibuf-ext.el" nil t)
     (defun qq/ibuffer-setup ()
       "Configure ibuffer the way I want it.
                This sets `ibuffer-auto-mode' and restores the chosen filter group settings,
                according to the values of `qq/ibuffer-use-vc-groups' and
                `ibuffer-saved-filter-groups'."
       (add-to-list 'ibuffer-never-show-predicates "^\\*")
       (ibuffer-auto-mode 1)
       (hl-line-mode t)
       (if qq/ibuffer-use-vc-groups
           (ibuffer-vc-set-filter-groups-by-vc-root)
         (ibuffer-switch-to-saved-filter-groups "default")))

     (add-hook 'ibuffer-mode-hook 'qq/ibuffer-setup)
   #+END_SRC

**** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: evil-ibuffer-binding
    :END:
   #+TBLNAME: evil_ibuffer_keys
      | Combo     | Description           | Command                               |
      | SPC SPC   | Selectrum M-x version | 'execute-extended-command             |
      | v         |                       | 'ibuffer-toggle-marks                 |
      | l         |                       | 'ibuffer-visit-buffer                 |
      | J         |                       | 'ibuffer-jump-to-buffer               |
      | M-s a C-o |                       | 'ibuffer-do-occur                     |
      | * *       |                       | 'ibuffer-unmark-all                   |
      | * s       |                       | 'ibuffer-mark-special-buffers         |
      | * r       |                       | 'ibuffer-mark-read-only-buffers       |
      | * /       |                       | 'ibuffer-mark-dired-buffers           |
      | * e       |                       | 'ibuffer-mark-dissociated-buffers     |
      | * h       |                       | 'ibuffer-mark-help-buffers            |
      | * z       |                       | 'ibuffer-mark-compressed-file-buffers |
      | d         |                       | 'ibuffer-mark-for-delete              |
      | C-d       |                       | 'ibuffer-mark-for-delete-backwards    |
      | x         |                       | 'ibuffer-do-kill-on-deletion-marks    |
      | q         |                       | 'quit-window                          |
***** Links: [[Evil iBuffer Bindings][Evil iBuffer Bindings]]                           :ignore:
*** Minibuffer
**** Enable paredit in lisp related minibuffer

   #+begin_src emacs-lisp
;      (defvar paredit-minibuffer-commands '(eval-expression
;                                           pp-eval-expression
;                                           eval-expression-with-eldoc
;                                           ibuffer-do-eval
;                                           ibuffer-do-view-and-eval)
;       "Interactive commands for which paredit should be enabled in the minibuffer.")
;
;     (defun conditionally-paredit-mode (flag)
;       "Enable paredit during lisp-related minibuffer commands."
;       (if (memq this-command paredit-minibuffer-commands)
;           (paredit-mode flag)))
   #+end_src

**** Proper gc threshold when minibuffer active. Lower it after minibuffer exit

   [[http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/]]

   #+begin_src emacs-lisp
     (defun qq/minibuffer-setup-hook ()
       ;; Use paredit in the minibuffer
       ;(conditionally-paredit-mode 1)
;       (local-set-key (kbd "M-y") 'paste-from-x-clipboard)
;       (local-set-key (kbd "M-k") 'kill-line)
       (setq gc-cons-threshold most-positive-fixnum))

     (defun qq/minibuffer-exit-hook ()
       ;; evil-mode also use minibuf
       ;(conditionally-paredit-mode -1)
       (setq gc-cons-threshold best-gc-cons-threshold))

     (add-hook 'minibuffer-setup-hook #'qq/minibuffer-setup-hook)
     (add-hook 'minibuffer-exit-hook #'qq/minibuffer-exit-hook)
   #+end_src

**** file-name-shadow-properties
   #+begin_src emacs-lisp
     (setq file-name-shadow-properties
           '(invisible t))
   #+end_src

*** =conf-mode=
   Use conf-mode for .gitignore files
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.gitignore\\'" . conf-mode))
   #+END_SRC

Use conf-mode for git config files
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist
                  '("\\.gitconfig\\'" . conf-mode))
     (add-to-list 'auto-mode-alist
                  (cons (concat (regexp-quote (f-join ".git" "config")) "\\'")
                        'conf-mode))
   #+END_SRC
*** PDF-Tools

   #+BEGIN_SRC emacs-lisp
     (pdf-loader-install)
   #+END_SRC

*** WoMan
**** Use most of the window width
   #+BEGIN_SRC emacs-lisp
     (setq woman-fill-frame t)
     (setq woman-use-topic-at-point t)
     (setq woman-use-topic-at-point-default t)
   #+END_SRC

*** Whitespace-mode

   #+BEGIN_SRC emacs-lisp
     (setq whitespace-style (quote
                             (face spaces trailing tabs newline space-mark tab-mark newline-mark)))
   #+END_SRC

*** Display Line Numbers
   Add a toggle function for toggling relative line number

   #+BEGIN_SRC emacs-lisp
     (defun qq/toggle-line-numbers ()
       "Toggle Evil search mode between symbol search or word search"
       (interactive)
       (setq display-line-numbers (if (eq display-line-numbers 'relative) 'default 'relative)))
   #+END_SRC

*** GUD
**** Use gdb-many-windows by default

   #+BEGIN_SRC emacs-lisp
     (setq gdb-many-windows t
           gdb-show-main t)
   #+END_SRC

**** Turn on tooltip-mode

   #+BEGIN_SRC emacs-lisp
     (defun qq/gud-hooks ()
       (gud-tooltip-mode 1))

     (add-hook 'gud-mode-hook 'qq/gud-hooks)
   #+END_SRC

*** Undo Tree
**** Settings

   #+BEGIN_SRC emacs-lisp
     (autoload 'undo-tree-save-history-hook "undo-tree.el" nil t)
     (autoload 'undo-tree-load-history-hook "undo-tree.el" nil t)
     (setq
           undo-tree-visualizer-timestamps t            ; show timestamps
           undo-tree-visualizer-diff t                  ; show diff
           undo-tree-auto-save-history t)               ; Save undo history between sessions.
   #+END_SRC

**** Evil visual line wrapping breaks undo-tree keybindings

   #+BEGIN_SRC emacs-lisp
     (add-hook 'undo-tree-visualizer-mode-hook
               (lambda ()
                 (set (make-local-variable 'input-method-function) nil)
                 (set (make-variable-buffer-local 'global-hl-line-mode) nil)
                 (visual-line-mode -1)))

     (after 'evil
         (evil-set-initial-state 'undo-tree-visualizer-mode 'emacs))
   #+END_SRC

**** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: undo-tree-binding
    :END:
   #+TBLNAME: undo_tree_keys
      | Combo    | Description | Command                                  |
      |----------+-------------+------------------------------------------|
      | C-g      |             | 'undo-tree-visualizer-quit               |
      | <escape> |             | 'undo-tree-visualizer-quit               |
      | RET      |             | 'undo-tree-visualizer-quit               |
      | j        |             | 'undo-tree-visualize-redo                |
      | k        |             | 'undo-tree-visualize-undo                |
      | h        |             | 'undo-tree-visualize-switch-branch-left  |
      | l        |             | 'undo-tree-visualize-switch-branch-right |
***** Links: [[Undo-tree Bindings][Undo-tree Bindings]]                              :ignore:
**** Persistent undo-tree history across emacs sessions

   #+BEGIN_SRC emacs-lisp
     (setq qq/undo-tree-history-dir (let ((dir (concat qq/cache-directory
                                                         "undo-tree-history/")))
                                        (make-directory dir :parents)
                                        dir))
     (setq undo-tree-history-directory-alist `((".*" . ,qq/undo-tree-history-dir)))

     (add-hook 'write-file-functions #'undo-tree-save-history-hook)
     (add-hook 'find-file-hook #'undo-tree-load-history-hook)
   #+END_SRC
**** Enable undo-tree

   #+BEGIN_SRC emacs-lisp
     (global-undo-tree-mode 1)
   #+END_SRC

*** =which-function-mode=
   This mode will show current function name. the code below will show it in HeaderLine
   (cause problem with evil-scroll-down)

   #+BEGIN_SRC emacs-lisp
     (which-function-mode)

     ;(setq mode-line-format (delete (assoc 'which-func-mode
     ;                                      mode-line-format) mode-line-format)
     ;      which-func-header-line-format '(which-func-mode ("" which-func-format)))
     ;(defadvice which-func-ff-hook (after header-line activate)
     ;  (when which-func-mode
     ;    (setq mode-line-format (delete (assoc 'which-func-mode
     ;                                          mode-line-format) mode-line-format)
     ;          header-line-format which-func-header-line-format)))
   #+END_SRC

** Keybindings
    :PROPERTIES:
    :CUSTOM_ID: default-key-binding
    :END:
   #+TBLNAME: std_keys
      | Combo   | Description                                                       | Command                      |
      |---------+-------------------------------------------------------------------+------------------------------|
      | C-s     | Do incremental search forward for regular expression              | 'consult-isearch             |
      | C-c s   | Jump to *scratch* buffer                                            | 'qq/goto-scratch-buffer      |
      | C-x C-b | Use iBuffer to replace built-in buffer manager                    | 'ibuffer                     |
      | C-x C-k | Kill the current buffer. in minibuffer, will get out of it        | 'kill-this-buffer            |
      | C-c e   |                                                                   | 'qq/eval-and-replace         |
      | C-c w   | show manpage at point                                             | 'woman                       |
      | C-(     | In selected window switch to previous buffer                      | 'previous-buffer             |
      | C-)     | In selected window switch to next buffer                          | 'next-buffer                 |
      | C-h     | Navigate cursor to the window on the left                         | 'windmove-left               |
      | C-l     | Navigate cursor to the window on the right                        | 'windmove-right              |
      | C-S-d   | Display minions-mode menu to shows current mini modes in modeline | 'minions-minor-modes-menu    |
      | C-s-=   | Increase text scale                                               | 'default-text-scale-increase |
      | C-s--   | Decrease text scale                                               | 'default-text-scale-decrease |
      | C-s-0   | Reset text scale                                                  | 'default-text-scale-reset    |
**** Links: [[Basic Bindings]]                                     :ignore:
* Third parties
** Company
   A text completion framework for Emacs.

   [[http://company-mode.github.io]]

*** Settings
**** Enable globally

   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook 'global-company-mode)
   #+END_SRC

**** Weight by frequency

   #+BEGIN_SRC emacs-lisp
     (setq company-transformers '(company-sort-by-occurrence))
   #+END_SRC

**** Align annotations

   #+BEGIN_SRC emacs-lisp
     (setq company-tooltip-align-annotations t)
   #+END_SRC

**** Wrap around popup menu on reaching end

   #+BEGIN_SRC emacs-lisp
     (setq company-selection-wrap-around t)
   #+END_SRC

**** Allow non-matching input when company-mode is active

   #+BEGIN_SRC emacs-lisp
;     (setq company-require-match nil)
   #+END_SRC

**** Instruct company-emoji to not insert unicode

   #+BEGIN_SRC emacs-lisp
;     (setq company-emoji-insert-unicode nil)
   #+END_SRC

**** Delays

   #+BEGIN_SRC emacs-lisp
;     (setq company-idle-delay 0.1
;           company-echo-delay 0)
   #+END_SRC

**** Trigger autocomplete if user interaction took place

   #+BEGIN_SRC emacs-lisp
;  (setq company-auto-complete 'company-explicit-action-p)
   #+END_SRC

**** Minimum prefix length for idle completion

   #+BEGIN_SRC emacs-lisp
;     (setq company-minimum-prefix-length 200)
     (global-set-key (kbd "TAB") #'company-indent-or-complete-common)
   #+END_SRC

**** Flip tooltip when it's above the current line

   #+BEGIN_SRC emacs-lisp
  (setq company-tooltip-flip-when-above t)
   #+END_SRC

**** Align annotations to the right tooltip border

   #+BEGIN_SRC emacs-lisp
  (setq company-tooltip-align-annotations t)
   #+END_SRC

*** Default backends for company

   Specialized backends are kept in front because they are active only in special
   context for example company-emoji when word begins with a colon, so they do not
   override generic backends like company-ispell but the reverse is not true.

   The special completion triggers are

   | Word start with | Backend       |
   | :               | company-emoji |
   | \               | company-math  |
   | / or ~/         | company-files |

   Make the backends buffer local

   #+BEGIN_SRC emacs-lisp
;     (require 'company-tabnine)
;     (require 'company-emoji)
;     (setq company-backends '((company-tabnine
;                               company-keywords
;                               company-files
;                               company-emoji
;                               company-dabbrev-code
;                               company-math-symbols-unicode)
;                              company-dabbrev))
   #+END_SRC

*** flx matching in company

   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'company
       (company-flx-mode +1))
   #+END_SRC

*** Sort completions by usage frequency

   #+BEGIN_SRC emacs-lisp
     (eval-after-load 'company
          (company-statistics-mode))
   #+END_SRC

*** Use =company-postframe= for frontend

   #+BEGIN_SRC emacs-lisp
     (require 'company-posframe)
     (add-hook 'company-mode-hook 'company-posframe-mode)
   #+END_SRC

*** company-box
   #+BEGIN_SRC emacs-lisp
     (add-hook 'company-mode-hook 'company-box-mode)
   #+END_SRC
*** company-ispell setup
   #+BEGIN_SRC emacs-lisp
     (defun toggle-company-ispell ()
       (interactive)
       (cond
        ((memq 'company-ispell company-backends)
         (setq company-backends (delete 'company-ispell company-backends))
         (message "company-ispell disabled"))
        (t
         (add-to-list 'company-backends 'company-ispell)
         (message "company-ispell enabled!"))))
   #+END_SRC
*** company-c-header
   #+BEGIN_SRC emacs-lisp
     (add-hook 'c-mode-hook
               (bind (add-to-list (make-local-variable 'company-backends)
                                  'company-c-headers)))
     (add-hook 'c++-mode-hook
               (bind (add-to-list (make-local-variable 'company-backends)
                                  'company-c-headers)))
   #+END_SRC
*** Enable quick help for company-mode

   #+BEGIN_SRC emacs-lisp
     (when (display-graphic-p)
         (company-quickhelp-mode +1))
   #+END_SRC

*** Disable company-mode for certain major modes.
   #+BEGIN_SRC emacs-lisp
     (setq company-global-modes
           '(not
             eshell-mode comint-mode erc-mode gud-mode rcirc-mode
             minibuffer-inactive-mode))
   #+END_SRC

   Custom function used to trigger tab within active company-mode window
   #+BEGIN_SRC emacs-lisp
     (defun company-complete-common-or-complete-full ()
       (interactive)
       (when (company-manual-begin)
         (if (eq last-command #'company-complete-common-or-cycle)
             (let ((company-selection-wrap-around t))
               (call-interactively #'company-complete-selection))
           (let ((buffer-mod-tick (buffer-chars-modified-tick)))
             (call-interactively #'company-complete-common)
             (when (= buffer-mod-tick (buffer-chars-modified-tick))
               (call-interactively #'company-complete-selection)
               (call-interactively #'company-complete))))))
   #+END_SRC
*** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: company-binding
    :END:
   #+TBLNAME: company_keys
      | Combo | Description                       | Command                     |
      |-------+-----------------------------------+-----------------------------|
      | C-j   | move cursor to the next entry     | 'company-select-next        |
      | C-k   | move cursor to the previous entry | 'company-select-previous    |
      | TAB   |                                   | 'company-complete-selection |
      | C-f   |                                   | 'company-next-page          |
      | C-b   |                                   | 'company-previous-page      |
**** Links: [[Company Bindings][Company Bindings]]                                     :ignore:
** Selectrum
   Provide vertical completion

   #+begin_src emacs-lisp
     (require 'selectrum)
     (selectrum-mode +1)
     (autoload 'prescient-persist-mode "prescient.el" nil t)
   #+end_src

*** Prescient
   Filter most recent completions to the top of the list
   #+begin_src emacs-lisp
     (selectrum-prescient-mode +1)
   #+end_src

   To save your command history on disk, so the sorting gets more intelligent over time
   #+begin_src emacs-lisp
     (setq prescient-save-file (concat qq/cache-directory "prescient-save.el"))
     (prescient-persist-mode +1)
   #+end_src

*** Marginalia
   Must be in the :init section of use-package such that the mode gets enabled
   right away. Note that this forces loading the package.
   #+begin_src emacs-lisp
     (marginalia-mode)
   #+end_src

   Prefer richer, more heavy, annotations over the lighter default variant. E.g.
   M-x will show the documentation string additional to the keybinding. By
   default only the keybinding is shown as annotation. Note that there is the
   command `marginalia-cycle-annotators` to switch between the annotators.
   #+begin_src emacs-lisp
     (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light))
   #+end_src

   When using Selectrum, ensure that Selectrum is refreshed when cycling annotations.
   #+begin_src emacs-lisp
     (advice-add #'marginalia-cycle :after
                 (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit))))
   #+end_src
*** Consult
   Provide commands which allow quick selection of an item from a list of
   candidates with selection.

   #+begin_src emacs-lisp
     ;  (fset 'multi-occur #'consult-multi-occur)
   #+end_src

   Enable previews
   #+begin_src emacs-lisp
     ;(consult-preview-mode)
   #+end_src
*** Orderless
   A completion styles. Using spaces and in any order. To make sorting and
   filtering more intelligent for =selectrum=

   #+begin_src emacs-lisp
     (require 'orderless)
     (setq completion-styles '(orderless))
     (icomplete-mode) ; optional but recommended!
   #+end_src
   Selectrum Integration
   #+begin_src emacs-lisp
     (setq selectrum-refine-candidates-function #'orderless-filter)
     (setq selectrum-highlight-candidates-function #'orderless-highlight-matches)
   #+end_src
*** Switch to buffer or recent file
Switch to open buffer or recent file. Narrow to hidden buffer with " " prefix, to files with "f " prefix and to buffers with "b " prefix. (See https://github.com/raxod502/selectrum/issues/9#issuecomment-631325725)

   #+begin_src emacs-lisp
     (defun selectrum-switch-buffer+ ()
       (interactive)
       (let* ((selectrum-should-sort-p nil)
              (candidates
               (let* ((cb (window-buffer
                           (minibuffer-selected-window)))
                      (bf (or (buffer-file-name cb) "")))
                 (lambda (input)
                   (let* ((buffers (mapcar #'buffer-name
                                           (cl-delete-if
                                            (lambda (buf)
                                              (eq buf cb))
                                            (buffer-list))))
                          (files (cl-delete-if (lambda (f) (string= f bf))
                                               (copy-sequence recentf-list)))
                          (candidates ()))
                     (cond ((string-prefix-p " " input)
                            (setq input (substring input 1))
                            (setq candidates
                                  (cl-delete-if-not
                                   (lambda (name)
                                     (string-prefix-p " " name))
                                   buffers)))
                           ((string-prefix-p "b " input)
                            (setq input (substring input 2))
                            (setq candidates
                                  (cl-delete-if
                                   (lambda (name)
                                     (string-prefix-p " " name))
                                   buffers)))
                           ((string-prefix-p "f " input)
                            (setq input (substring input 2))
                            (setq candidates files))
                           (t
                            (setq candidates
                                  (append
                                   (cl-delete-if
                                    (lambda (name)
                                      (string-prefix-p " " name))
                                    buffers)
                                   files))))
                     `((candidates . ,candidates)
                       (input . ,input))))))
              (cand (selectrum-read "Switch to: " candidates)))
         (cond ((member cand recentf-list)
                (find-file cand))
               (t
                (switch-to-buffer cand)))))
   #+end_src
*** Filtering advice
   If you also =orderless= configured as the `completion-styles`, use the
   following advice Orderless isn't well suited for initial gathering of
   candidates by completion in region.
   #+begin_src emacs-lisp
     (advice-add #'completion--category-override :filter-return
                 (defun completion-in-region-style-setup+ (res)
                   "Fallback to default styles for region completions with orderless."
                   (or res
                       ;; Don't use orderless for initial candidate gathering.
                       (and completion-in-region-mode-predicate
                            (not (minibufferp))
                            (equal '(orderless) completion-styles)
                            '(basic partial-completion emacs22)))))
   #+end_src
*** Selectrum Map Binding
    :PROPERTIES:
    :CUSTOM_ID: selectrum-map-binding
    :END:
   #+TBLNAME: selectrum_map_keys
      | Combo | Description                    | Command                        |
      | C-j   | selects the next candidate     | 'selectrum-next-candidate      |
      | C-k   | selects the previous candidate | 'selectrum-previous-candidate  |
      | C-a   | selects the first candidate    | 'selectrum-goto-beginning      |
      | C-e   | selects the last candidate     | 'selectrum-goto-end            |
      | C-f   | scrolls down                   | 'selectrum-next-page           |
      | C-b   | scrolls up                     | 'selectrum-previous-page       |
      | C-w   |                                | 'selectrum-kill-ring-save      |
      | C-r   | rotate visual information      | 'marginalia-cycle              |
      | ESC   | cancel selecturm               | 'keyboard-quit                 |
      | C-s   | use the input as is            | 'selectrum-submit-exact-input  |
      | C-q   | cycle selectrum display style  | 'selectrum-cycle-display-style |
**** Links: [[Selectrum Map Bindings][Selectrum Map Bindings]]                                     :ignore:
*** Normal Keybinding
    :PROPERTIES:
    :CUSTOM_ID: normal-selectrum-binding
    :END:
   #+TBLNAME: normal_selectrum_keys
      | Evil Leader Combo | Description                              | Command                   |
      |-------------------+------------------------------------------+---------------------------|
      | SPC               | Selectrum M-x version                    | 'execute-extended-command |
      | "."               | Forward to 'find file'                   | 'find-file                |
      | b c               |                                          | 'selectrum-switch-buffer+ |
      | h a               |                                          | 'consult-apropos          |
      | h f               | Display full doc on a function           | 'describe-function        |
      | h F               | Display properties of a face             | 'describe-face            |
      | h v               | Display full doc of a variable           | 'describe-variable        |
      | h l               | Find Emacs Lisp source of a library      | 'find-library             |
      | b b               | Show list of supported colors in a frame | 'consult-buffer           |
      | b o               | Display definition of a symbol           | 'consult-other-window     |
      | b F               | Display definition of a symbol           | 'consult-other-frame      |
      | g y               |                                          | 'consule-git-grep         |
      | i o               | Lists of faces with preview              | 'consult-outline          |
      | i h               | Load selected Emacs Lisp Library         | 'consult-history          |
      | i r               |                                          | 'consult-register         |
      | i b               |                                          | 'consult-bookmark         |
      | i m               |                                          | 'consult-mark             |
      | i l               |                                          | 'consult-line             |
      | i i               |                                          | 'consult-imenu            |
      | i e               |                                          | 'consult-error            |
      | i c               |                                          | 'consult-multi-occur      |
      | p                 |                                          | 'consult-yank-pop         |
**** Links: [[Normal Selectrum Bindings][Normal Selectrum Bindings]]                                     :ignore:
*** Visual Keybinding
    :PROPERTIES:
    :CUSTOM_ID: visual-selectrum-binding
    :END:
   #+TBLNAME: visual_selectrum_keys
      | Evil Leader Combo | Description           | Command                   |
      |-------------------+-----------------------+---------------------------|
      | SPC               | Selectrum M-x version | 'execute-extended-command |
**** Links: [[Visual Selectrum Bindings][Visual Selectrum Bindings]]                                     :ignore:
** Mini-Frame
   #+begin_src emacs-lisp
     ;(after 'mini-frame
     ;  (csetq mini-frame-show-parameters '((top . 0.2) (width . 0.3) (left . 0.5))))
     ;(mini-frame-mode)
   #+end_src

** Mode-line-bell
   #+begin_src emacs-lisp
     (require 'mode-line-bell)
     (mode-line-bell-mode)
   #+end_src

** Tempbuf
kill unused buffers in the background

   #+begin_src emacs-lisp
     (require 'tempbuf)
     (defun mode-symbol (sym)
       "Append \"-mode\" to SYM unless it already ends in it."
       (let ((symname (symbol-name sym)))
         (intern
          (concat symname
                  (unless (s-suffix? "-mode" symname)
                    "-mode")))))

     (defun tempbuf-protect ()
       "Prevent tempbuf from killing visible or unsaved buffers."
       (when (or (get-buffer-window)
                 (buffer-modified-p))
         (throw 'tempbuf-skip-kill nil)))
     (add-hook 'tempbuf-kill-hook 'tempbuf-protect)

     (defun tempbuf-major-mode-hook ()
       "Turn on `tempbuf-mode' in current buffer if buffer's `major-mode' is in `tempbuf-temporary-major-modes'.

     Else turn off `tempbuf-mode'."
       (if (apply #'derived-mode-p tempbuf-temporary-major-modes)
           (turn-on-tempbuf-mode)
         (turn-off-tempbuf-mode)))

     (defun tempbuf-setup-temporary-major-modes (symbol newval)
       (set-default symbol (mapcar 'mode-symbol newval))
       ;; Set tempbuf-mode correctly in existing buffers.
       (mapc (lambda (buf)
               (with-current-buffer buf
                 (tempbuf-major-mode-hook)))
             (buffer-list)))

     (defcustom tempbuf-temporary-major-modes nil
       "Major modes in which `tempbuf-mode' should be activated.

     This will cause buffers of these modes to be automatically killed
     if they are inactive for a short while."
       :group 'tempbuf
       :set 'tempbuf-setup-temporary-major-modes
       :type '(repeat (symbol :tag "Mode")))

     (add-hook 'after-change-major-mode-hook 'tempbuf-major-mode-hook)
   #+end_src

** Evil
*** Init

   #+BEGIN_SRC emacs-lisp
     (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
     (setq evil-want-keybinding nil)
     (dolist (feature
              '(evil evil-indent-textobject
                     ))
       (require feature))
     (when (require 'evil-collection nil t)
       (evil-collection-init 'info)
       (evil-collection-init 'ediff)
       (evil-collection-init 'help)
       (evil-collection-init 'custom)
       (evil-collection-init 'minibuffer)
       (evil-collection-init 'flycheck)
       (evil-collection-init 'package-menu)
       (evil-collection-init 'proced)
       (evil-collection-init 'xref)
       (evil-collection-init 'which-key)
       (evil-collection-init 'magit))
   #+END_SRC

*** Enable Evil

   #+BEGIN_SRC emacs-lisp
     (evil-mode 1)
   #+END_SRC
*** Plugins
**** evil-surround
   See [[https://github.com/timcharper/evil-surround]] for tutorial

   #+BEGIN_SRC emacs-lisp
     (global-evil-surround-mode t)
   #+END_SRC

**** evil-quickscope

   #+BEGIN_SRC emacs-lisp
     (after 'evil-quickscope
       (setq evil-quickscope-word-separator " -./")
       (set-face-attribute 'evil-quickscope-first-face nil
                           :inherit nil)

       (if (display-graphic-p)
           (set-face-attribute 'evil-quickscope-second-face nil
                               :underline '(:style wave)
                               :inherit nil)
         (set-face-attribute 'evil-quickscope-second-face nil
                             :inherit nil)))

     (global-evil-quickscope-always-mode +1)
   #+END_SRC
**** evil-visualstar
   For example, press =viW*=

   #+BEGIN_SRC emacs-lisp
     (require 'evil-visualstar)
     (setq evil-visualstar/persistent t)
     (global-evil-visualstar-mode t)
   #+END_SRC
**** evil-multicursor
   [[https://github.com/gabesoft/evil-mc]]
   =grm= create cursor for all matching selected
   =gru= undo all cursors
   =grs= pause cursor
   =grr= resume cursor
   =grh= make cursor here
   =C-p=, =C-n= previous cursor, next cursor

   #+BEGIN_SRC emacs-lisp
;     (require 'evil-mc)
;     (global-evil-mc-mode 1)
   #+END_SRC
**** evil-nerdcommenter
   [[https://github.com/redguardtoo/evil-nerd-commenter]]

   #+BEGIN_SRC emacs-lisp
     (require 'evil-nerd-commenter)
     (evilnc-default-hotkeys)
   #+END_SRC
**** evil-matchit

   #+BEGIN_SRC emacs-lisp
     (global-evil-matchit-mode t)
     (evilmi-load-plugin-rules '(mhtml-mode) '(template simple html))
   #+END_SRC
**** evil-exchange
   Easy text exchange operator for Evil [[https://github.com/Dewdrops/evil-exchange]]

   Default bindings

   =gx= (evil-exchange)

   On the first use, define (and highlight) the first {motion} to exchange. On
   the second use, define the second {motion} and perform the exchange.

   =gX= (evil-exchange-cancel)

   Clear any {motion} pending for exchange.

   Notes

   1. =gx= (and =gX=) can also be used from visual mode, which is sometimes easier
      than coming up with the right {motion}
   2. If you're using the same motion again (e.g. exchanging two words using
      =gxiw=), you can use . (evil-repeat) the second time.
   3. =gxx= works as you expect.

   I.e. to exchange two words, place your cursor on the first word and type
   =gxiw=. Then move to the second word and type =gxiw= again.


   #+BEGIN_SRC emacs-lisp
     (evil-exchange-install)
   #+END_SRC

*** Common Settings
   Set the cursor color for different evil mode:

   #+BEGIN_SRC emacs-lisp
     (setq evil-search-module 'evil-search
           evil-magic 'very-magic
   #+END_SRC

**** Set the cursor color for different evil mode:

   #+BEGIN_SRC emacs-lisp
           evil-emacs-state-cursor '("red" box)
           evil-normal-state-cursor '("green" box)
           evil-visual-state-cursor '("orange" box)
           evil-insert-state-cursor '("red" bar)
           evil-replace-state-cursor '("red" bar)
           evil-operator-state-cursor '("red" hollow)
   #+END_SRC

**** Search word instead of symbol
   [[https://bitbucket.org/lyro/evil/issue/360/possible-evil-search-symbol-forward]]

   #+BEGIN_SRC emacs-lisp
           evil-symbol-word-search t
   #+END_SRC

**** Miscellaneous

   #+BEGIN_SRC emacs-lisp
           evilnc-hotkey-comment-operator "gc"

           evil-want-fine-undo 'fine

           evil-jumper-auto-center t
           evil-jumper-file (concat qq/cache-directory "evil-jumps")
           evil-jumper-auto-save-interval 3600)
   #+END_SRC

*** Undo System
   #+BEGIN_SRC emacs-lisp
     (csetq evil-undo-system 'undo-tree)
   #+END_SRC

*** Command =*= and =#=
   The =evil-mode= command =*= and =#= behave differently than the way I used to
   know in =Vim=. It only search subword not the whole word. I.e, if a cursor is
   in 'mamb' for keyword mamb_ctrl_scaleConversion. Then only 'mamb' will be
   search. I wanted to have both behaviour around, so I made a toggle function:

   #+BEGIN_SRC emacs-lisp
     (defun qq/toggle-evil-search ()
       "Toggle Evil search mode between symbol search or word search"
       (interactive)
       (setq-default evil-symbol-word-search
                     (if (eq evil-symbol-word-search t) nil t)))
   #+END_SRC

*** Initial evil state for some major mode

   #+BEGIN_SRC emacs-lisp
     (cl-loop for (mode . state) in
              '((minibuffer-inactive-mode . emacs)
                (ag-mode . normal)
                (ggtags-global-mode . emacs)
                (grep-mode . emacs)
                (Info-mode . normal)
                (term-mode . insert)
                (vterm-mode . emacs)
                (refine-mode . emacs)
                ;(anaconda-nav-mode . emacs)
                (log-edit-mode . emacs)
                (vc-log-edit-mode . emacs)
                (magit-log-edit-mode . emacs)
                ;(inf-ruby-mode . emacs)
                ;(direx:direx-mode . emacs)
                ;(yari-mode . emacs)
                ;(erc-mode . emacs)
                ;(neotree-mode . normal)
                ;(w3m-mode . emacs)
                (gud-mode . normal)
                (eshell-mode . emacs)
                (shell-mode . emacs)
                ;(help-mode . emacs)
                ;(message-mode . emacs)
                ;(fundamental-mode . emacs)
                ;(weibo-timeline-mode . emacs)
                ;(weibo-post-mode . emacs)
                ;(sr-mode . emacs)
                (dired-mode . normal)
                (compilation-mode . normal)
                ;(js2-error-buffer-mode . emacs)
                (speedbar-mode . emacs)
                (package-menu-mode . normal)
                (messages-buffer-mode . normal)
                (magit-commit-mode . normal)
                (magit-diff-mode . normal)
                (browse-kill-ring-mode . normal)
                (etags-select-mode . normal)
                (xref--xref-buffer-mode . emacs)
                )
              do (evil-set-initial-state mode state))
   #+END_SRC

*** Define my own text objects
   Works on evil v1.0.9 using older method
   @see [[http://stackoverflow.com/questions/18102004/emacs-evil-mode-how-to-create-a-new-text-object-to-select-words-with-any-non-sp]]

   #+BEGIN_SRC emacs-lisp
     (defmacro define-and-bind-text-object (key start-regex end-regex)
       (let ((inner-name (make-symbol "inner-name"))
             (outer-name (make-symbol "outer-name")))
         `(progn
            (evil-define-text-object ,inner-name (count &optional beg end type)
              (evil-select-paren ,start-regex ,end-regex beg end type count nil))
            (evil-define-text-object ,outer-name (count &optional beg end type)
              (evil-select-paren ,start-regex ,end-regex beg end type count t))
            (define-key evil-inner-text-objects-map ,key (quote ,inner-name))
            (define-key evil-outer-text-objects-map ,key (quote ,outer-name)))))
   #+END_SRC

**** between dollar signs:
   #+BEGIN_SRC emacs-lisp
     (define-and-bind-text-object "$" "\\$" "\\$")
   #+END_SRC
**** between pipe characters:
   #+BEGIN_SRC emacs-lisp
     (define-and-bind-text-object "|" "|" "|")
   #+END_SRC
**** trimmed line
   #+BEGIN_SRC emacs-lisp
     (define-and-bind-text-object "l" "^ *" " *$")
   #+END_SRC
**** angular template
   #+BEGIN_SRC emacs-lisp
     (define-and-bind-text-object "r" "\{\{" "\}\}")
   #+END_SRC

*** Term Settings
   #+BEGIN_SRC emacs-lisp
     (defun qq/send-string-to-terminal (string)
       (unless (display-graphic-p) (send-string-to-terminal string)))

     (defun qq/evil-terminal-cursor-change ()
       (when (string= (getenv "TERM_PROGRAM") "iTerm.app")
        (add-hook 'evil-insert-state-entry-hook (lambda () (qq/send-string-to-terminal "\e]50;CursorShape=1\x7")))
        (add-hook 'evil-insert-state-exit-hook (lambda () (qq/send-string-to-terminal "\e]50;CursorShape=0\x7"))))
       (when (and (getenv "TMUX") (string= (getenv "TERM_PROGRAM") "iTerm.app"))
        (add-hook 'evil-insert-state-entry-hook (lambda () (qq/send-string-to-terminal "\ePtmux;\e\e]50;CursorShape=1\x7\e\\")))
        (add-hook 'evil-insert-state-exit-hook (lambda () (qq/send-string-to-terminal "\ePtmux;\e\e]50;CursorShape=0\x7\e\\")))))

     (add-hook 'after-make-frame-functions (lambda (frame) (qq/evil-terminal-cursor-change)))
     (qq/evil-terminal-cursor-change)
   #+END_SRC

*** evil-ex-search behaviour
   #+BEGIN_SRC emacs-lisp
     (defadvice evil-ex-search-next (after advice-for-evil-ex-search-next activate)
       (recenter))

     (defadvice evil-ex-search-previous (after advice-for-evil-ex-search-previous activate)
       (recenter))
   #+END_SRC

*** evil search in minor mode
   #+BEGIN_SRC emacs-lisp
     (defvar qq/evil-search-forward
       '(menu-item "" nil :filter (lambda (&optional _)
                                    (if (eq evil-search-module 'evil-search)
                                        #'evil-ex-search-forward
                                      #'evil-search-forward))))

     (defvar qq/evil-search-backward
       '(menu-item "" nil :filter (lambda (&optional _)
                                    (if (eq evil-search-module 'evil-search)
                                        #'evil-ex-search-backward
                                      #'evil-search-backward))))

     (defvar qq/evil-search-next
       '(menu-item "" nil :filter (lambda (&optional _)
                                    (if (eq evil-search-module 'evil-search)
                                        #'evil-ex-search-next
                                      #'evil-search-next))))

     (defvar qq/evil-search-previous
       '(menu-item "" nil :filter (lambda (&optional _)
                                    (if (eq evil-search-module 'evil-search)
                                        #'evil-ex-search-previous
                                      #'evil-search-previous))))
   #+END_SRC
*** Bindings
**** Global Mode Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-global-binding
    :END:
   #+TBLNAME: evil_global_keys
      | Combo | Description                  | Command            |
      |-------+------------------------------+--------------------|
      | C-w   | Prefix for windows operation | 'evil-window-map   |
      | C-S-g | Show fie path in minibuffer  | 'qq/show-file-name |
***** Links: [[Evil Global Bindings][Evil Global Bindings]]                                                 :ignore:
**** Normal Mode Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-normal-binding
    :END:
   #+TBLNAME: evil_std_keys
      | Combo | Description                                | Command                                              |
      |-------+--------------------------------------------+------------------------------------------------------|
      | C-b   | Scroll one page up                         | 'evil-scroll-up                                      |
      | C-f   | Scroll one page down                       | 'evil-scroll-down                                    |
      | [ SPC | Insert empty line above current line       | (bind (evil-insert-newline-above) (forward-line))    |
      | ] SPC | Insert empty line below current line       | (bind (evil-insert-newline-below) (forward-line -1)) |
      | [ e   | Move current line up one line              | (kbd "ddkP")                                         |
      | ] e   | Move current line down one line            | (kbd "ddp")                                          |
      | [ b   | Jump to the previous buffer                | 'previous-buffer                                     |
      | ] b   | Jump to the next buffer                    | 'next-buffer                                         |
      | [ q   | Jump to the previous error                 | 'previous-error                                      |
      | ] q   | Jump to the next error                     | 'next-error                                          |
      | C-j   | Navigate cursor to the lower window        | 'windmove-down                                       |
      | C-k   | Navigate cursor to the upper window        | 'windmove-up                                         |
      | C-h   | Navigate cursor to the window on the left  | 'windmove-left                                       |
      | C-l   | Navigate cursor to the window on the right | 'windmove-right                                      |
      | C-a   | Increment number at cursor                 | 'evil-numbers/inc-at-pt                              |
      | "-"   | Decrement number at cursor                 | 'evil-numbers/dec-at-pt                              |
      | Y     |                                            | (kbd "y$")                                           |
      | g ]   |                                            | 'ggtags-find-definition                              |
      | g [   |                                            | 'ggtags-find-reference                               |
      | g p   |                                            | 'hydra-projectile/body                               |
***** Links: [[Evil Normal Bindings][Evil Normal Bindings]]                            :ignore:
**** Motion Mode Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-motion-binding
    :END:
   #+TBLNAME: evil_motion_keys
      | Combo | Description                                | Command                    |
      |-------+--------------------------------------------+----------------------------|
      | C-j   | Navigate cursor to the lower window        | 'windmove-down             |
      | C-k   | Navigate cursor to the upper window        | 'windmove-up               |
      | C-h   | Navigate cursor to the window on the left  | 'windmove-left             |
      | C-l   | Navigate cursor to the window on the right | 'windmove-right            |
      | j     |                                            | 'evil-next-visual-line     |
      | k     |                                            | 'evil-previous-visual-line |
***** Links: [[Evil Motion Bindings][Evil Motion Bindings]]                            :ignore:
**** Visual Mode Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-visual-binding
    :END:
   #+TBLNAME: evil_visual_keys
      | Combo | Description                      | Command                      |
      |-------+----------------------------------+------------------------------|
      | , e   | Execute selected lisp expression | 'eval-region                 |
      | , l   | Add/Remove comments              | 'comment-or-uncomment-region |
***** Links: [[Evil Visual Bindings][Evil Visual Bindings]]                            :ignore:
**** Ex Mode Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-ex-binding
    :END:
   #+TBLNAME: evil_ex_keys
      | Combo | Description   | Command        |
      |-------+---------------+----------------|
      | Q     | Butter finger | 'evil-quit     |
      | QA    | Butter finger | 'evil-quit-all |
      | Qa    | Butter finger | 'evil-quit-all |
**** Links: [[Evil Ex Bindings][Evil Ex Bindings]]                                     :ignore:
*** Keymap Bindings
**** Buffer Selection Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-bs-binding
    :END:
   #+TBLNAME: evil_bs_keys
      | Combo | Description | Command             |
      | h     |             | 'evil-backward-char |
      | q     |             | 'bs-abort           |
      | j     |             | 'bs-down            |
      | k     |             | 'bs-up              |
      | l     |             | 'evil-forwared-char |
      | RET   |             | 'bs-select          |
***** Links: [[Evil BS Bindings][Evil BS Bindings]] :ignore:
**** Compilation Buffer Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-compile-bufer
    :END:
   #+TBLNAME: evil_compile_keys
      | Combo | Description                           | Command                     |
      | r     |                                       | 'recompile                  |
      | TAB   |                                       | 'compilation-next-error     |
      | S-TAB |                                       | 'compilation-previous-error |
      | RET   | Jump to the error line in source code | 'compile-goto-error         |
      | C-j   | Navigate cursor to the lower window   | 'windmove-down              |
      | C-k   | Navigate cursor to the upper window   | 'windmove-up                |
      | [ [   | Jump to error on the previous file    | 'compilation-previous-file  |
      | ] ]   |                                       | 'compilation-next-file      |
***** Links: [[Compilation Buffer Map Bindings][Compilation Buffer Map Bindings]]                       :ignore:
*** Evil-Leader Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-leader-binding
    :END:
   #+TBLNAME: evil_leader_keys
      | Combo  | Description                     | Command                                          |
      |--------+---------------------------------+--------------------------------------------------|
      | %      |                                 | 'ctl-x-5-prefix                                  |
      | "\\\\" |                                 | 'evil-execute-in-emacs-state                     |
      | 0      |                                 | 'select-window-0                                 |
      | 1      |                                 | 'select-window-1                                 |
      | 2      |                                 | 'select-window-2                                 |
      | 3      |                                 | 'select-window-3                                 |
      | 4      |                                 | 'select-window-4                                 |
      | 5      |                                 | 'select-window-5                                 |
      | 6      |                                 | 'select-window-6                                 |
      | 7      |                                 | 'select-window-7                                 |
      | 8      |                                 | 'select-window-8                                 |
      | 9      |                                 | 'select-window-9                                 |
      | b k    | Kill current buffer             | 'ido-kill-buffer                                 |
      | b S    |                                 | 'bs-show                                         |
      | b d    |                                 | 'kill-this-buffer                                |
      | b e    |                                 | 'evil-buffer                                     |
      | b i    |                                 | 'ibuffer                                         |
      | b q    |                                 | 'kill-buffer-and-window                          |
      | b f    |                                 | 'ido-find-file                                   |
      | b x    |                                 | 'ido-switch-buffer                               |
      | C      |                                 | 'customize-group                                 |
      | c i    |                                 | 'evilnc-comment-or-uncomment-lines               |
      | c l    |                                 | 'evilnc-comment-or-uncomment-to-the-line         |
      | c c    |                                 | 'evilnc-copy-and-comment-lines                   |
      | c p    |                                 | 'evilnc-comment-or-uncomment-paragraphs          |
      | d      |                                 | 'dired-jump                                      |
      | e l    |                                 | 'eval-last-sexp                                  |
      | e b    |                                 | 'eval-buffer                                     |
      | e e    |                                 | 'eval-expression                                 |
      | e d    |                                 | 'eval-defun                                      |
      | j c    |                                 | 'evil-ace-jump-char-mode                         |
      | j l    |                                 | 'evil-ace-jump-line-mode                         |
      | j w    |                                 | 'evil-ace-jump-word-mode                         |
      | h x    | Describe character under cursor | 'describe-char                                   |
      | h k    | Describe keybinding             | 'describe-key                                    |
      | h m    | Describe keybinding             | 'describe-mode                                   |
      | h h    |                                 | 'help-for-help-internal                          |
      | h j    |                                 | 'helm-dash-at-point                              |
      | h e    |                                 | 'emojify-describe-emoji-at-point                 |
      | M      |                                 | 'which-key-show-keymap                           |
      | e c    |                                 | 'evilnc-comment-or-uncomment-lines               |
      | ?      |                                 | 'which-key-show-top-level                        |
      | q      |                                 | 'evil-window-delete                              |
      | P      |                                 | 'package-list-packages                           |
      | r 1    |                                 | 'qq/serial-term-1                                |
      | r 2    |                                 | 'qq/serial-term-2                                |
      | r r    |                                 | 'serial-term                                     |
      | r v    |                                 | 'multi-vterm                                     |
      | s      |                                 | 'save-buffer                                     |
      | t SPC  |                                 | 'whitespace-mode                                 |
      | t TAB  |                                 | 'c-toggle-syntactic-indentation                  |
      | t b    |                                 | 'sr-speedbar-toggle                              |
      | t r    |                                 | 'toggle-truncate-lines                           |
      | t d    |                                 | 'toggle-debug-on-error                           |
      | t h    | toggle highlight current line   | 'global-hl-line-mode                             |
      | t i    | toggle indent guide             | 'highlight-indent-guides-mode                    |
      | t c    |                                 | 'qq/toggle-clang-format-save                     |
      | t s    |                                 | 'qq/toggle-evil-search                           |
      | t f    |                                 | 'toggle-frame-fullscreen                         |
      | t m    |                                 | 'toggle-frame-maximized                          |
      | t o    |                                 | 'auto-dim-other-buffers-mode                     |
      | t t    |                                 | 'treemacs                                        |
      | t l    |                                 | 'qq/toggle-line-numbers                          |
      | t e    |                                 | 'qq/toggle-delete-trailing-whitespace            |
      | t g    |                                 | 'gdb-many-windows                                |
      | t w    |                                 | 'other-frame                                     |
      | u u    |                                 | 'undo-tree-visualize                             |
      | u s    |                                 | 'undo-tree-save-state-to-register ; C-x r u      |
      | u r    |                                 | 'undo-tree-restore-state-from-register ; C-x r U |
      | V      |                                 | (bind (term "vim"))                              |
      | v d    |                                 | 'gdb                                             |
      | v k    |                                 | 'gud-kill-yes                                    |
      | v r    |                                 | 'gud-remove                                      |
      | v b    |                                 | 'gud-break                                       |
      | v u    |                                 | 'gud-run                                         |
      | v p    |                                 | 'gud-print                                       |
      | v e    |                                 | 'gud-cls                                         |
      | v n    |                                 | 'gud-next                                        |
      | v s    |                                 | 'gud-step                                        |
      | v i    |                                 | 'gud-stepi                                       |
      | v c    |                                 | 'gud-cont                                        |
      | v f    |                                 | 'gud-finish                                      |
      | x h    |                                 | 'mark-whole-buffer                               |
      | x x    |                                 | 'smex                                            |
      | x n n  |                                 | 'narrow-or-widen-dwim                            |
      | x n w  |                                 | 'widen                                           |
      | x n d  |                                 | 'narrow-to-defun                                 |
      | x n r  |                                 | 'narrow-to-region                                |
      | x z    |                                 | 'suspend-frame                                   |
      | y h    |                                 | 'cliphist-paste-item                             |
      | y u    |                                 | 'cliphist-select-item                            |
**** Links: [[Evil Leader Bindings][Evil Leader Bindings]]                                     :ignore:
** Mixed-pitch

   #+begin_src emacs-lisp
     (add-hook 'text-mode-hook 'mixed-pitch-mode)
   #+end_src
** Hydra
   #+begin_src emacs-lisp
     (require 'pretty-hydra)
     (setq hydra-posframe-show-params '(:internal-border-width 1
                                        :internal-border-color "#c6c6c6"
                                        :horizontal-scroll-bars 't
                                        :poshandler posframe-poshandler-point-bottom-left-corner))


     (pretty-hydra-define test-hydra
       (:title "TEST" :color amaranth :quit-key "q")
       ("hello"
        (("cmp" nil "profile" )
         ("cmc" nil "cmake")
         ("cmb" nil "build")
         )))
     (setq hydra-hint-display-type 'posframe)
   #+end_src
** Whitespace Butler
https://github.com/lewang/ws-butler

   #+begin_src emacs-lisp
     (require 'ws-butler)
     (ws-butler-global-mode 1)
   #+end_src

** Dired
   #+begin_src emacs-lisp
     (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
   #+end_src

*** Evil Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-dired-binding
    :END:
   #+TBLNAME: evil_dired_keys
      | Combo         | Mode           | Evil Mode       | Description                 | Command                                  |
      | <tab>         | dired-mode-map | (visual normal) |                             | 'dired-subtree-toggle                    |
      | q             | dired-mode-map | (normal)        |                             | 'quit-window                             |
      | nn            | dired-mode-map | (normal)        | dired-narrow operation      | 'dired-narrow                            |
      | nx            | dired-mode-map | (normal)        |                             | 'dired-narrow-regexp                     |
      | j             | dired-mode-map | (normal)        |                             | 'dired-next-line                         |
      | j             | dired-mode-map | (normal)        |                             | 'dired-next-line                         |
      | k             | dired-mode-map | (normal)        |                             | 'dired-previous-line                     |
      | [mouse-2]     | dired-mode-map | (normal)        |                             | 'dired-mouse-find-file-other-window      |
      | [follow-link] | dired-mode-map | (normal)        |                             | 'mouse-face                              |
      | "#"           | dired-mode-map | (normal)        | Commands to mark or         | 'dired-flag-auto-save-files              |
      | .             | dired-mode-map | (normal)        | flag certain categories     | 'dired-clean-directory                   |
      | ~             | dired-mode-map | (normal)        | of files                    | 'dired-flag-backup-files                 |
      | A             | dired-mode-map | (normal)        | Upper case keys (except !)  | 'dired-do-find-regexp                    |
      | C             | dired-mode-map | (normal)        | for operating on the        | 'dired-do-copy                           |
      | B             | dired-mode-map | (normal)        | marked files                | 'dired-do-byte-compile                   |
      | D             | dired-mode-map | (normal)        |                             | 'dired-do-delete                         |
      | gc            | dired-mode-map | (normal)        |                             | 'dired-do-chgrp                          |
      | H             | dired-mode-map | (normal)        |                             | 'dired-do-hardlink                       |
      | L             | dired-mode-map | (normal)        |                             | 'dired-do-load                           |
      | M             | dired-mode-map | (normal)        |                             | 'dired-do-chmod                          |
      | O             | dired-mode-map | (normal)        |                             | 'dired-do-chown                          |
      | P             | dired-mode-map | (normal)        |                             | 'dired-do-print                          |
      | Q             | dired-mode-map | (normal)        |                             | 'dired-do-find-regexp-and-replace        |
      | R             | dired-mode-map | (normal)        |                             | 'dired-do-rename                         |
      | S             | dired-mode-map | (normal)        |                             | 'dired-do-symlink                        |
      | T             | dired-mode-map | (normal)        |                             | 'dired-do-touch                          |
      | X             | dired-mode-map | (normal)        |                             | 'dired-do-shell-command                  |
      | Z             | dired-mode-map | (normal)        |                             | 'dired-do-compress                       |
      | c             | dired-mode-map | (normal)        |                             | 'dired-do-compress-to                    |
      | "!"           | dired-mode-map | (normal)        |                             | 'dired-do-shell-command                  |
      | &             | dired-mode-map | (normal)        |                             | 'dired-do-async-shell-command            |
      | "="           | dired-mode-map | (normal)        | Comparison commands         | 'dired-diff                              |
      | M-C-?         | dired-mode-map | (normal)        | Tree Dired commands         | 'dired-unmark-all-files                  |
      | M-C-d         | dired-mode-map | (normal)        |                             | 'dired-tree-down                         |
      | M-C-u         | dired-mode-map | (normal)        |                             | 'dired-tree-up                           |
      | M-C-n         | dired-mode-map | (normal)        |                             | 'dired-next-subdir                       |
      | M-C-p         | dired-mode-map | (normal)        |                             | 'dired-prev-subdir                       |
      | M-{           | dired-mode-map | (normal)        | move to marked files        | 'dired-prev-marked-file                  |
      | M-}           | dired-mode-map | (normal)        |                             | 'dired-next-marked-file                  |
      | %             | dired-mode-map | (normal)        | Make all regexp commands    | nil                                      |
      | %u            | dired-mode-map | (normal)        | share a `%' prefix:         | 'dired-upcase                            |
      | %l            | dired-mode-map | (normal)        |                             | 'dired-downcase                          |
      | %d            | dired-mode-map | (normal)        |                             | 'dired-flag-files-regexp                 |
      | %g            | dired-mode-map | (normal)        |                             | 'dired-mark-files-containing-regexp      |
      | %m            | dired-mode-map | (normal)        |                             | 'dired-mark-files-regexp                 |
      | %r            | dired-mode-map | (normal)        |                             | 'dired-do-rename-regexp                  |
      | %C            | dired-mode-map | (normal)        |                             | 'dired-do-copy-regexp                    |
      | %H            | dired-mode-map | (normal)        |                             | 'dired-do-hardlink-regexp                |
      | %R            | dired-mode-map | (normal)        |                             | 'dired-do-rename-regexp                  |
      | %S            | dired-mode-map | (normal)        |                             | 'dired-do-symlink-regexp                 |
      | %&            | dired-mode-map | (normal)        |                             | 'dired-flag-garbage-files                |
      | "*"           | dired-mode-map | (normal)        | mark                        | nil                                      |
      | **            | dired-mode-map | (normal)        |                             | 'dired-mark-executables                  |
      | "*/"          | dired-mode-map | (normal)        |                             | 'dired-mark-directories                  |
      | *@            | dired-mode-map | (normal)        |                             | 'dired-mark-symlinks                     |
      | *%            | dired-mode-map | (normal)        |                             | 'dired-mark-files-regexp                 |
      | *(            | dired-mode-map | (normal)        |                             | 'dired-mark-sexp                         |
      | *.            | dired-mode-map | (normal)        |                             | 'dired-mark-extension                    |
      | *O            | dired-mode-map | (normal)        |                             | 'dired-mark-omitted                      |
      | *c            | dired-mode-map | (normal)        |                             | 'dired-change-marks                      |
      | *s            | dired-mode-map | (normal)        |                             | 'dired-mark-subdir-files                 |
      | *m            | dired-mode-map | (normal)        |                             | 'dired-mark                              |
      | *u            | dired-mode-map | (normal)        |                             | 'dired-unmark                            |
      | *?            | dired-mode-map | (normal)        |                             | 'dired-unmark-all-files                  |
      | *!            | dired-mode-map | (normal)        |                             | 'dired-unmark-all-marks                  |
      | U             | dired-mode-map | (normal)        |                             | 'dired-unmark-all-marks                  |
      | * <delete>    | dired-mode-map | (normal)        |                             | 'dired-unmark-backward                   |
      | * C-n         | dired-mode-map | (normal)        |                             | 'dired-next-marked-file                  |
      | * C-p         | dired-mode-map | (normal)        |                             | 'dired-prev-marked-file                  |
      | *t            | dired-mode-map | (normal)        |                             | 'dired-toggle-marks                      |
      | a             | dired-mode-map | (normal)        | Lower keys for commands not | 'dired-find-alternate-file               |
      | d             | dired-mode-map | (normal)        | operating on all            | 'dired-flag-file-deletion                |
      | gf            | dired-mode-map | (normal)        | the marked files            | 'dired-find-file                         |
      | C-m           | dired-mode-map | (normal)        |                             | 'dired-find-file                         |
      | gr            | dired-mode-map | (normal)        |                             | 'revert-buffer                           |
      | i             | dired-mode-map | (normal)        |                             | 'dired-toggle-read-only                  |
      | I             | dired-mode-map | (normal)        |                             | 'dired-maybe-insert-subdir               |
      | J             | dired-mode-map | (normal)        |                             | 'dired-goto-file                         |
      | K             | dired-mode-map | (normal)        |                             | 'dired-do-kill-lines                     |
      | r             | dired-mode-map | (normal)        |                             | 'dired-do-redisplay                      |
      | m             | dired-mode-map | (normal)        |                             | 'dired-mark                              |
      | t             | dired-mode-map | (normal)        |                             | 'dired-toggle-marks                      |
      | u             | dired-mode-map | (normal)        | also "*u"                   | 'dired-unmark                            |
      | W             | dired-mode-map | (normal)        |                             | 'browse-url-of-dired-file                |
      | x             | dired-mode-map | (normal)        |                             | 'dired-do-flagged-delete                 |
      | f             | dired-mode-map | (normal)        |                             | 'dired-show-file-type                    |
      | Y             | dired-mode-map | (normal)        |                             | 'dired-copy-filename-as-kill             |
      | +             | dired-mode-map | (normal)        |                             | 'dired-create-directory                  |
      | <return>      | dired-mode-map | (normal)        | open                        | 'dired-find-file                         |
      | S-<return>    | dired-mode-map | (normal)        |                             | 'dired-find-file-other-window            |
      | M-<return>    | dired-mode-map | (normal)        |                             | 'dired-display-file                      |
      | gO            | dired-mode-map | (normal)        |                             | 'dired-find-file-other-window            |
      | go            | dired-mode-map | (normal)        |                             | 'dired-view-file                         |
      | o             | dired-mode-map | (normal)        | sort                        | 'dired-sort-toggle-or-edit               |
      | gj            | dired-mode-map | (normal)        | moving                      | 'dired-next-dirline                      |
      | gk            | dired-mode-map | (normal)        |                             | 'dired-prev-dirline                      |
      | [ [           | dired-mode-map | (normal)        |                             | 'dired-prev-dirline                      |
      | ] ]           | dired-mode-map | (normal)        |                             | 'dired-next-dirline                      |
      | <             | dired-mode-map | (normal)        |                             | 'dired-prev-dirline                      |
      | >             | dired-mode-map | (normal)        |                             | 'dired-next-dirline                      |
      | "^"           | dired-mode-map | (normal)        |                             | 'dired-up-directory                      |
      | gh            | dired-mode-map | (normal)        | hiding                      | 'dired-hide-subdir                       |
      | M-$           | dired-mode-map | (normal)        |                             | 'dired-hide-all                          |
      | (             | dired-mode-map | (normal)        |                             | 'dired-hide-details-mode                 |
      | M-s a C-s     | dired-mode-map | (normal)        | isearch                     | 'dired-do-isearch                        |
      | M-s a M-C-s   | dired-mode-map | (normal)        |                             | 'dired-do-isearch-regexp                 |
      | M-s f C-s     | dired-mode-map | (normal)        |                             | 'dired-isearch-filenames                 |
      | M-s f M-C-s   | dired-mode-map | (normal)        |                             | 'dired-isearch-filenames-regexp          |
      | g?            | dired-mode-map | (normal)        | misc                        | 'dired-summary                           |
      | <delete>      | dired-mode-map | (normal)        |                             | 'dired-unmark-backward                   |
      | C-t d         | dired-mode-map | (normal)        | thumbnail manipulation      | 'image-dired-display-thumbs              |
      | C-t t         | dired-mode-map | (normal)        | (image-dired)               | 'image-dired-tag-files                   |
      | C-t r         | dired-mode-map | (normal)        |                             | 'image-dired-delete-tag                  |
      | C-t j         | dired-mode-map | (normal)        |                             | 'image-dired-jump-thumbnail-buffer       |
      | C-t i         | dired-mode-map | (normal)        |                             | 'image-dired-dired-display-image         |
      | C-t x         | dired-mode-map | (normal)        |                             | 'image-dired-dired-display-external      |
      | C-t a         | dired-mode-map | (normal)        |                             | 'image-dired-display-thumbs-append       |
      | C-t .         | dired-mode-map | (normal)        |                             | 'image-dired-display-thumb               |
      | C-t c         | dired-mode-map | (normal)        |                             | 'image-dired-dired-comment-files         |
      | C-t f         | dired-mode-map | (normal)        |                             | 'image-dired-mark-tagged-files           |
      | C-t C-t       | dired-mode-map | (normal)        |                             | 'image-dired-dired-toggle-marked-thumbs  |
      | C-t e         | dired-mode-map | (normal)        |                             | 'image-dired-dired-edit-comment-and-tags |
      | ;d            | dired-mode-map | (normal)        | encryption and decryption   | 'epa-dired-do-decrypt                    |
      | ;v            | dired-mode-map | (normal)        | (epa-dired)                 | 'epa-dired-do-verify                     |
      | ;s            | dired-mode-map | (normal)        |                             | 'epa-dired-do-sign                       |
      | ;e            | dired-mode-map | (normal)        |                             | 'epa-dired-do-encrypt                    |

   #+TBLNAME: dired-keys
      | Combo | Mode           | Description | Command |
      | SPC   | dired-mode-map |             | nil     |
      | S-SPC | dired-mode-map |             | nil     |
      | n     | dired-mode-map |             | nil     |
**** Links: [[Evil Dired Bindings][Evil Dired Bindings]]                                     :ignore:
** Ag
*** Evil Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-ag-binding
    :END:
   #+TBLNAME: evil_ag_keys
      | Combo | Mode        | Evil Mode       | Description | Command                     |
      | h     | ag-mode-map | (visual normal) |             | 'evil-backward-char         |
      | g r   | ag-mode-map | (visual normal) | refresh     | 'recompile                  |
      | g j   | ag-mode-map | (visual normal) | navigation  | 'compilation-next-error     |
      | g k   | ag-mode-map | (visual normal) |             | 'compilation-previous-error |
      | C-j   | ag-mode-map | (visual normal) |             | 'compilation-next-error     |
      | C-k   | ag-mode-map | (visual normal) |             | 'compilation-previous-error |
      | ]     | ag-mode-map | (visual normal) |             | 'compilation-next-error     |
      | [     | ag-mode-map | (visual normal) |             | 'compilation-previous-error |
      | ?     | ag-mode-map | (visual normal) | search      | 'qq/evil-search-backward    |
      | "/"   | ag-mode-map | (visual normal) |             | 'qq/evil-search-forward     |
      | n     | ag-mode-map | (visual normal) |             | 'qq/evil-search-next        |
      | N     | ag-mode-map | (visual normal) |             | 'qq/evil-search-previous    |
**** Links: [[Evil Ag Bindings][Evil Ag Bindings]]                                     :ignore:
** Git/Magit
*** Settings
   #+BEGIN_SRC emacs-lisp
     (require 'magit)
     (setq magit-diff-options '("--histogram"))
     (setq magit-push-always-verify nil)
     (setq magit-stage-all-confirm nil)
     (setq magit-display-buffer-function #'magit-display-buffer-fullcolumn-most-v1)
     (setq transient-history-file (concat qq/cache-directory "transient_hist.el"))
     #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
     (unless (display-graphic-p)
       (diff-hl-margin-mode))
   #+END_SRC

*** magit-commit-mode

   #+BEGIN_SRC emacs-lisp
     (setq git-commit-finish-query-functions nil)
     (add-hook 'git-commit-mode-hook
               '(lambda () (auto-fill-mode 0)
                  (evil-insert-state))
               ;; append rather than prepend to git-commit-mode-hook, since the
               ;; thing that turns auto-fill-mode on in the first place is itself
               ;; another hook on git-commit-mode.
               t)

     (custom-set-faces
      '(git-commit-overlong-summary ((t (:inherit nil))))
      '(git-commit-nonempty-second-line ((t (:inherit nil))))
      '(git-commit-summary ((t nil))))
   #+END_SRC

*** git-timemachine
   Walkthrough git revisions of a file

   #+BEGIN_SRC emacs-lisp
     (require 'git-timemachine)
   #+END_SRC

   Gives all bindings of =git-timemachine= higher priority than any =Evil= binding (but only in normal state).
   Refer [[https://bitbucket.org/lyro/evil/issues/511/let-certain-minor-modes-key-bindings][here]]

   #+BEGIN_SRC emacs-lisp
      (evil-make-overriding-map git-timemachine-mode-map 'normal)
      (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps)
   #+END_SRC

*** git-blame-line
   This function runs git blame on the line the cursor is on. It prints the
   short commit id, author, and commit date into the =minibuffer=. It also
   copies the short commit id to the kill ring so you can paste it
   somewhere else if you need to. From [[http://jayconrod.com/posts/67/emacs-run-gitblame-on-the-current-line][here]].

   #+BEGIN_SRC emacs-lisp
     (defun git-blame-line ()
       "Runs `git blame` on the current line and
        adds the commit id to the kill ring"
       (interactive)
       (let* ((line-number (save-excursion
                             (goto-char (point-at-bol))
                             (+ 1 (count-lines 1 (point)))))
              (line-arg (format "%d,%d" line-number line-number))
              (commit-buf (generate-new-buffer "*git-blame-line-commit*")))
         (call-process "git" nil commit-buf nil
                       "blame" (buffer-file-name) "-L" line-arg)
         (let* ((commit-id (with-current-buffer commit-buf
                             (buffer-substring 1 9)))
                (log-buf (generate-new-buffer "*git-blame-line-log*")))
           (kill-new commit-id)
           (call-process "git" nil log-buf nil
                         "log" "-1" "--pretty=%h   %an   %s" commit-id)
           (with-current-buffer log-buf
             (message "Line %d: %s" line-number (buffer-string)))
           (kill-buffer log-buf))
         (kill-buffer commit-buf)))
   #+END_SRC

*** git-gutter-fringe
   Enable =Git-Gutter+= globally

   #+BEGIN_SRC emacs-lisp
     (require 'git-gutter-fringe)
     (global-git-gutter-mode +1)

     (add-hook 'git-gutter:update-hooks 'magit-revert-buffer-hook)
   #+END_SRC

Git-gutter doesn’t play nice with TRAMP remotes
   #+BEGIN_SRC emacs-lisp
     (defun git-gutter-find-file-hook ()
       (git-gutter-mode
        (if (file-remote-p (buffer-file-name))
            0
          1)))
     (add-hook 'find-file-hook #'git-gutter-find-file-hook)
   #+END_SRC
*** git-messenger
**** settings
   #+BEGIN_SRC emacs-lisp
     (require 'git-messenger)
     ;; show details to play `git blame' game
     (setq git-messenger:show-detail t
           git-messenger:use-magit-popup t)
   #+END_SRC
**** Custom UI with hydra-posframe
   #+BEGIN_SRC emacs-lisp
     (defhydra git-messenger-hydra (:color black)
       ("d" git-messenger:popup-show "Show diff")
       ("y" git-messenger:copy-commit-id "Yank SHA")
       ("m" git-messenger:copy-message "Yank message")
       ("q" git-messenger:popup-close "Quit"))

     (defun qq/git-messenger-format-message (vcs commit-id commit-author message)
       (if (eq vcs 'git)
           (let ((date (git-messenger:commit-date commit-id))
                 (colon (propertize ":" 'face 'font-lock-comment-face)))
             (concat
              (format "%s%s %s \n%s%s %s\n%s  %s %s \n"
                      (propertize "Commit" 'face 'font-lock-keyword-face) colon
                      (propertize (substring commit-id 0 8) 'face 'font-lock-comment-face)
                      (propertize "Author" 'face 'font-lock-keyword-face) colon
                      (propertize commit-author 'face 'font-lock-string-face)
                      (propertize "Date" 'face 'font-lock-keyword-face) colon
                      (propertize date 'face 'font-lock-string-face))
              (propertize (make-string 38 ?─) 'face 'font-lock-comment-face)
              message "\n"))
         (git-messenger:format-detail vcs commit-id commit-author message)))

     (defun qq/git-messenger-show ()
       "TODO: docstring."
       (interactive)
       (let* ((vcs (git-messenger:find-vcs))
              (file (buffer-file-name (buffer-base-buffer)))
              (line (line-number-at-pos))
              (commit-info (git-messenger:commit-info-at-line vcs file line))
              (commit-id (car commit-info))
              (commit-author (cdr commit-info))
              (commit-message (git-messenger:commit-message vcs commit-id))
              (detailed-message (if (git-messenger:show-detail-p commit-id)
                                    (qq/git-messenger-format-message
                                     vcs commit-id commit-author commit-message)
                                  commit-message)))
         (setq git-messenger:vcs vcs
               git-messenger:last-message commit-message
               git-messenger:last-commit-id commit-id)
         (run-hook-with-args 'git-messenger:before-popup-hook detailed-message)
         (git-messenger-hydra/body)
         (cond ((and (fboundp 'posframe-workable-p) (posframe-workable-p))
                (let ((buffer-name "*git-messenger*"))
                  ;; TODO: reuse frame.
                  (posframe-show buffer-name
                                 :string detailed-message
                                 :left-fringe 8
                                 :right-fringe 8
                                 :background-color (face-attribute 'mode-line :background nil t)
                                 :internal-border-color (face-attribute 'internal-border
                                                                        :background
                                                                        nil
                                                                        t)
                                 :internal-border-width 2)
                  (unwind-protect
                      (push (read-event) unread-command-events)
                    (posframe-delete buffer-name))))
               (t (message "%s" detailed-message)))
         (run-hook-with-args 'git-messenger:after-popup-hook detailed-message))
       (advice-add #'git-messenger:popup-close :override #'ignore)
       (advice-add #'git-messenger:popup-message :override #'qq/git-messenger-show))
   #+END_SRC
*** vc-msg
**** settings
   #+BEGIN_SRC emacs-lisp
     (require 'vc-msg)
   #+END_SRC
**** Custom UI with pretty-hydra
   #+BEGIN_SRC emacs-lisp
(pretty-hydra-define qq/vc-msg-hydra
  (:title (concat "vc-msg\n\n"
                  (cl-etypecase vc-msg-commit-info
                    (list
                     (let* ((pad 2)
                            (padstr (make-string pad ?\ ))
                            (width (- (min (window-width) 100) (* pad 2)))
                            (src (funcall vc-msg-formatter vc-msg-commit-info)))
                       (thread-last (split-string src "\n")
                         (mapcar (lambda (s) (seq-partition s width)))
                         (apply #'append)
                         (mapcar (lambda (s) (concat padstr s padstr)))
                         (funcall (lambda (xs) (string-join xs "\n"))))))
                    (string
                     vc-msg-commit-info)))
          :pre (setq vc-msg-commit-info
                     (when vc-msg-current-file
                       (funcall vc-msg-executer
                                vc-msg-current-file
                                (funcall vc-msg-get-line-num-function)
                                (funcall vc-msg-get-version-function))))
          :quit-key ("C-g" "q"))
  ("Copy info"
   (("wa" vc-msg-copy-all "All" :exit t)
    ("wl" vc-msg-copy-link "Commit URL" :exit t))
   "Visit"
   (("c" vc-msg-show-commit "Commit" :exit t)
    ("l" vc-msg-log "Log" :exit t))
   "Blame"
   (("b" (if magit-blame-mode
             (magit-blame-cycle-style)
           (magit-blame-addition nil))
     "Show")
    ("B" magit-blame-quit "Quit"))))
   #+END_SRC
*** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: evil-magit-binding
    :END:
   #+TBLNAME: evil_magit_keys
      | Evil Leader Combo | Description | Command                        |
      |-------------------+-------------+--------------------------------|
      | g =               |             | 'git-gutter:popup-hunk         |
      | g a               |             | 'vc-annotate                   |
      | g b               |             | 'magit-blame-addition          |
      | g C               |             | 'magit-commit                  |
      | g d               |             | 'magit-diff-unstaged           |
      | g f               |             | 'magit-file-dispatch           |
      | g i               |             | 'git-blame-line                |
      | g j               |             | 'git-gutter:next-hunk          |
      | g k               |             | 'git-gutter:previous-hunk      |
      | g L               |             | 'vc-print-log                  |
      | g l               |             | 'magit-log-buffer-file         |
      | g m               |             | 'qq/git-messenger-show         |
      | g p               |             | 'git-gutter:stage-hunk         |
      | g r               |             | 'git-gutter:revert-hunk        |
      | g s               |             | 'magit-status                  |
      | g t               |             | 'git-timemachine               |
      | g u               |             | 'git-gutter:toggle             |
      | g x               |             | 'vc-next-action                |
      | g v               |             | 'git-gutter:set-start-revision |
**** Links: [[Evil Magit Bindings][Evil Magit Bindings]]                                     :ignore:
** Beacon

   #+begin_src emacs-lisp
     (beacon-mode 1)
   #+end_src

** Lsp-mode
   Language Server Protocol support for Emacs. [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]]
   #+BEGIN_SRC emacs-lisp
     (require 'lsp-mode)
     (add-hook 'prog-mode-hook #'lsp)
     (setq lsp-keymap-prefix "C-c L")
     (setq lsp-completion-provider :capf)
     (setq lsp-session-file (concat qq/cache-directory "lsp-session-v1"))
     (setq lsp-auto-guess-root t)

     ;(lsp-register-client
     ; (make-lsp-client :new-connection (lsp-tramp-connection "clangd")
     ;                  :major-modes '(c-mode c++-mode)
     ;                  :remote? t
     ;                  :server-id 'clangd-lsp-remote))
   #+END_SRC
*** Logging
  Make sure lsp-log-io is nil. You might have forgotten it after a debugging
  session, for example. It can cause a great performance hit.

   #+BEGIN_SRC emacs-lisp
    (setq lsp-log-io nil) ; if set to true can cause a performance hit
   #+END_SRC

*** Ccls
   A C/C++/Objective-C language server supporting multi-million line C++ code-bases, powered by libclang.
   [[https://github.com/MaskRay/emacs-ccls][emacs-ccls]]

   #+BEGIN_SRC emacs-lisp
     ;(require 'ccls)
     ;(setq ccls-executable qq/ccls-binary)
   #+END_SRC

*** Clangd
   #+BEGIN_SRC emacs-lisp
     (setq lsp-clients-clangd-executable qq/clangd-binary)
     (setq lsp-clients-clangd-args
           '("-j=8"
             "--background-index"
             ;;"--clang-tidy"
             "--completion-style=bundled"
             "--pch-storage=memory"
             "--header-insertion=never"
             "--header-insertion-decorators=0"))
   #+END_SRC

*** Lsp-UI
   #+BEGIN_SRC emacs-lisp
     (setq lsp-ui-doc-enable nil)
     (setq lsp-ui-doc-position 'at-point)
     (setq lsp-ui-doc-max-height 70)
     (add-hook 'lsp-ui-mode-hook
               (bind
                 (setq-local evil-lookup-func #'lsp-ui-doc-glance)))
   #+END_SRC
*** Normal Keybinding
    :PROPERTIES:
    :CUSTOM_ID: normal-lsp-binding
    :END:
   #+TBLNAME: normal_lsp_keys
      | Evil Leader Combo | Description         | Command                       |
      |-------------------+---------------------+-------------------------------|
      | C-]               | Jump to definitions | 'xref-find-definitions        |
      | l]                | Peek to definitions | 'lsp-ui-peek-find-definitions |
      | l[                | Jump to definitions | 'lsp-ui-peek-jump-backward    |
      | l                 |                     | '(:ignore t :which-key "lsp") |
      | ld                |                     | 'xref-find-definitions        |
      | lr                |                     | 'xref-find-references         |
      | ln                |                     | 'lsp-ui-find-next-reference   |
      | lp                |                     | 'lsp-ui-find-prev-reference   |
      | le                |                     | 'lsp-ui-flycheck-list         |
      | lS                |                     | 'lsp-ui-sideline-mode         |
      | lX                |                     | 'lsp-execute-code-action      |
**** Links: [[Normal LSP Bindings][Normal LSP Bindings]]                                     :ignore:
** Org
   =org-mode= is a plain text system for organising information and notes.
   [[http://orgmode.org]]
   [[http://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/]]

*** Settings
**** Enable =org-mode=
   #+BEGIN_SRC emacs-lisp
     (require 'org)
     (require 'org-eldoc)
     (require 'org-indent)
     (require 'org-superstar)
     (require 'ob-napkin)
     (require 'ox-extra)
     (ox-extras-activate '(ignore-headlines))
     (add-to-list 'org-src-lang-modes '("napkin-puml" . plantuml))
   #+END_SRC

**** =setq=

   #+BEGIN_SRC emacs-lisp
       (setq
   #+END_SRC

***** Default directory
   Org mode operates from a directory. You need a directory to store all your
   org files and be default. Typically, you can use Org without setting these but
   it is useful to set this location to help in capturing and archiving org files
   effectively.

   #+BEGIN_SRC emacs-lisp
     org-directory "~/Dropbox/org"
   #+END_SRC
***** Elipsis appearance
my collection of org-ellipsis candidate symbols

    right arrows

    “↝” “⇉” “⇝” “⇢” “⇨” “⇰” “➔” “➙” “➛” “➜” “➝” “➞”

    “➟” “➠” “➡” “➥” “➦” “➧” “➨”

    “➩” “➪” “➮” “➯” “➱” “➲”

    “➳” “➵” “➸” “➺” “➻” “➼” “➽”
    arrow heads

    “➢” “➣” “➤” “≪”, “≫”, “«”, “»”
    other arrows

    “↞” “↠” “↟” “↡” “↺” “↻”
    lightening

    “⚡”
    other symbols

    …, ▼, ↴, , ∞, ⬎, ⤷, ⤵

   #+BEGIN_SRC emacs-lisp
     org-ellipsis "»"
     org-columns-ellipses "…"
   #+END_SRC

***** Press =RET= follow links

   #+BEGIN_SRC emacs-lisp
     org-return-follows-link t
   #+END_SRC
***** refile-target

   #+BEGIN_SRC emacs-lisp
     org-refile-targets '((nil :maxlevel . 9)
                          (org-agenda-files :maxlevel . 9))
   #+END_SRC
***** Markup
   Org mode has its own [[https://orgmode.org/manual/Markup.html][markup syntax]] but seeing the [[https://orgmode.org/manual/Emphasis-and-monospace.html#Emphasis-and-monospace][emphasis markers]] is distracting. I prefer to hide it.

   #+BEGIN_SRC emacs-lisp
     org-hide-emphasis-markers t
   #+END_SRC
***** Minimal outline
   Remove all the "*" but the last one for [[https://orgmode.org/org.html#Headlines][headline]]

   #+BEGIN_SRC emacs-lisp
     org-superstar-remove-leading-stars t
     org-hide-leading-stars t
     org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")
   #+END_SRC
***** Image
   The GUI Emacs has the ability to display images. But if the image is pretty
   large, it displays the whole thing. Let’s restrict it from doing that.

   #+BEGIN_SRC emacs-lisp
     org-image-actual-width '(500)
   #+END_SRC

   set inline image to auto display
   #+BEGIN_SRC emacs-lisp
     org-startup-with-inline-images t
   #+END_SRC

***** Editing code block
     Pressing =E= will cause a new popup window and hide current window layout.
     Reuse current window instead of popup a new one

   #+BEGIN_SRC emacs-lisp
     org-src-window-setup 'current-window
   #+END_SRC
***** Native font-lock
   When editing org-files with source-blocks, we want the source blocks to
   be themed as they would in their native mode.

   #+BEGIN_SRC emacs-lisp
     org-src-fontify-natively t
     org-edit-src-content-indentation 2
   #+END_SRC

***** Default note file

   #+BEGIN_SRC emacs-lisp
     org-default-notes-file "organizer.org"
   #+END_SRC
***** Capture templates

   #+BEGIN_SRC emacs-lisp
     org-capture-templates
     '(("t" "Todo" entry (file+headline qq/inbox-org-file "TODO")
        "* TODO %?\n%U\n%a\n")
       ("n" "Note" entry (file+headline qq/inbox-org-file "NOTES")
        "* %? :NOTE:\n%U\n%a\n")
       ("m" "Meeting" entry (file qq/inbox-org-file)
        "* MEETING %? :MEETING:\n%U")
       ("j" "Journal" entry (file+datetree (concat org-directory "/journal.org"))
        "* %?\n%U\n"))
   #+END_SRC

***** Indentation

   #+BEGIN_SRC emacs-lisp
     org-startup-indented t
     org-indent-indentation-per-level 3
     org-src-tab-acts-natively t
   #+END_SRC

***** Enable logging when tasks are complete.
   This puts a time-stamp on the completed task. Since I usually am doing quite
   a few things at once, I added the INPROGRESS keyword and made the color blue.

   #+BEGIN_SRC emacs-lisp
     org-log-done t
     org-todo-keywords '((sequence "TODO" "INPROGRESS" "DONE"))
     org-todo-keyword-faces '(("INPROGRESS" . (:foreground "blue" :weight bold)))
   #+END_SRC

***** Allow changing between todo stats directly by hotkey

   #+BEGIN_SRC emacs-lisp
     org-use-fast-todo-selection t
     org-treat-S-cursor-todo-selection-as-state-change nil
     org-todo-keywords
     '((sequence "TODO(t)" "NEXT(n@)" "|" "DONE(d)")
       (sequence "WAITING(w@/!)" "|" "CANCELLED(c@/!)"))

     org-todo-state-tags-triggers
     ' (("CANCELLED" ("CANCELLED" . t))
        ("WAITING" ("WAITING" . t))
        ("TODO" ("WAITING") ("CANCELLED"))
        ("NEXT" ("WAITING") ("CANCELLED"))
        ("DONE" ("WAITING") ("CANCELLED")))
   #+END_SRC

***** org-agenda
   The [[https://orgmode.org/manual/Agenda-Views.html][agenda view]] is an amazing way to search your org files for tags, TODOs,
   keywords, and even view deadlines. It requires that org files be added to it.

   #+BEGIN_SRC emacs-lisp
     org-agenda-files (list
                       "~/Dropbox/org/blog.org"
                       "~/Dropbox/org/errands.org"
                       "~/Dropbox/org/references/articles.org"
                       "~/Dropbox/org/ledger.org"
                       "~/Dropbox/org/notes.org"
                       "~/Dropbox/org/fun.org")
   #+END_SRC

   Then, a smaller part of org is the way it shows the [[https://orgmode.org/manual/Deadlines-and-scheduling.html][deadlines]] of all the
   TODOs and show them in a view that spans a fortnight. It can be set it
   weekly, monthly or daily too.

   #+BEGIN_SRC emacs-lisp
     org-deadline-warning-days 7
     org-agenda-span 'fortnight
     org-agenda-skip-scheduled-if-deadline-is-shown t
     org-agenda-show-log t
   #+END_SRC

***** Tagging

   Org mode has a [[https://orgmode.org/manual/Tags.html][tagging system]] that is very useful to organize the contents
   and notes. You can select the tags with a single letter (the letter after “?”
   in the following code).

   #+BEGIN_SRC emacs-lisp
     org-tag-alist (quote (("article"   . ?a) ;; temporary
                           ("books"     . ?b)
                           ("courses"   . ?c) ;; temporary
                           ("code"      . ?C)
                           ("card"      . ?d)
                           ("drill"     . ?D)
                           ("errands"   . ?e)
                           ("films"     . ?f)
                           ("gubby"     . ?g)
                           ("home"      . ?h)
                           ("idea"      . ?i)
                           ("job"       . ?j)
                           ("ledger"    . ?l)
                           ("meeting"   . ?m)
                           ("note"      . ?n)
                           ("online"    . ?o)
                           ("personal"  . ?p)
                           ("project"   . ?P)
                           ("reference" . ?r) ;; temporary
                           ("reveal"    . ?R)
                           ("story"     . ?s)
                           ("technical" . ?t)
                           ("vague"     . ?v)
                           ("work"      . ?w)
                           ("noexport"  . ?x)
                           ("cash"      . ?$)))
   #+END_SRC
***** Capture
   Capture is an amazing tool. It was the final push to Org and I use it many
   times per day. First, we have to setup the capture templates. Templates is
   not that vast and can be easily understood by going through the manual.

#+BEGIN_SRC emacs-lisp
  org-capture-templates '(

        ;; For code snippets
        ("a"               ; key
         "Algo/Code"       ; name
         entry             ; type
         (file+headline "~/Dropbox/org/notes.org" "Code")  ; target
         "* %^{TITLE} %(org-set-tags)  :code:\n:PROPERTIES:\n:Created: %U\n:END:\n%i\#+BEGIN_SRC %^{language}\n%?\n\#END_SRC"  ; template
         :prepend t        ; properties
         :empty-lines 1    ; properties
         :created t        ; properties
         :kill-buffer t)   ; properties

        ;; For taking notes on random things
        ("n"               ; key
         "Note"            ; name
         entry             ; type
         (file+headline "~/Dropbox/org/notes.org" "Notes")  ; target
         "* %? %(org-set-tags)  :note:\n:PROPERTIES:\n:Created: %U\n:Linked: %A\n:END:\n%i"  ; template
         :prepend t        ; properties
         :empty-lines 1    ; properties
         :created t        ; properties
         :kill-buffer t)   ; properties

        ;; Ledger is a CLI accounting system
        ("l"               ; key
         "Ledger"          ; name
         entry             ; type
         (file+datetree "~/Dropbox/org/ledger.org" "Ledger")  ; target
         "* %^{expense} %(org-set-tags)  :accounts:\n:PROPERTIES:\n:Created: %U\n:END:\n%i
#+NAME: %\\1-%t
\#+BEGIN_SRC ledger :noweb yes
%^{Date of expense (yyyy/mm/dd)} %^{'*' if cleared, else blank} %\\1
    %^{Account name}                                $%^{Amount}
    %?
\#+END_SRC
"  ; template
         :prepend t        ; properties
         :empty-lines 1    ; properties
         :created t        ; properties
         :kill-buffer t)   ; properties

        ;; For notes or something regarding more work
        ("w"               ; key
         "Work"            ; name
         entry             ; type
         (file+headline "~/Dropbox/org/phd.org" "Work")  ; target
         "* TODO %^{Todo} %(org-set-tags)  :work:\n:PROPERTIES:\n:Created: %U\n:END:\n%i\n%?"  ; template
         :prepend t        ; properties
         :empty-lines 1    ; properties
         :created t        ; properties
         :kill-buffer t)   ; properties

        ;; For capturing some things that are worth reading
        ("r"               ; key
         "Reading"         ; name
         entry             ; type
         (file+headline "~/Dropbox/org/fun.org" "Reading")  ; target
         "* %^{Title} %(org-set-tags)\n:PROPERTIES:\n:Created: %U\n:END:\n%i\n%?"  ; template
         :prepend t        ; properties
         :empty-lines 1    ; properties
         :created t        ; properties
         :kill-buffer t)   ; properties

        ;; For capturing minutes of the meeting
        ("m"               ; key
         "Meeting"         ; name
         entry             ; type
         (file+datetree "~/Dropbox/org/phd.org" "Meeting")  ; target
         "* %^{Title} %(org-set-tags)  :meeting:\n:PROPERTIES:\n:Created: %U\n:END:\n%i\n** Agenda:\n%?\n\n** Minutes of the meeting:\n"  ; template
         :prepend t        ; properties
         :empty-lines 1    ; properties
         :created t        ; properties
         :kill-buffer t)   ; properties

        ;; To practice for my driving test
        ("d"               ; key
         "Drill driving"   ; name
         entry             ; type
         (file+headline "~/Dropbox/org/drill.org" "Driving")  ; target
         "* Question  :drill:driving:\n%^{Question}\n** Answer\n%?"  ; template
         :prepend t        ; properties
         :empty-lines 1    ; properties
         :created t        ; properties
         :kill-buffer t)   ; properties

        ;; For taking notes of math/stats stuff that I keep forgetting
        ("s"              ; key
         "Drill math"     ; name
         entry            ; type
         (file+headline "~/Dropbox/org/drill.org" "Stats/Math")  ; target
         "* Question  :drill:stats:math:\n%^{Question}\n** Answer\n%?"  ; template
         :prepend t        ; properties
         :empty-lines 1    ; properties
         :created t        ; properties
         :kill-buffer t)   ; properties

        ;; For capturing some physics concepts that I need to remember
        ("p"              ; key
         "Drill physics"  ; name
         entry            ; type
         (file+headline "~/Dropbox/org/drill.org" "Physics")  ; target
         "* Question  :drill:physics:\n%^{Question}\n** Answer\n%?"  ; template
         :prepend t        ; properties
         :empty-lines 1    ; properties
         :created t        ; properties
         :kill-buffer t)   ; properties

        ;; For capturing details of a job application/details
        ("j"                      ; key
         "Jobs"                   ; name
         table-line               ; type
         (file+headline "~/Dropbox/org/notes.org" "Jobs")  ; target
         "| %u | %^{Company} | [[%^{job link}][%^{position}]] | %^{referrals?} | %^{Experience?} | %^t | %^{Status} | %^{Follow up} | %^{Result} |"  ; template
         :prepend t               ; properties
         ;; :table-line-pos "II-3"   ; properties
         :empty-lines 1           ; properties
         :created t               ; properties
         :kill-buffer t)          ; properties

        ;; To capture movies that I plan to see
        ("f"              ; key
         "films"          ; name
         entry            ; type
         (file+headline "~/Dropbox/org/fun.org" "Movies")  ; target
         "* %^{Movie} %(org-set-tags)  :film:\n:PROPERTIES:\n:Created: %U\n:END:\n%i
Netflix?: %^{netflix? Yes/No}\nGenre: %^{genre}\nDescription:\n%?"  ; template
         :prepend t        ; properties
         :empty-lines 1    ; properties
         :created t        ; properties
         :kill-buffer t)   ; properties

        ;; To capture ideas for my blog
        ("b"               ; key
         "Blog"            ; name
         entry             ; type
         (file+headline "~/Dropbox/org/blog.org" "Blog")  ; target
         "* %^{Title} %(org-set-tags)  :blog:\n:PROPERTIES:\n:Created: %U\n:END:\n%i\n%?"  ; template
         :prepend t        ; properties
         :empty-lines 1    ; properties
         :created t        ; properties
         :kill-buffer t)   ; properties

        ;; To capture tons of errands
        ("e"               ; key
         "Errands"         ; name
         entry             ; type
         (file+headline "~/Dropbox/org/errands.org" "Errands")  ; target
         "* TODO %^{Todo} %(org-set-tags)  :errands:\n:PROPERTIES:\n:Created: %U\n:END:\n%i\n%?"  ; template
         :prepend t        ; properties
         :empty-lines 1    ; properties
         :created t        ; properties
         :kill-buffer t)   ; properties

        ;; To capture things regarding my course
        ("c"               ; key
         "Courses"         ; name
         entry             ; type
         (file+headline "~/Dropbox/org/phd.org" "Courses")  ; target
         "* %^{Course} %(org-set-tags)  :courses:\n:PROPERTIES:\n:Created: %U\n:END:\n%i\n%?"  ; template
         :prepend t        ; properties
         :empty-lines 1    ; properties
         :created t        ; properties
         :kill-buffer t)) ; properties
#+END_SRC

   Then, we have to choose where to [[https://orgmode.org/manual/Capture-_002d-Refile-_002d-Archive.html][refile and archive]] too.

#+BEGIN_SRC emacs-lisp
  org-refile-targets '((nil :maxlevel . 9)
                       (org-agenda-files :maxlevel . 9))
  org-refile-use-outline-path t
  org-outline-path-complete-in-steps nil
#+END_SRC

***** End of =setq=

#+BEGIN_SRC emacs-lisp
     )
#+END_SRC

**** Change =org-directory= location
   And ensure the folder exist.

   #+BEGIN_SRC emacs-lisp
     (setq org-directory "~/Dropbox/org")
     (unless (file-exists-p org-directory)
       (make-directory org-directory))
   #+END_SRC

**** Font Settings
;; Increase the size of various headings
   #+BEGIN_SRC emacs-lisp
     ;; (set-face-attribute 'org-document-title nil :font "Cantarell" :weight 'bold :height 1.6)
     ;; (dolist (face '((org-level-1 . 1.4)
     ;;                 (org-level-2 . 1.3)
     ;;                 (org-level-3 . 1.2)
     ;;                 (org-level-4 . 1.15)
     ;;                 (org-level-5 . 1.15)
     ;;                 (org-level-6 . 1.15)
     ;;                 (org-level-7 . 1.15)
     ;;                 (org-level-8 . 1.15)))
     ;;   (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))
   #+END_SRC
Ensure that anything that should be fixed-pitch in Org files appears that way
   #+BEGIN_SRC emacs-lisp
     ;; (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
     ;; (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
     ;; (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
     ;; (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
     ;; (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
     ;; (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
     ;; (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
     ;; (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
     ;; (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
   #+END_SRC
**** Hooks

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook (lambda ()
   #+END_SRC

***** Enable bulleted lists

   #+BEGIN_SRC emacs-lisp
     (org-superstar-mode 1)
     #+END_SRC
***** Enable =writegood-mode=

   #+BEGIN_SRC emacs-lisp
     (writegood-mode)
   #+END_SRC

***** Enable =org-abbrev=

   #+BEGIN_SRC emacs-lisp
     (abbrev-mode 1)
   #+END_SRC

***** Enable =org-indent-mode=

   #+BEGIN_SRC emacs-lisp
     (org-indent-mode)
   #+END_SRC

***** Enable flyspell and rainbow-mode

   #+BEGIN_SRC emacs-lisp
     (when (or (executable-find "aspell")
               (executable-find "ispell")
               (executable-find "hunspell"))
       (flyspell-mode))
     (rainbow-mode)
   #+END_SRC
***** End of hook
   #+BEGIN_SRC emacs-lisp
     ))
   #+END_SRC

***** Evil integration

   #+BEGIN_SRC emacs-lisp
       (after 'evil
         (add-hook 'org-capture-mode-hook 'evil-insert-state))
   #+END_SRC

**** Block Templates
  These templates enable you to type things like <el and then hit Tab to expand
  the template. More documentation can be found at the Org Mode Easy Templates
  documentation page.

   #+BEGIN_SRC emacs-lisp
     ;; This is needed as of Org 9.2
     (require 'org-tempo)

     (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
     (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
     (add-to-list 'org-structure-template-alist '("py" . "src python"))
     (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
     (add-to-list 'org-structure-template-alist '("json" . "src json"))
   #+END_SRC

**** Enable =markdown= export

   #+BEGIN_SRC emacs-lisp
       (require 'ox-md nil t)
   #+END_SRC

*** org-habit
   I have several habits that I also track. In order to take full advantage of
   this feature org-habit has to be required and added to org-modules. A few
   settings are also tweaked for habit mode to make the tracking a little more
   palatable. The most significant of these is org-habit-graph-column. This
   specifies where the graph should start. The default is too low and cuts off a
   lot, so I start it at 80 characters.

   #+BEGIN_SRC emacs-lisp
     (require 'org)
     (require 'org-install)
     (require 'org-habit)
     (add-to-list 'org-modules "org-habit")
     (setq org-habit-preceding-days 7
           org-habit-following-days 1
           org-habit-graph-column 80
           org-habit-show-habits-only-for-today t
           org-habit-show-all-today t)
   #+END_SRC

*** org-babel
   org-babel is a feature inside of org-mode that makes this document possible.
   It allows for embedding languages inside of an org-mode document with all the
   proper font-locking. It also allows you to extract and execute code. It isn't
   aware of Clojure by default, so the following sets that up.

   #+BEGIN_SRC emacs-lisp
     (require 'ob)
   #+END_SRC

**** Default languages accepted

   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((shell      . t)
        (js         . t)
        (emacs-lisp . t)
        (ditaa      . t)
        (perl       . t)
        (clojure    . t)
        (python     . t)
        (ruby       . t)
        (dot        . t)
        (css        . t)
        (C          . t)
        (plantuml   . t)))
   #+END_SRC

**** Graphviz support

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-src-lang-modes (quote ("dot". graphviz-dot)))
   #+END_SRC

**** PlantUML support

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))

     (setq org-plantuml-jar-path
             (concat user-emacs-directory "extern/org/plantuml.jar"))
   #+END_SRC

**** ditaa support
   There's no substitute for real drawings, but it's nice to be able to sketch
   things out and produce a picture right from org-mode. This sets up ditaa for
   execution from inside a babel block.

   #+BEGIN_SRC emacs-lisp
     (setq org-ditaa-jar-path
           (concat user-emacs-directory "extern/org/ditaa0_9.jar"))
   #+END_SRC

**** Just Evaluate It
   I'm normally fine with having my code automatically evaluated.

   #+BEGIN_SRC emacs-lisp
     (setq org-confirm-babel-evaluate nil)
   #+END_SRC

**** Display inline image after execution

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-babel-after-execute-hook (lambda ()
                                               (condition-case nil
                                                   (org-display-inline-images)
                                                 (error nil)))
               'append)
   #+END_SRC

*** org-abbrev

   #+BEGIN_SRC emacs-lisp
     (define-skeleton skel-org-block-elisp
       "Insert an emacs-lisp block"
       ""
       "#+begin_src emacs-lisp\n"
       _ - \n
       "#+end_src\n")

     (define-abbrev org-mode-abbrev-table "elsrc" "" 'skel-org-block-elisp)

     (define-skeleton skel-org-block-js
       "Insert a JavaScript block"
       ""
       "#+begin_src js\n"
       _ - \n
       "#+end_src\n")

     (define-abbrev org-mode-abbrev-table "jssrc" "" 'skel-org-block-js)

     (define-skeleton skel-header-block
       "Creates my default header"
       ""
       "#+TITLE: " str "\n"
       "#+AUTHOR: Fikri Pribadi\n"
       "#+EMAIL: \n"
       "#+OPTIONS: toc:3 num:nil\n"
       "#+STYLE: <link rel=\"stylesheet\" type=\"text/css\" href=\"http://thomasf.github.io/solarized-css/solarized-light.min.css\" />\n")

     (define-abbrev org-mode-abbrev-table "sheader" "" 'skel-header-block)

     (define-skeleton skel-org-html-file-name
       "Insert an HTML snippet to reference the file by name"
       ""
       "#+HTML: <strong><i>"str"</i></strong>")

     (define-abbrev org-mode-abbrev-table "fname" "" 'skel-org-html-file-name)
   #+END_SRC

*** Bindings
    :PROPERTIES:
    :CUSTOM_ID: orgmode-key-binding
    :END:
   #+TBLNAME: org_keys
      | Combo | Description                                                  | Command         |
      |-------+--------------------------------------------------------------+-----------------|
      | C-c c | Capture and store note quickly                               | 'org-capture    |
      | C-c a | Display Org agenda                                           | 'org-agenda     |
      | C-c l | Correctly insert links into org files                        | 'org-store-link |
      | C-c b | iswitchb-like interface to switch to and between Org buffers | 'org-iswitchb   |
**** Links: [[Org Mode Bindings][here]].                                     :ignore:
*** Evil Binding
    :PROPERTIES:
    :CUSTOM_ID: evil-org-binding
    :END:
   #+TBLNAME: evil_org_keys
      | Combo   | Mode             | Evil Mode | Desc | Command                                                |
      | z c     | org-mode-map     | normal    |      | 'outline-hide-subtree                                  |
      | RET     | org-mode-map     | normal    |      | 'org-open-at-point                                     |
      | s-v     | org-mode-map     | insert    |      | 'org-cliplink                                          |
      | -       | org-mode-map     | normal    |      | 'org-cycle-list-bullet                                 |
      | C-c .   | org-mode-map     | insert    |      | '(lambda () (interactive) (org-time-stamp-inactive t)) |
      | C-e     | org-mode-map     | normal    |      | 'org-edit-src-code                                     |
      | Q       | org-src-mode-map | normal    |      | 'org-edit-src-abort                                    |
      | >       | org-mode-map     | normal    |      | 'org-metaright                                         |
      | <       | org-mode-map     | normal    |      | 'org-metaleft                                          |
      | C->     | org-mode-map     | normal    |      | 'org-demote-subtree                                    |
      | C-<     | org-mode-map     | normal    |      | 'org-promote-subtree                                   |
      | SPC k   | org-mode-map     | normal    |      | 'outline-up-heading                                    |
      | SPC j j | org-mode-map     | normal    |      | 'outline-next-heading                                  |
      | 0       | org-mode-map     | normal    |      | 'evil-digit-argument-or-evil-beginning-of-line         |
      | M-k     | org-mode-map     | normal    |      | 'org-metaup                                            |
      | M-j     | org-mode-map     | normal    |      | 'org-metadown                                          |
      | K       | org-mode-map     | normal    |      | 'org-edit-special                                      |
      | TAB     | org-mode-map     | normal    |      | 'org-cycle                                             |

**** Links: [[Evil Org Bindings][Evil Org Bindings]]                                     :ignore:
** PDFTools
   [[https://github.com/politza/pdf-tools][pdf-tools]] allows you to read and annotate PDF documents in Emacs.
   It require certain setting to configure in the OS to make it work, so
   be sure to read the github page for installation procedure.

*** Settings
   Automatically annotate highlights

   #+begin_src emacs-lisp
     (setq pdf-annot-activate-created-annotations t)
   #+end_src

   Turn off cua so copy works

   #+begin_src emacs-lisp
     (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
   #+end_src

   More fine grained zooming with + and - than the default 25%, so set it to 10%

   #+begin_src emacs-lisp
     (setq pdf-view-resize-factor 1.1)
   #+end_src

*** Evil-mode
   Set =evil-mode= initial state to normal mode and disable insert mode. Mostly
   taken from [[https://github.com/emacs-evil/evil-collection][evil-collection]]

   #+begin_src emacs-lisp
     (autoload 'pdf-view-next-line-or-next-page "pdf-view.el" nil t)
     (autoload 'pdf-view-previous-line-or-previous-page "pdf-view.el" nil t)
     (autoload 'pdf-view-goto-page "pdf-view.el" nil t)
     (autoload 'pdf-view-last-page "pdf-view.el" nil t)
     (autoload 'pdf-view-first-page "pdf-view.el" nil t)
     (autoload 'pdf-view-midnight-minor-mode "pdf-view.el" nil t)
     (evil-set-initial-state 'pdf-view-mode 'normal)

     (defun qq-pdf-view-next-line-or-next-page (&optional count)
        "'evil' wrapper include a count argument to `pdf-view-next-line-or-next-page'"
          (interactive "P")
            (if count
                   (dotimes (_ count nil)
                      (pdf-view-next-line-or-next-page 1))
                       (pdf-view-next-line-or-next-page 1)))

      (defun qq-pdf-view-previous-line-or-previous-page (&optional count)
         "'evil' wrapper include a count argument to `pdf-view-previous-line-or-previous-page'"
           (interactive "P")
             (if count
                    (dotimes (_ count nil)
                      (pdf-view-previous-line-or-previous-page 1))
                        (pdf-view-previous-line-or-previous-page 1)))

      (defun qq-pdf-view-goto-page (&optional page)
         "`evil' wrapper around `pdf-view-last-page'."
           (interactive "P")
             (if page
                    (pdf-view-goto-page page)
                        (pdf-view-last-page)
                            (image-eob)))

      (defun qq-pdf-view-goto-first-page (&optional page)
         "`evil' wrapper around `pdf-view-first-page'."
           (interactive "P")
             (if page
                    (pdf-view-goto-page page)
                        (pdf-view-first-page)
                            (image-bob)))
   #+end_src

*** Midnight mode
   Additional midnite mode taken from [[https://babbagefiles.blogspot.com/2017/11/more-pdf-tools-tricks.html][here]]

   #+begin_src emacs-lisp
     ;(add-hook 'pdf-view-mode-hook (lambda ()
     ;                                (pdf-view-midnight-minor-mode))) ; automatically turns on midnight-mode for pdfs

     (setq pdf-view-midnight-colors '("#ff9900" . "#0a0a12" )) ; set the amber profile as default (see below)

     (defun qq/pdf-no-filter ()
       "View pdf without colour filter."
       (interactive)
       (pdf-view-midnight-minor-mode -1)
       )

     ;; change midnite mode colours functions
     (defun qq/pdf-midnite-original ()
       "Set pdf-view-midnight-colors to original colours."
       (interactive)
       (setq pdf-view-midnight-colors '("#839496" . "#002b36" )) ; original values
       (pdf-view-midnight-minor-mode)
       )

     (defun qq/pdf-midnite-amber ()
       "Set pdf-view-midnight-colors to amber on dark slate blue."
       (interactive)
       (setq pdf-view-midnight-colors '("#ff9900" . "#0a0a12" )) ; amber
       (pdf-view-midnight-minor-mode)
       )

     (defun qq/pdf-midnite-green ()
       "Set pdf-view-midnight-colors to green on black."
       (interactive)
       (setq pdf-view-midnight-colors '("#00B800" . "#000000" )) ; green
       (pdf-view-midnight-minor-mode)
       )
   #+end_src

*** Org-mode links
   Out of the box, org-mode doesn't know about pdf-tools. However, you can add support
   for opening org links to pdf files with =org-pdfview=

   #+begin_src emacs-lisp
     (after 'org '(require 'org-pdfview))
     (add-to-list 'org-file-apps
                   '("\\.pdf\\'" . (lambda (file link)
                                   (org-pdfview-open link))))
   #+end_src
   Doing this will provide a new completion target for adding links via =C-c= =C-l=, =pdfview:=,
   with support for jumping to specific pages.

*** Local keybindings
    :PROPERTIES:
    :CUSTOM_ID: pdftools-bindings
    :END:
   #+TBLNAME: pdftools-evil-keys
      | Combo            | Mode              | Evil Mode | Description  | Command                                     |
      | h                | pdf-view-mode-map | normal    | Annotation   | 'pdf-annot-add-highlight-markup-annotation  |
      | t                | pdf-view-mode-map | normal    |              | 'pdf-annot-add-text-annotation              |
      | D                | pdf-view-mode-map | normal    |              | 'pdf-annot-delete                           |
      | C-F              | pdf-view-mode-map | normal    | Motion       | 'pdf-view-scroll-up-or-next-page            |
      | C-B              | pdf-view-mode-map | normal    |              | 'pdf-view-scroll-down-or-previous-page      |
      | gg               | pdf-view-mode-map | normal    |              | 'qq-pdf-view-goto-first-page                |
      | gt               | pdf-view-mode-map | normal    |              | 'pdf-view-goto-page                         |
      | G                | pdf-view-mode-map | normal    |              | 'qq-pdf-view-goto-page                      |
      | RET              | pdf-view-mode-map | normal    |              | 'pdf-view-scroll-up-or-next-page            |
      | DEL              | pdf-view-mode-map | normal    |              | 'pdf-view-scroll-down-or-previous-page      |
      | j                | pdf-view-mode-map | normal    |              | 'qq-pdf-view-next-line-or-next-page         |
      | k                | pdf-view-mode-map | normal    |              | 'qq-pdf-view-previous-line-or-previous-page |
      | gr               | pdf-view-mode-map | normal    | Refresh      | 'pdf-view-revert-buffer                     |
      | ma               | pdf-view-mode-map | normal    | Dark mode    | 'qq/pdf-midnite-amber                       |
      | mg               | pdf-view-mode-map | normal    |              | 'qq/pdf-midnite-green                       |
      | mo               | pdf-view-mode-map | normal    |              | 'qq/pdf-midnite-original                    |
      | mx               | pdf-view-mode-map | normal    |              | 'qq/pdf-no-filter                           |
      | zp               | pdf-view-mode-map | normal    | Printer mode | 'pdf-view-printer-minor-mode                |
      | o                | pdf-view-mode-map | normal    | Show outline | 'pdf-outline                                |
      | q                | pdf-view-mode-map | normal    |              | 'next-buffer                                |
      | Q                | pdf-view-mode-map | normal    |              | 'kill-this-buffer                           |
      | fh               | pdf-view-mode-map | normal    | Page layout  | 'pdf-view-fit-height-to-window              |
      | fp               | pdf-view-mode-map | normal    |              | 'pdf-view-fit-page-to-window                |
      | fw               | pdf-view-mode-map | normal    |              | 'pdf-view-fit-width-to-window               |
      | +                | pdf-view-mode-map | normal    | Zoom         | 'pdf-view-enlarge                           |
      | zi               | pdf-view-mode-map | normal    |              | 'pdf-view-enlarge                           |
      | =                | pdf-view-mode-map | normal    |              | 'pdf-view-enlarge                           |
      | -                | pdf-view-mode-map | normal    |              | 'pdf-view-shrink                            |
      | zo               | pdf-view-mode-map | normal    |              | 'pdf-view-shrink                            |
      | 0                | pdf-view-mode-map | normal    |              | 'pdf-view-scale-reset                       |
      | z0               | pdf-view-mode-map | normal    |              | 'pdf-view-scale-reset                       |
      | <C-down-mouse-1> | pdf-view-mode-map | normal    | Mark         | 'pdf-view-mouse-extend-region               |
      | <M-down-mouse-1> | pdf-view-mode-map | normal    |              | 'pdf-view-mouse-set-region-rectangle        |
      | <down-mouse-1>   | pdf-view-mode-map | normal    |              | 'pdf-view-mouse-set-region                  |
      | y                | pdf-view-mode-map | visual    |              | 'pdf-view-kill-ring-save                    |
      | /                | pdf-view-mode-map | normal    | Search       | 'isearch-forward                            |
      | ?                | pdf-view-mode-map | normal    |              | 'isearch-backward                           |
      | n                | pdf-view-mode-map | normal    |              | 'isearch-repeat-forward                     |
      | N                | pdf-view-mode-map | normal    |              | 'isearch-repeat-backward                    |
      | ss               | pdf-view-mode-map | normal    | Occur        | 'pdf-occur                                  |

   #+TBLNAME: pdftools-keys
      | Combo | Mode              | Description | Command |
      | SPC   | pdf-view-mode-map |             | nil     |
      | S-SPC | pdf-view-mode-map |             | nil     |
**** Links: [[PDFTools Bindings][here]].                                     :ignore:
** Projectile
   Project interaction module for Emacs.

   [[https://github.com/bbatsov/projectile]]

*** Settings
   #+BEGIN_SRC emacs-lisp
     (projectile-global-mode)
     (setq projectile-tags-command "gtags")
     (setq projectile-enable-caching t)
     (setq projectile-git-submodule-command nil)
     ;; global ignores
     (add-to-list 'projectile-globally-ignored-files ".tern-port")
     (add-to-list 'projectile-globally-ignored-files "GTAGS")
     (add-to-list 'projectile-globally-ignored-files "GPATH")
     (add-to-list 'projectile-globally-ignored-files "GRTAGS")
     (add-to-list 'projectile-globally-ignored-files "GSYMS")
     (add-to-list 'projectile-globally-ignored-files ".DS_Store")
     (add-to-list 'projectile-globally-ignored-files ".clang-format")
     (add-to-list 'projectile-globally-ignored-files ".clang-tidy")
     (add-to-list 'projectile-globally-ignored-files ".gitignore")
     (add-to-list 'projectile-globally-ignored-files ".gitattributes")
     (add-to-list 'projectile-globally-ignored-directories ".cquery_cached_index")
   #+END_SRC

*** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: evil-projectile-binding
    :END:
   #+TBLNAME: evil_projectile_keys
      | Combo | Description | Command                                                                    |
      |-------+-------------+----------------------------------------------------------------------------|
      | f a   |             | (lambda () (interactive) (call-interactively 'projectile-find-other-file)) |
      | ,     |             | 'projectile-find-file                                                      |
**** Links: [[Evil Projectile Bindings][Evil Projectile Bindings]]                                      :ignore:
** Persp-mode
*** Init
   #+begin_src emacs-lisp
    (with-eval-after-load "persp-mode-autoloads"
      (setq wg-morph-on nil) ;; switch off animation
      (setq persp-autokill-buffer-on-remove 'kill-weak)
      (add-hook 'window-setup-hook #'(lambda () (persp-mode 1))))
   #+end_src
*** Settings
   #+begin_src emacs-lisp
     (setq wg-morph-on nil ;; switch off animation
           persp-autokill-buffer-on-remove 'kill-weak
           persp-auto-save-opt 0
           persp-auto-resume-time 0
           persp-set-last-persp-for-new-frames nil
           persp-keymap-prefix (kbd "C-c o")
           persp-nil-name "Default"
           persp-nil-hidden t
           persp-add-buffer-on-find-file t
           persp-add-buffer-on-after-change-major-mode t
           persp-hook-up-emacs-buffer-completion t)
   #+end_src
*** Ignore temporary buffers
   #+begin_src emacs-lisp
     (add-hook 'persp-common-buffer-filter-functions
               (lambda (b) (or (string-prefix-p "*" (buffer-name b))
                               (string-prefix-p "magit" (buffer-name b)))))
   #+end_src
*** Rename main perspective

   #+begin_src emacs-lisp
     (setq persp-nil-name "Home")
   #+end_src

*** Create save folder if it doesn't exist

   #+begin_src emacs-lisp
     (unless (file-exists-p persp-save-dir)
       (make-directory persp-save-dir))
   #+end_src

*** Load persp-mode after init
   #+begin_src emacs-lisp
     (with-eval-after-load "persp-mode"
       (setq wg-morph-on nil)
       (add-hook 'after-init-hook #'(lambda () (persp-mode 1))))
     (require 'persp-mode)
   #+end_src

*** Buffer lists
   #+begin_src emacs-lisp
     (with-eval-after-load "persp-mode"
       (substitute-key-definition #'switch-to-buffer #'persp-switch-to-buffer global-map)
       (substitute-key-definition #'kill-buffer #'persp-kill-buffer global-map))
   #+end_src

*** Keybindings
    :PROPERTIES:
    :CUSTOM_ID: persp-key-binding
    :END:
   #+TBLNAME: persp_combo
      | Combo | Description | Command                     |
      |-------+-------------+-----------------------------|
      | M-2   |             | 'persp-next                 |
      | M-1   |             | 'persp-prev                 |
      | M-e   |             | 'persp-add-new              |
      | M-b   |             | 'persp-load-state-from-file |
      | M-w   |             | 'persp-save-state-to-file   |
**** Links: [[Persp-mode Bindings][here]]                                     :ignore:
** Yasnippet

   #+begin_src emacs-lisp
     (yas-reload-all)
     (add-hook 'prog-mode-hook #'yas-minor-mode)
     (add-hook 'org-mode-hook #'yas-minor-mode)
   #+end_src

** Shell/Term/Fasd
   Launch shell/term within emacs

*** Add color to shell & eshell
   #+BEGIN_SRC emacs-lisp
     (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
     (add-hook 'eshell-preoutput-filter-functions
               'ansi-color-filter-apply)
   #+END_SRC

*** Highlight some text based on regexp (useful to see "OK" or warnings):
   #+BEGIN_SRC emacs-lisp
     ;(add-hook 'shell-mode-hook (lambda () (highlight-regexp "\\[OK\\]" "hi-green-b")))
   #+END_SRC

*** Make URLs clickable
   #+BEGIN_SRC emacs-lisp
     (add-hook 'shell-mode-hook (lambda () (goto-address-mode )))
   #+END_SRC

*** Make file paths clickable
   Every line representing a path to a file will be colorized and made
   clickable, so that you can jump to that file and that line, like in
   compilation-mode (specially useful when compiling a program or running
   tests):

   #+BEGIN_SRC emacs-lisp
     (add-hook 'shell-mode-hook 'compilation-shell-minor-mode)
   #+END_SRC

*** Shell completion with a nice menu à la zsh
   #+BEGIN_SRC emacs-lisp
     (add-hook 'shell-mode-hook #'company-mode)
     (define-key shell-mode-map (kbd "TAB") #'company-manual-begin)
   #+END_SRC

*** Change directory with =ido= and =fasd=
   In shell-mode, use ido-completion to cd to any directory already visited
   once. Choices are based on frequency and recency. We use the fasd command
   line utility: [[https://github.com/clvv/fasd]]

   #+BEGIN_SRC emacs-lisp
     (require 'fasd-shell)
     (add-hook 'shell-mode-hook 'fasd-shell-mode)
   #+END_SRC

*** Find files with fasd
   An Emacs extension to integrate Fasd.

   [[https://github.com/steckerhalter/emacs-fasd]]

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-h C-/") 'fasd-find-file)
     (global-fasd-mode 1)
     (setq fasd-enable-initial-prompt nil)  ;; don't ask for first query but fire fuzzy completion straight away.
   #+END_SRC

*** Shared and persistent history
   #+BEGIN_SRC emacs-lisp
     (add-hook 'shell-mode-hook 'my-shell-mode-hook)
     (defun my-shell-mode-hook ()
       (setq comint-input-ring-file-name "~/.bash_history")  ;; or bash_history
       (comint-read-input-ring t))
   #+END_SRC

*** shell-here
   Open a shell buffer in (or relative to) default-directory, e.g. whatever
   directory the current buffer is in. If you have projectile or
   find-file-in-project installed, you can also move around relative to the root
   of the current project.

   [[https://github.com/ieure/shell-here]]

   #+BEGIN_SRC emacs-lisp
     (define-key (current-global-map) "\C-c!" 'shell-here)
   #+END_SRC

*** ansi-term
   =ansi-term= is a terminal emulator written in Emacs Lisp. It’s more like a
   traditional terminal emulator than =eshell=.

**** Force ansi-term to be UTF-8 after it launches

   #+BEGIN_SRC emacs-lisp
     (defadvice ansi-term (after bw/advise-ansi-term-coding-system activate)
       (set-process-coding-system 'utf-8-unix 'utf-8-unix))
   #+END_SRC

**** When exiting a terminal buffer (either with exit or EOF), automatically kill the buffer

   #+BEGIN_SRC emacs-lisp
     (defadvice term-sentinel (around bw/advice-term-sentinel (proc msg) activate)
       (if (memq (process-status proc) '(signal exit))
           (let ((buffer (process-buffer proc)))
             ad-do-it
             (kill-buffer buffer))
         ad-do-it))
     (ad-activate 'term-sentinel)
   #+END_SRC
**** Stop asking which shell program to use

   #+begin_src emacs-lisp
     (defadvice ansi-term (before force-bash)
       (interactive (list qq/shell-prog)))
     (ad-activate 'ansi-term)
   #+end_src
**** Make pasting work

   #+begin_src emacs-lisp
     (defun qq/term-paste (&optional string)
      (interactive)
      (process-send-string
       (get-buffer-process (current-buffer))
       (if string string (current-kill 0))))
   #+end_src
**** Enable URL clicking, disable yasnippet & proper color

   #+begin_src emacs-lisp
     (defun qq/term-hook ()
       (goto-address-mode)
       (setq yas-dont-activate t)
       (define-key term-raw-map "\C-y" 'qq/term-paste)
       (evil-define-key 'normal term-raw-map (kbd "p") 'qq/term-paste)

       ;(let ((base03  "#002b36")
       ;      (base02  "#073642")
       ;      (base01  "#586e75")
       ;      (base00  "#657b83")
       ;      (base0   "#839496")
       ;      (base1   "#93a1a1")
       ;      (base2   "#eee8d5")
       ;      (base3   "#fdf6e3")
       ;      (yellow  "#b58900")
       ;      (orange  "#cb4b16")
       ;      (red     "#dc322f")
       ;      (magenta "#d33682")
       ;      (violet  "#6c71c4")
       ;      (blue    "#268bd2")
       ;      (cyan    "#2aa198")
       ;      (green   "#859900"))
       ;  (setq ansi-term-color-vector
       ;        (vconcat `(unspecified ,base02 ,red ,green ,yellow ,blue
       ;                               ,magenta ,cyan ,base2))))
     )
     (add-hook 'term-mode-hook 'qq/term-hook)
   #+end_src
**** Improved term mode usage
   From: [[https://sourceforge.net/u/gavenkoa/dot-emacs/ci/default/tree/.emacs-my][Oleksandr Gavenko (aka gavenkoa) / Hg-Dot-Emacs / {ec4a06} /.emacs-my]]

   #+begin_src emacs-lisp
     (setq term-buffer-maximum-size (lsh 1 14))
     (autoload 'term-send-raw-string "term.el" nil t)
     (autoload 'term-send-string "term.el" nil t)

     (eval-after-load 'term
       '(progn
         (defun my-term-send-delete-word-forward () (interactive) (term-send-raw-string "\ed"))
         (defun my-term-send-delete-word-backward () (interactive) (term-send-raw-string "\e\C-h"))
         (define-key term-raw-map [C-delete] 'my-term-send-delete-word-forward)
         (define-key term-raw-map [C-backspace] 'my-term-send-delete-word-backward)
         (defun my-term-send-forward-word () (interactive) (term-send-raw-string "\ef"))
         (defun my-term-send-backward-word () (interactive) (term-send-raw-string "\eb"))
         (define-key term-raw-map [C-left] 'my-term-send-backward-word)
         (define-key term-raw-map [C-right] 'my-term-send-forward-word)
         (defun my-term-send-m-right () (interactive) (term-send-raw-string "\e[1;3C"))
         (defun my-term-send-m-left () (interactive) (term-send-raw-string "\e[1;3D"))
         (define-key term-raw-map [M-right] 'my-term-send-m-right)
         (define-key term-raw-map [M-left] 'my-term-send-m-left)
         ))

     (defun my-term-mode-hook ()
       (goto-address-mode 1))
     (add-hook 'term-mode-hook #'my-term-mode-hook)
   #+end_src

   #+RESULTS:
   | (closure (t) nil (define-key term-mode-map (kbd C-c C-j) 'term-char-mode) (define-key term-raw-map (kbd C-c C-j) 'term-line-mode)) | my-term-mode-hook | qq/term-hook | (closure (t) nil (setq indicate-empty-lines nil indicate-buffer-boundaries nil)) |

*** Serial terminal
**** For serial port, default to 115200 b/s instead of 9600

   #+BEGIN_SRC emacs-lisp
     (setq serial-speed-history
           '("115200" ;; Given twice because 115200 b/s is the most common speed
             "1200" "2400" "4800" "9600" "14400" "19200"
             "28800" "38400" "57600" "115200"))
   #+END_SRC

**** Calling function
   =eterm-color= is the TERM used by Emacs when using =M-x term RET=

   On Debian-based systems you administer, you can =apt-get install
   ncurses-term=, which includes /usr/share/terminfo/e/eterm-color.

   #+BEGIN_SRC emacs-lisp
     (defun qq/serial-term-1 ()
       (interactive)
       (serial-term qq/serial-port1 115200)
       (term-send-string (get-buffer-process (current-buffer))
                         "export TERM=eterm-color\nclear\n"))
     (defun qq/serial-term-2 ()
       (interactive)
       (serial-term "/dev/ttyUSB1" 115200)
       (term-send-string (get-buffer-process (current-buffer))
                         "export TERM=eterm-color\nclear\n"))
   #+END_SRC

**** Toggle u-boot auto stop
   Usefull if there are more than one serial terminal open. From [[https://www.fitzsim.org/blog/?p=44][here]].

   First, a variable to to keep track of whether the mode is enabled or not.

   #+BEGIN_SRC emacs-lisp
     ;; Detect U-Boot autoboot prompt and stop it.
     (defvar u-boot-stop-autoboot-mode nil
       "Non-nil if term-mode should prevent U-Boot from autobooting.
     Use the function u-boot-toggle-stop-autoboot-mode to toggle.")
   #+END_SRC

   Then the advice itself. It jacks into the term-emulate-terminal process
   filter to detect the U-Boot autoboot prompt, then sends a newline in
   response.

   #+BEGIN_SRC emacs-lisp
     (defadvice term-emulate-terminal
       (before u-boot-maybe-stop-autoboot activate disable)
       (with-current-buffer (process-buffer proc)
         (when (string-match "Hit any key to stop autoboot:" str)
           (message "U-Boot autoboot stopped in buffer %s"
                    (buffer-name (current-buffer)))
           (term-send-raw-string "\n"))))
   #+END_SRC

   And finally a function to toggle the advice on and off.

   #+BEGIN_SRC emacs-lisp
     (defun u-boot-toggle-stop-autoboot-mode ()
       "Toggle whether or not term-mode should interrupt U-Boot autoboot."
       (interactive)
       (if u-boot-stop-autoboot-mode
           (progn
             (ad-disable-advice
              'term-emulate-terminal 'before 'u-boot-maybe-stop-autoboot)
             (ad-update 'term-emulate-terminal)
             (setq u-boot-stop-autoboot-mode nil)
             (message "U-Boot autoboot will not be interrupted"))
         (progn
           (ad-enable-advice
            'term-emulate-terminal 'before 'u-boot-maybe-stop-autoboot)
           (ad-activate 'term-emulate-terminal)
           (setq u-boot-stop-autoboot-mode t)
           (message "U-Boot autoboot will be interrupted"))))
   #+END_SRC

**** Hook to update window size
   Pre-condition is to be in a serial term process buffer

   #+BEGIN_SRC emacs-lisp
     (defun qq/serial-term-update-window-size ()
       "Change process window size."
       (interactive)
       ;; effectively calls ioctl(TIOCSWINSZ ...)
       (set-process-window-size (get-buffer-process (current-buffer))
                                (window-height)
                                (window-width))
       (toggle-truncate-lines 1)
       ;; this is sad but we can't actually do this:
       ;;     (signal-process (get-buffer-process (current-buffer)) 'winch)
       ;; See Info node `(elisp)Serial Ports':
       ;;     ...
       ;;     A serial process object has no process ID, however, and you can't send
       ;;     signals to it, and the status codes are different from other types of
       ;;     processes.
       ;;
       ;; telling the shell to monitor the window size doesn't work either
       ;;     shopt -s checkwinsize
       ;; http://unix.stackexchange.com/a/61608/88925
       ;;
       ;; What seems to work is to call 'resize ; clear' explicitely on the shell


       ;; in case of error one can try to use stty:
       ;; sudo stty -F/dev/ttyS0 cols 180
       )
   #+END_SRC

   Add this hook as buffer local, so it runs once per window as opposed to
   once per frame

   -- [[http://stackoverflow.com/a/11255996/951426]]

   #+BEGIN_SRC emacs-lisp
     (defun qq/serial-term-mode-hook ()
       (when (and (derived-mode-p 'term-mode)
                  (eq (process-type nil) 'serial))
         (add-hook 'window-configuration-change-hook
                   'qq/serial-term-update-window-size nil t)))

     (add-hook 'shell-mode-hook 'qq/serial-term-mode-hook)
   #+END_SRC

**** Remap =ESC= key

   #+BEGIN_SRC emacs-lisp
     (add-hook 'term-mode-hook
               (lambda ()
                 (define-key term-mode-map (kbd "C-c C-j") 'term-char-mode)
                 (define-key term-raw-map (kbd "C-c C-j") 'term-line-mode)))
   #+END_SRC

** VTerm
*** Settings
   #+BEGIN_SRC emacs-lisp
     (autoload 'multi-vterm "multi-vterm.el" nil t)
     (setq vterm-kill-buffer-on-exit t)
   #+END_SRC

*** Evil Binding
    :PROPERTIES:
    :CUSTOM_ID: global-vterm-binding
    :END:
   #+TBLNAME: vterm_mode_keys
      | Combo | Description | Command           |
      | C-n   |             | 'multi-vterm-next |
      | C-p   |             | 'multi-vterm-prev |
      | C-y   |             | 'vterm-yank       |
      | s-v   |             | 'vterm-yank       |
**** Links: [[Vterm Bindings][Vterm Bindings]]                                     :ignore:
** Highlight-indent-guides
   Add highlight column guides on indentation

   [[https://github.com/abo-abo/swiper]]

*** Settings
   #+BEGIN_SRC emacs-lisp
     (setq highlight-indent-guides-method 'character)
   #+END_SRC

** Which key
   Show keybindings.

   [[https://github.com/justbur/emacs-which-key]]

*** Init
   #+BEGIN_SRC emacs-lisp
     (require 'which-key)
     (which-key-mode)
     ;(which-key-setup-side-window-right-bottom)
     ;(which-key-setup-minibuffer)

     (set-face-attribute 'which-key-local-map-description-face nil :weight 'bold)

     ;(setq which-key-special-keys nil)
     (setq which-key-popup-type 'side-window)
     ;(setq which-key-popup-type 'frame)
     (setq which-key-popup-type 'minibuffer)
     (setq which-key-max-display-columns 5)
     ; max width of which-key frame: number of columns (an integer)
     ;(setq which-key-frame-max-width 140)
     ; max height of which-key frame: number of lines (an integer)
     ;(setq which-key-frame-max-height 120)
     ;this is supposed to improve speed with custom fonts
     (setq which-key-allow-imprecise-window-fit t)
     (setq which-key-sort-order 'which-key-local-then-key-order)
     ;just so you can read your hyrda function titles in C-m m
     ;(setq-default which-key-show-docstrings nil)
     (setq-default which-key-max-description-length 50)
   #+END_SRC

   location of which-key window. valid values: top, bottom, left, right,
   or a list of any of the two. If it's a list, which-key will always try
   the first location first. It will go to the second location if there is
   not enough room to display any keys in the first location
   #+BEGIN_SRC emacs-lisp
     (setq which-key-side-window-location 'bottom)
   #+END_SRC

   max width of which-key window, when displayed at left or right.
   valid values: number of columns (integer), or percentage out of current
   frame's width (float larger than 0 and smaller than 1)
   #+BEGIN_SRC emacs-lisp
     (setq which-key-side-window-max-width 0.33)
   #+END_SRC

   max height of which-key window, when displayed at top or bottom.
   valid values: number of lines (integer), or percentage out of current
   frame's height (float larger than 0 and smaller than 1)
   #+BEGIN_SRC emacs-lisp
     (setq which-key-side-window-max-height 0.33)
   #+END_SRC

*** Replacements for how KEY is replaced when which-key displays
   KEY → FUNCTION
   Eg: After "C-c", display "right → winner-redo" as "▶ → winner-redo"

   #+BEGIN_SRC emacs-lisp
     (setq which-key-key-replacement-alist
           '(("<\\([[:alnum:]-]+\\)>" . "\\1")
             ("left"                . "◀")
             ("right"               . "▶")
             ("up"                  . "▲")
             ("down"                . "▼")
             ("delete"              . "DLT") ; delete key
             ("\\`DEL\\'"             . "BS") ; backspace key
             ("next"                . "PgDn")
             ("prior"               . "PgUp")))
   #+END_SRC

*** Use cool unicode characters if available

   #+BEGIN_SRC emacs-lisp
     ;(add-to-list 'which-key-description-replacement-alist '("\\`calc-" . "🖩-"))
   #+END_SRC

*** Change what string to display for a given *complete* key binding
   Eg: After =C-x=, display =8 → +unicode= instead of =8 → +prefix=

   #+BEGIN_SRC emacs-lisp
     (which-key-add-key-based-replacements
       "SPC g"   "git/magit"
       "SPC b"   "buffer related"
       "SPC c"   "compile related"
       "SPC e"   "eval related"
       "SPC j"   "evil ace-jump"
       "SPC p"   "projectile related"
       "SPC r"   "serial commands"
       "SPC h"   "help related"
       "SPC i"   "counsel related"
       "SPC t"   "toggling thing"
       "SPC v"   "GUD related"
       "C-x 8"   "unicode"
       "C-x a"   "abbrev/expand"
       "C-x r"   "rect/reg"
       "C-c /"   "engine-mode-map"
       "C-c C-v" "org-babel"
       "C-x 8 0" "ZWS")
   #+END_SRC

** Window numbering mode
   Number window shortcuts for emacs

   [[https://github.com/nschum/window-numbering.el]]

   #+BEGIN_SRC emacs-lisp
;     (window-numbering-mode)
   #+END_SRC

* Languages
** General
Some general settings that should apply to all programming mode. Highlight
=FIXME= and =TODO= so they stand out. Also enable =indent-guide-mode= and
=rainbow-delimiter-mode=

#+begin_src emacs-lisp
    (defun qq/add-watchwords ()
      (font-lock-add-keywords
       nil '(("\\<\\(FIXME\\|TODO\\|NOCOMMIT\\)\\>"
              1 '((:foreground "orange") (:weight bold)) t))))

    (add-hook 'prog-mode-hook
              '(lambda()
                 (display-line-numbers-mode)
                 (qq/add-watchwords)
                 (rainbow-delimiters-mode)
                 (highlight-indent-guides-mode) ; WARNING: if scrolling is slow, turn this off
                 (smart-tabs-insinuate 'c++ 'c 'javascript)
                 ;(color-identifiers-mode t)))   ; WARNING: if scrolling is slow, turn this off
#+end_src

#+begin_src emacs-lisp
     (add-hook 'cmake-mode-hook 'eldoc-cmake-enable)
#+end_src

** Compilation
*** Compilation behaviour
**** Scroll down compilation messages

   #+BEGIN_SRC emacs-lisp
     (setq compilation-scroll-output t)
   #+END_SRC

**** Scroll to first error

   #+BEGIN_SRC emacs-lisp
     (setq compilation-scroll-output 'first-error)
   #+END_SRC

**** Kill compilation without reconfirmation

   #+BEGIN_SRC emacs-lisp
     (setq compilation-always-kill t)
   #+END_SRC

**** Unconditionally save all buffer before compiling

   #+BEGIN_SRC emacs-lisp
     (setq compilation-ask-about-save nil)
   #+END_SRC

*** Custom command

#+BEGIN_SRC emacs-lisp
  (defun qq/c-mode-compile()
    (interactive)
    (setq-local compilation-read-command nil)
    (call-interactively 'compile))

  (defun qq/c-mode-compile-set-command()
    (interactive)
    (setq-local compilation-read-command t)
    (call-interactively 'compile))
#+END_SRC

*** ANSI-escape coloring in compilation-mode
   =M-x compile= has some issues with ansi color codes. This fixes it. Found at [[http://stackoverflow.com/questions/3072648/cucumbers-ansi-colors-messing-up-emacs-compilation-buffer][StackOverflow]]

   #+BEGIN_SRC emacs-lisp
     (require 'ansi-color)
     (defun colorize-compilation-buffer ()
       (let ((inhibit-read-only t))
         (ansi-color-apply-on-region (point-min) (point-max))))
     (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
   #+END_SRC

*** Bury compilation buffer
If compilation is successful namely neither errors nor warnings, the compilation
buffer will disappear after 1 second. Stolen from [[http://stackoverflow.com/questions/11043004/emacs-compile-buffer-auto-close/11059012#11059012][stackoverflow]]

   #+BEGIN_SRC emacs-lisp
     (defun qq/bury-compile-buffer-if-successful (buffer string)
       "Bury a compilation buffer if succeeded without warnings "
       (alert string :title (buffer-name buffer))
       (if (and
            (string-match "compilation" (buffer-name buffer))
            (string-match "finished" string)
            (not
             (with-current-buffer buffer
               (search-forward "warning" nil t))))
           (run-with-timer 1 nil
                           (lambda (buf)
                             (bury-buffer buf)
                             (delete-window (get-buffer-window (get-buffer "*compilation*"))))
                           buffer)))
     (add-hook 'compilation-finish-functions 'qq/bury-compile-buffer-if-successful)
   #+END_SRC

** C and its derivative
*** Common
   The =c-mode-common-hook= is a general hook that work on all C-like languages
   (C, C++, Java, etc...). I like being able to quickly compile using =C-c C-c=
   (instead of =M-x compile=).

   #+BEGIN_SRC emacs-lisp
     (defun qq/c-mode-init ()
       (push '(?\( . ("(" . ")")) evil-surround-pairs-alist)
       (push '(?{ . ("{" . "}")) evil-surround-pairs-alist)
       (local-set-key (kbd "C-c C-c") 'compile)
       ;; To re-format c code. use C-x h M-C-\ (this puts the region around
       ;; the entire buffer, and then runs the indent-region command).
       (c-set-style "stroustrup")   ; C indenting style
       (c-set-offset 'inline-open 0)
   #+END_SRC

**** Underscore "_" is not a word character
   An underscore "_" is a word character in Vim. This means that word-motions
   like w skip over underlines in a sequence of letters as if it was a letter
   itself. In contrast, in Evil the underscore is often a non-word character
   like operators, e.g. +.

   Modifying its entry in the syntax-table will make the underscore to be
   recognized as word character:

   #+BEGIN_SRC emacs-lisp
     (modify-syntax-entry ?_ "w")
   #+END_SRC

**** Coding style via =clang-format=
   Add hook to =clang-format-buffer= when saving C++ files, only when
   =.clang-formatted= file exist in current folder.

   #+BEGIN_SRC emacs-lisp
     (require 'clang-format)
     (require 'rx)

     (setq clang-format-style "file")
     (setq qq/clang-format-save t)

     ;; Hook function
     (defun clang-format-buffer-smart ()
       "Reformat buffer if .clang-format exists in the projectile root."
       (interactive)
       (when qq/clang-format-save
         (let ((start (if (use-region-p) (region-beginning) (point)))
               (end (if (use-region-p) (region-end) (point)))
               (assumed-filename (if (file-remote-p buffer-file-name)
                                     (concat (getenv "HOME") "/" (file-name-nondirectory buffer-file-name))
                                   buffer-file-name)))
           (clang-format-buffer clang-format-style assumed-filename))))

     ;; Install hook to use clang-format on save
     (add-hook 'before-save-hook 'clang-format-buffer-smart nil t)

     (defun qq/toggle-clang-format-save ()
       "Enable/disable performing clang-format on saving a file"
       (interactive)
       (if qq/clang-format-save
           (progn
             (setq qq/clang-format-save nil)
             (message "Disable performing clang-format on file save"))
         (progn
           (setq qq/clang-format-save t)
           (message "Enable performing clang-format on file save"))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (defun my-clang-format-region ()
       (interactive)
       (let ((start (if (use-region-p) (region-beginning) (point)))
             (end (if (use-region-p) (region-end) (point)))
             (assumed-filename (if (file-remote-p buffer-file-name)
                                   (concat (getenv "HOME") "/" (file-name-nondirectory buffer-file-name))
                                 buffer-file-name)))
         (clang-format-region start end clang-format-style assumed-filename)))
   #+END_SRC
**** Minor modes

   #+BEGIN_SRC emacs-lisp
     (eldoc-mode)
     (ggtags-mode 1)
     (require 'dap-lldb)
     (require 'dap-gdb-lldb)
     (setq dap-auto-configure-features '(sessions locals controls tooltip))

     (dap-mode 1)

     ;; The modes below are optional

     (dap-ui-mode 1)
     ;; enables mouse hover support
     (dap-tooltip-mode 1)
     ;; use tooltips for mouse hover
     ;; if it is not enabled `dap-mode' will use the minibuffer.
     (tooltip-mode 1)
     ;; displays floating panel with debug buttons
     ;; requies emacs 26+
     (dap-ui-controls-mode 1)

     ;; Highlights suspicious C and C++ constructions
     (global-cwarn-mode 1)

     ;; slow
     ;;(flycheck-mode)
     ;;(setq flycheck-gcc-language-standard "c++11")
     ;;(flycheck-select-checker 'c/c++-gcc)
     ;;;(setq flycheck-clang-language-standard "c++11")
     ;;;(setq flycheck-clang-standard-library "libc++")
     ;;;(setq semantic-idle-scheduler-max-buffer-size 0)

     ;(define-key c-mode-map  [(control tab)] 'company-complete)
     ;(define-key c++-mode-map  [(control tab)] 'company-complete)

     ; enable spell check in comment area
     (flyspell-prog-mode)
   #+END_SRC

**** End

   #+BEGIN_SRC emacs-lisp
     )
     (add-hook 'c-mode-hook 'qq/c-mode-init)
     (add-hook 'c++-mode-hook 'qq/c-mode-init)
   #+END_SRC

*** C++
**** Set C++ mode for *.h and *.ipp files (instead of plain-old C mode)

   #+BEGIN_SRC emacs-lisp
     (setq auto-mode-alist (cons '("\\.h$"   . c++-mode) auto-mode-alist))
     (setq auto-mode-alist (cons '("\\.ipp$" . c++-mode) auto-mode-alist))
   #+END_SRC

**** Highlight C++ member function
Highlight only member function calls in =c++-mode=, for examples
Object o;
o.getName();
getName();

Here only o.getName() will get highlighted.

#+begin_src emacs-lisp
  (defface font-lock-method-call-face
    '((t . (:foreground "NavajoWhite2")))
    "Face to display method calls in.")
  (font-lock-add-keywords 'c++-mode
                          `((,(concat
                               "\\<[_a-zA-Z][_a-zA-Z0-9]*\\>"       ; Object identifier
                               "\\s *"                              ; Optional white space
                               "\\(?:\\.\\|->\\)"                   ; Member access
                               "\\s *"                              ; Optional white space
                               "\\<\\([_a-zA-Z][_a-zA-Z0-9]*\\)\\>" ; Member identifier
                               "\\s *"                              ; Optional white space
                               "(")                                 ; Paren for method invocation
                             1 'font-lock-method-call-face t)))
#+end_src

**** No indentation within namespace block

   #+BEGIN_SRC emacs-lisp
     (defun qq/c-setup ()
       (modern-c++-font-lock-global-mode t)
       (c-set-offset 'innamespace [0]))
     (add-hook 'c++-mode-hook 'qq/c-setup)
   #+END_SRC

**** Automatically adding object name
   From http://oremacs.com/2015/01/15/c++-smart-dot/

   #+BEGIN_SRC emacs-lisp
     (defconst c++-var-regex "[A-Za-z][A-Za-z0-9_]*"
       "The regex for C++ variable name.")

     (defun c++-get-recent-var ()
       "Return the closest thing that looks like an object.
     The search is performed backwards through code."
       (save-excursion
         (when (or
                ;; variable dot chain
                (looking-back
                 (format " \\(%s\\)\\.%s.*\n[\t ]*"
                         c++-var-regex
                         c++-var-regex))
                ;; variable constructor init
                (looking-back
                 (format "[\t ]+\\(%s\\)\\(?:([^)]*)\\)?;[\t\n ]*"
                         c++-var-regex))
                ;; variable dot, first on line
                (re-search-backward
                 (format "^[ \t]*\\(%s\\)\\." c++-var-regex) nil t))
           (match-string-no-properties 1))))

     (defun c++-smart-dot ()
       "Insert a dot or an object name plus dot when appropriate."
       (interactive)
       (let (var-name)
         (if (and (looking-back "^[ \t]*")
                  (setq var-name (c++-get-recent-var)))
             (insert var-name ".")
           (insert "."))))
     (eval-after-load "cc-mode"
       `(define-key c++-mode-map "." 'c++-smart-dot))
   #+END_SRC

*** Java
Some statements in Java appear often, and become tedious to write
out. We can use abbrevs to speed this up.

#+BEGIN_SRC emacs-lisp
  (define-abbrev-table 'java-mode-abbrev-table
    '(("psv" "public static void main(String[] args) {" nil 0)
      ("sopl" "System.out.println" nil 0)
      ("sop" "System.out.printf" nil 0)))
#+END_SRC

To be able to use the abbrev table defined above, =abbrev-mode= must be
activated.

#+BEGIN_SRC emacs-lisp
  (defun java-setup ()
    (abbrev-mode t)
    (setq-local compile-command (concat "javac " (buffer-name))))

  (add-hook 'java-mode-hook 'java-setup)
#+END_SRC

*** Objective-C
Associate =.mm=-files with =objc-mode= instead of =nroff-mode=.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.mm\\'" . objc-mode))
#+END_SRC

*** Yaml
Associate =.mm=-files with =objc-mode= instead of =nroff-mode=.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
#+END_SRC

*** Keybinding
    :PROPERTIES:
    :CUSTOM_ID: evil-cc-mode-binding
    :END:
   #+TBLNAME: cc_mode_keys
      | Combo   | Mode            | Evil Mode | Description | Command                        |
      | RET     | c-mode-base-map | insert    |             | 'newline-and-indent            |
      | C-S-f   | c-mode-base-map | visual    |             | 'clang-format-region           |
      | C-c C-c | c-mode-base-map | normal    |             | 'qq/c-mode-compile             |
      | C-c C-r | c-mode-base-map | normal    |             | 'qq/c-mode-compile-set-command |
**** Links: [[Evil CC Mode Bindings][Evil CC Mode Bindings]]                                     :ignore:
** Lisp

   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
     (add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
   #+END_SRC

** Web/CSS/Javascript/Json
*** Hooks
   #+BEGIN_SRC emacs-lisp
     (add-hook 'css-mode-hook 'prettier-js-mode)
     (add-hook 'js2-mode-hook 'prettier-js-mode)
     (add-hook 'web-mode-hook 'prettier-js-mode)
   #+END_SRC

*** Settings
   #+BEGIN_SRC emacs-lisp
     (setq auto-mode-alist (cons '("\\.js$"   . js2-mode) auto-mode-alist))
     (setq auto-mode-alist (cons '("\\.jsx$" . rjsx-mode) auto-mode-alist))
     (setq auto-mode-alist (cons '("\\.json$" . json-mode) auto-mode-alist))
     (after 'css-mode
       (css-indent-offset 2))
     (after 'js2-mode
       (setq js-indent-level 2
             js-switch-indent-offset 2
             js2-highlight-level 3
             js2-idle-timer-delay 0
             js2-mode-show-parse-errors nil
             js2-mode-show-strict-warnings nil))
   #+END_SRC

** Markdown
*** Turn off =electric-indent-mode= in markdown buffers
=electric-indent-mode= has a bad interaction with =markdown-mode=, so we disable it in markdown buffers only.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'markdown-mode-hook
               (apply-partially #'electric-indent-local-mode 0))
   #+END_SRC

** Python
*** Default Python interpreter
   #+BEGIN_SRC emacs-lisp
     (setq python-shell-interpreter "python3")
   #+END_SRC

*** Make electric-indent-mode and python-mode play nice
   #+BEGIN_SRC emacs-lisp
     (defun python-newline-and-indent ()
       "Custom python indentation function.

       This works like normal, except that if point is in the
       indentation of the current line, the newly created line will
       not be indented any further than the current line. This fixes
       the annoying tendency of python-mode to always indent to the
       maximum possible indentation level on every new line."
       (interactive)
       (let* ((starting-column (current-column))
              (starting-indentation (current-indentation))
              (started-in-indentation (<= starting-column starting-indentation)))
         (newline-and-indent)
         (when (and started-in-indentation
                    (> (current-indentation) starting-indentation))
           (save-excursion
             (back-to-indentation)
             (delete-region (point) (progn (forward-line 0) (point)))
             (indent-to-column starting-indentation))
           (back-to-indentation))))
     (define-key python-mode-map (kbd "RET") #'python-newline-and-indent)
     (defun turn-off-electric-indent-local-mode ()
       (electric-indent-local-mode 0))
     (add-hook 'python-mode-hook #'turn-off-electric-indent-local-mode)
   #+END_SRC
** Sh-Mode
*** Make scripts executable on save
If a file begins with a shebang (i.e. “#!”), make it executable after saving it.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-save-hook
               'executable-make-buffer-file-executable-if-script-p)
   #+END_SRC
*** Associate .zsh files with zshell in =sh-mode=
   Emacs sh-mode doesn’t automatically associate *.zsh with zsh. This enables that. It also enables it for a few other zsh-related files.

   #+BEGIN_SRC emacs-lisp
     (autoload 'sh-set-shell "sh-script.el" nil t)
     ;; Files ending in .zsh
     (add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))
     ;; zsh startup files
     (add-to-list 'auto-mode-alist '("\\.\\(zshrc\\|zshenv\\|zprofile\\|zlogin\\|zlogout\\)\\>" . sh-mode))
     ;; Ensure that sh-mode uses zsh as shell for these files
     (defun sh-mode-set-zsh-by-file-name ()
       (when (and buffer-file-name
                  (string-match-p "\\.zsh\\(rc\\|env\\|\\'\\)" buffer-file-name))
         (sh-set-shell "zsh")))
     (add-hook 'sh-mode-hook 'sh-mode-set-zsh-by-file-name)
   #+END_SRC
** NXML
*** To have files automatically loaded with nxml-mode with various file extensions

   [[https://www.emacswiki.org/emacs/NxmlMode]]

   #+BEGIN_SRC emacs-lisp
     (require 'nxml-mode)

     (add-to-list 'auto-mode-alist
                  (cons (concat "\\." (regexp-opt '("xml" "xsd" "sch" "rng" "xslt" "svg" "rss") t) "\\'")
                        'nxml-mode))

     ;(unify-8859-on-decoding-mode)

     (fset 'xml-mode 'nxml-mode)
     (fset 'html-mode 'nxml-mode)
     (require 'rng-loc nil t)
   #+END_SRC

*** Settings

   #+BEGIN_SRC emacs-lisp
     (add-hook 'nxml-mode-hook
               (lambda ()
                 (display-line-numbers-mode)
                 ;(qq/set-font-to-fixed-width)
                 (setq auto-fill-mode -1)
                 (setq nxml-slash-auto-complete-flag t)      ; auto-complete the closing tag at the input of the slash
                 (setq nxml-child-indent 2)                  ; tag indentation
                 (setq nxml-attribute-indent 4)              ; attributes of the indentation width
                 (setq indent-tabs-mode t)
                 (setq nxml-bind-meta-tab-to-complete-flag t)
                 (setq nxml-slash-auto-complete-flag t)      ; </ of complementing the closing tag at the input
                 (setq nxml-sexp-element-flag t)             ; to kill the entire element, including the subordinate in CMk
                 (setq nxml-char-ref-display-glyph-flag nil) ; glyph is hidden
                 (setq tab-width 4)
                 ))
   #+END_SRC

*** Pretty printing xml region

   [[https://sinewalker.wordpress.com/2008/06/26/pretty-printing-xml-with-emacs-nxml-mode/]]

   #+BEGIN_SRC emacs-lisp
     (defun qq-pp-xml-region (begin end)
       "Pretty format XML markup in region. The function inserts linebreaks
     to separate tags that have nothing but whitespace between them.  It
     then indents the markup by using nxml's indentation rules."
       (interactive "r")
       (save-excursion
           (nxml-mode)
           (goto-char begin)
           (while (search-forward-regexp "\>[ \\t]*\<" nil t)
             (backward-char) (insert "\n"))
           (indent-region begin end)))
   #+END_SRC

*** Where am I?
   To show current xpath in echo area, use the following function:

   #+BEGIN_SRC emacs-lisp
     (defun nxml-where ()
       "Display the hierarchy of XML elements the point is on as a
     path. from http://www.emacswiki.org/emacs/NxmlMode"
       (interactive)
       (let ((path nil))
         (save-excursion
           (save-restriction
             (widen)
             (while
                 (and (< (point-min) (point)) ;; Doesn't error if point is at
                      ;; beginning of buffer
                      (condition-case nil
                          (progn
                            (nxml-backward-up-element) ; always returns nil
                            t)
                        (error nil)))
               (setq path (cons (xmltok-start-tag-local-name) path)))
             (if (called-interactively-p t)
                 (message "/%s" (mapconcat 'identity path "/"))
               (format "/%s" (mapconcat 'identity path "/")))))))
   #+END_SRC

*** Folding with HideShow

   [[http://stackoverflow.com/questions/944614/emacs-does-hideshow-work-with-xml-mode-sgml-mode]]

   #+BEGIN_SRC emacs-lisp
     (autoload 'hs-show-block "hideshow.el" nil t)
     (autoload 'hs-hide-level "hideshow.el" nil t)
     (add-to-list 'hs-special-modes-alist
                  '(nxml-mode
                    "<!--\\|<[^/>]*[^/]>" ;; regexp for start block
                    "-->\\|</[^/>]*[^/]>" ;; regexp for end block
                    "<!--"
                    nxml-forward-element
                    nil))
     (add-hook 'nxml-mode-hook 'hs-minor-mode)

     ;; optional key bindings, easier than hs defaults
     (defun lgfang-toggle-level ()
       "mainly to be used in nxml mode"
       (interactive) (hs-show-block) (hs-hide-level 1))
     (eval-after-load "nxml-mode"
       '(progn
          (define-key nxml-mode-map (kbd "C-m") 'lgfang-toggle-level)
          (define-key nxml-mode-map [mouse-3] 'lgfang-toggle-level)))
   #+END_SRC
*** Enable nxml-mode when the user starts typing an xml document

   #+BEGIN_SRC emacs-lisp
     (setq magic-mode-alist
           (cons '("<\\?xml " . nxml-mode)
                magic-mode-alist))
   #+END_SRC

*** Rebind '>', so that it automatically inserts a closing xml tag (if appropriate)

   #+BEGIN_SRC emacs-lisp
     (defun qq/nxml-end-tag ()
       (interactive)
       (if (eq (face-at-point) 'default)
           (condition-case nil
               (nxml-balanced-close-start-tag-inline)
             (error
              (insert ">")))
         (insert ">")))

     (add-hook 'nxml-mode-hook
               (lambda ()
                 ;; rebind > to close the current tag
                 (define-key nxml-mode-map ">" 'qq/nxml-end-tag)))
   #+END_SRC

*** Color scheme

   #+BEGIN_SRC emacs-lisp
     ; (set-face-foreground 'nxml-attribute-local-name-face "#3387cc")
     ; (set-face-foreground 'nxml-attribute-colon-face "#e28964")
     ; (set-face-foreground 'nxml-attribute-prefix-face "#cf6a4c")
     ; (set-face-foreground 'nxml-attribute-value-face "#65b042")
     ; (set-face-foreground 'nxml-attribute-value-delimiter-face "#99cf50")
     ; (set-face-foreground 'nxml-namespace-attribute-prefix-face "#9b859d")
     ; (set-face-foreground 'nxml-comment-content-face "#666")
     ; (set-face-foreground 'nxml-comment-delimiter-face "#333")
     ; (set-face-foreground 'nxml-element-local-name-face "#e9c062")
     ; (set-face-foreground 'nxml-markup-declaration-delimiter-face "#aeaeae")
     ; (set-face-foreground 'nxml-namespace-attribute-xmlns-face "#8b98ab")
     ; (set-face-foreground 'nxml-prolog-keyword-face "#c5af75")
     ; (set-face-foreground 'nxml-prolog-literal-content-face "#dad085")
     ; (set-face-foreground 'nxml-tag-delimiter-face "#cda869")
     ; (set-face-foreground 'nxml-tag-slash-face "#cda869")
     ; (set-face-foreground 'nxml-text-face "#ddd")
   #+END_SRC

* Recipes
** Add =sort-words= command
Emacs has a command to sort lines, but not to sort words in a region
   #+BEGIN_SRC emacs-lisp
     (defun sort-words (reverse beg end)
       "Sort words in region alphabetically, in REVERSE if negative.
     Prefixed with negative \\[universal-argument], sorts in reverse.

     The variable `sort-fold-case' determines whether alphabetic case
     affects the sort order.

     See `sort-regexp-fields'."
       (interactive "*P\nr")
       (sort-regexp-fields reverse "\\w+" "\\&" beg end))
  #+END_SRC
** Switch to Editing a File with SUDO
   Taken from [[http://irreal.org/blog/?p=4883][here]]

   #+BEGIN_SRC emacs-lisp
     (defun qq/find-file-as-sudo ()
       (interactive)
       (let ((file-name (buffer-file-name)))
         (when file-name
           (find-alternate-file (concat "/sudo::" file-name)))))
   #+END_SRC

** unfill-paragraph function
   Unfilling  a paragraph joins all the lines in a paragraph into a single line.

   [[https://www.emacswiki.org/emacs/UnfillParagraph]]

   #+BEGIN_SRC emacs-lisp
     ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
     (defun qq/unfill-paragraph ()
       "Takes a multi-line paragraph and makes it into a single line of text."
       (interactive)
       (let ((fill-column (point-max)))
         (fill-paragraph nil)))
   #+END_SRC

** Coloring regions with ANSI color codes
[[http://unix.stackexchange.com/a/19505/57923]]

   #+BEGIN_SRC emacs-lisp
     (defun ansi-color-apply-on-region-int (beg end)
       "Colorize using the ANSI color codes."
       (interactive "r")
       (ansi-color-apply-on-region beg end))
   #+END_SRC

** Diff two regions
   Step 1: Select a region and `M-x diff-region-tag-selected-as-a'
   Step 2: Select another region and `M-x diff-region-compare-with-b'

   #+BEGIN_SRC emacs-lisp
     (defun diff-region-format-region-boundary (b e)
       "Make sure lines are selected and B is less than E"
       (let (tmp rlt)
         ;; swap b e, make sure b < e
         (when (> b e)
           (setq tmp b)
           (setq b e)
           (set e tmp))

         ;; select lines
         (save-excursion
           ;; Another workaround for evil-visual-line bug:
           ;; In evil-mode, if we use hotkey V or `M-x evil-visual-line` to select line,
           ;; the (line-beginning-position) of the line which is after the last selected
           ;; line is always (region-end)! Don't know why.
           (if (and (> e b)
                    (save-excursion (goto-char e) (= e (line-beginning-position)))
                    (boundp 'evil-state) (eq evil-state 'visual))
               (setq e (1- e)))
           (goto-char b)
           (setq b (line-beginning-position))
           (goto-char e)
           (setq e (line-end-position)))
         (setq rlt (list b e))
         rlt))

     (defun diff-region-tag-selected-as-a ()
       "Select a region to compare"
       (interactive)
       (when (region-active-p)
         (let (tmp buf)
           ;; select lines
           (setq tmp (diff-region-format-region-boundary (region-beginning) (region-end)))
           (setq buf (get-buffer-create "*Diff-regionA*"))
           (save-current-buffer
             (set-buffer buf)
             (erase-buffer))
           (append-to-buffer buf (car tmp) (cadr tmp))))
       (message "Now select other region to compare and run `diff-region-compare-with-b`"))

     (defun diff-region-compare-with-b ()
       "Compare current region with region selected by `diff-region-tag-selected-as-a' "
       (interactive)
       (if (region-active-p)
           (let (rlt-buf
                 diff-output
                 (fa (make-temp-file (expand-file-name "scor"
                                                       (or small-temporary-file-directory
                                                           temporary-file-directory))))
                 (fb (make-temp-file (expand-file-name "scor"
                                                       (or small-temporary-file-directory
                                                           temporary-file-directory)))))
             ;;  save current content as file B
             (when fb
               (setq tmp (diff-region-format-region-boundary (region-beginning) (region-end)))
               (write-region (car tmp) (cadr tmp) fb))

             (setq rlt-buf (get-buffer-create "*Diff-region-output*"))
             (when (and fa (file-exists-p fa) fb (file-exists-p fb))
               ;; save region A as file A
               (save-current-buffer
                 (set-buffer (get-buffer-create "*Diff-regionA*"))
                 (write-region (point-min) (point-max) fa))
               ;; diff NOW!
               (setq diff-output (shell-command-to-string (format "diff -Nabur %s %s" fa fb)))
               ;; show the diff output
               (if (string= diff-output "")
                   ;; two regions are same
                   (message "Two regions are SAME!")
                 ;; show the diff
                 (save-current-buffer
                   (switch-to-buffer-other-window rlt-buf)
                   (set-buffer rlt-buf)
                   (erase-buffer)
                   (insert diff-output)
                   (diff-mode))))

             ;; clean the temporary files
             (if (and fa (file-exists-p fa))
                 (delete-file fa))
             (if (and fb (file-exists-p fb))
                 (delete-file fb)))
         (message "Please select region at first!")))
   #+END_SRC
** Narrow or widen region
   See [[https://gist.github.com/mwfogleman/95cc60c87a9323876c6c]]

   #+BEGIN_SRC emacs-lisp
     (defun narrow-or-widen-dwim ()
       "If the buffer is narrowed, it widens. Otherwise, it narrows to region, or Org subtree."
       (interactive)
       (cond ((buffer-narrowed-p) (widen))
             ((region-active-p) (narrow-to-region (region-beginning) (region-end)))
             ((equal major-mode 'org-mode) (org-narrow-to-subtree))
             (t (error "Please select a region to narrow to"))))
   #+END_SRC
** Open the =init.org= file

   #+BEGIN_SRC emacs-lisp
     (defun qq/open-init-config ()
       "Opens the configuration file from anywhere"
       (interactive)
       (find-file (concat user-emacs-directory "init.org")))
   #+END_SRC
** Abort minibuffer when it lose focus

   #+BEGIN_SRC emacs-lisp
     (defun stop-using-minibuffer ()
       "kill the minibuffer"
       (when (and (>= (recursion-depth) 1) (active-minibuffer-window))
         (abort-recursive-edit)))

     (add-hook 'mouse-leave-buffer-hook 'stop-using-minibuffer)
   #+END_SRC

** Show current buffer full path in minibuffer

   #+BEGIN_SRC emacs-lisp
     (defun qq/show-file-name ()
       "Show the full path file name in the minibuffer."
       (interactive)
       (message (buffer-file-name)))
   #+END_SRC
** Inline PlantUML image

   #+BEGIN_SRC emacs-lisp
     (require 'iimage)
     (autoload 'iimage-mode "iimage" "Support Inline image minor mode." t)
     (autoload 'turn-on-iimage-mode "iimage" "Turn on Inline image minor mode." t)
     (add-to-list 'iimage-mode-image-regex-alist '("@startuml\s+\\(.+\\)" . 1))

     ;; Rendering plantuml
     (defun plantuml-render-buffer ()
       (interactive)
       (message "PLANTUML Start rendering")
       (shell-command (concat "java -jar " org-plantuml-jar-path " "
                              buffer-file-name))
       (message (concat "PLANTUML Rendered:  " (buffer-name))))

     ;; Image reloading
     (defun reload-image-at-point ()
       (interactive)
       (message "reloading image at point in the current buffer...")
       (image-refresh (get-text-property (point) 'display)))

     ;; Image resizing and reloading
     (defun resize-image-at-point ()
       (interactive)
       (message "resizing image at point in the current buffer123...")
       (let* ((image-spec (get-text-property (point) 'display))
              (file (cadr (member :file image-spec))))
         (message (concat "resizing image..." file))
         (shell-command (format "convert -resize %d %s %s "
                                (* (window-width (selected-window)) (frame-char-width))
                                file file))
         (reload-image-at-point)))
   #+END_SRC

** Aligning Columns
https://blog.lambda.cx/posts/emacs-align-columns/

   #+BEGIN_SRC emacs-lisp
     (defun align-non-space (BEG END)
       "Align non-space columns in region BEG END."
       (interactive "r")
       (align-regexp BEG END "\\(\\s-*\\)\\S-+" 1 1 t))
   #+END_SRC

 Let's walk through what's going on here.

1. BEG and END are the beginning and end positions of the area to be aligned
2. (interactive "r") tells Emacs that the function is interactive, meaning that
   it can be called from the M-x menu
   - "r" tells Emacs that when the function is called interactively, it expects
      a region (beginning and end points) as arguments
3. align-regexp where the work is happening. This function has the following
    signature.

    =(align-regexp BEG END REGEXP &optional GROUP SPACING REPEAT)=

   + BEG and END is the region that it expects as the first arguments
   + "\\(\\s-*\\)\\S-+" is an Emacs regular expression. Backslashes are doubled because they need to be escaped in a string literal
       + \( \) is a capture group
       + \s- is a regular expression construct specific to Emacs which specifies a type of syntax which is to be matched.
           + - refers to the whitespace characters
       + * means match zero or more
            \S- is similar to the previous construct, but instead means to match anything other than whitespace
       + =+= means one or more
   + 1 here refers to the group within the regex that will be modified to align the fields
   + 1 is the number of spaces between fields once aligned
   + t indicates to repeat the rule multiple times on the same line

To use this function, simply highlight a region you want to align and run M-x align-non-space.
** KeyBindings
    :PROPERTIES:
    :CUSTOM_ID: recipes-binding
    :END:
   #+TBLNAME: recipes_keys
      | Combo   | Description                        | Command               |
      |---------+------------------------------------+-----------------------|
      | C-x C-v | Switch to Editing a File with SUDO | 'qq/find-file-as-sudo |
**** Links: [[Recipes Bindings][Recipes Bindings]]                                     :ignore:
* Bindings :noexport:
   Generate all the bindings here.
** Setup
   #+BEGIN_SRC emacs-lisp
     (require 'general)
     (general-evil-setup t)
   #+END_SRC
*** Leader key
   #+BEGIN_SRC emacs-lisp
     (general-create-definer qq-leader-def
       :prefix "SPC"
       :global-prefix "C-SPC")
   #+END_SRC
*** Macros
   #+name: gen_emacs
   #+begin_src emacs-lisp :tangle no
     (general-define-key
      :keymaps 'override
   #+end_src

   #+name: leader_normal
   #+begin_src emacs-lisp :tangle no
     (qq-leader-def
     :keymaps 'normal
   #+end_src

   #+name: leader_visual
   #+begin_src emacs-lisp :tangle no
     (qq-leader-def
     :keymaps 'visual
   #+end_src

   #+name: gen_normal
   #+begin_src emacs-lisp :tangle no
    (general-def 'normal
   #+end_src

   #+name: gen_motion
   #+begin_src emacs-lisp :tangle no
    (general-def 'motion
   #+end_src

   #+name: gen_visual
   #+begin_src emacs-lisp :tangle no
    (general-def 'visual
   #+end_src

** Basic Bindings
   Generate binding using table from [[#default-key-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen_emacs>>
     <<gen-keys(moda="lead", tname=std_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC
** Vterm Bindings
   Generate binding using table from [[#global-vterm-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pre="general-define-key\n :keymaps 'vterm-mode-map")>>
     <<gen-keys(moda="lead", tname=vterm_mode_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC
** Evil Bindings
*** Start
   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pre="after 'evil")>>
   #+END_SRC

*** Evil Global Bindings
   Generate binding using table from [[#evil-global-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen_emacs>>
     <<gen-keys(moda="lead", tname=evil_global_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

*** Evil Normal Bindings
   Generate binding using table from [[#evil-normal-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen_normal>>
     <<gen-keys(moda="lead", tname=evil_std_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

*** Evil Motion Bindings
   Generate binding using table from [[#evil-motion-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen_motion>>
     <<gen-keys(moda="lead", tname=evil_motion_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

*** Evil Visual Bindings
   Generate binding using table from [[#evil-visual-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen_visual>>
     <<gen-keys(moda="lead", tname=evil_visual_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

*** Evil Ex Bindings
   Generate binding using table from [[#evil-ex-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(moda="xvil", tname=evil_ex_keys)>>
   #+END_SRC

*** Evil BS Bindings
   Generate binding using table from [[#evil-bs-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pre="general-define-key\n :states 'normal\n :keymaps 'bs-mode-map")>>
     <<gen-keys(moda="lead", tname=evil_bs_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

*** Normal Leader Bindings
**** Start
   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<leader_normal>>
   #+END_SRC

**** Evil Leader Bindings
Generate binding using table from [[#evil-leader-binding][here]]
   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(moda="lead", tname=evil_leader_keys)>>
   #+END_SRC
**** Evil Magit Bindings
   Generate binding using table from [[#evil-magit-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(moda="lead", tname=evil_magit_keys)>>
   #+END_SRC

**** Normal Selectrum Bindings
   Generate binding using table from [[#normal-selectrum-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(moda="lead", tname=normal_selectrum_keys)>>
   #+END_SRC

**** Normal LSP Bindings
   Generate binding using table from [[#normal-lsp-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(moda="lead", tname=normal_lsp_keys)>>
   #+END_SRC

**** End
   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pos=")\n")>>
   #+END_SRC

*** Visual Leader Bindings
**** Start
   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<leader_visual>>
   #+END_SRC

**** Visual Selectrum Bindings
   Generate binding using table from [[#visual-selectrum-binding][here]]
   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(moda="lead", tname=visual_selectrum_keys)>>
   #+END_SRC
**** End
   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pos=")\n")>>
   #+END_SRC

*** Evil iBuffer Bindings
   Generate binding using table from [[#evil-ibuffer-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pre="general-define-key\n :states 'normal\n :keymaps 'ibuffer-mode-map")>>
     <<gen-keys(moda="lead", tname=evil_ibuffer_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

*** Evil Projectile Bindings
   Generate binding using table from [[#evil-projectile-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pre="after 'projectile")>>
     <<leader_normal>>
     <<gen-keys(moda="lead", tname=evil_projectile_keys)>>
     <<gen-fix(pos="))\n")>>
   #+END_SRC

*** Evil CC Mode Bindings
   Generate binding using table from [[#evil-cc-mode-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(moda="evil", tname=cc_mode_keys)>>
   #+END_SRC

*** Evil Ag Bindings
   Generate binding using table from [[#evil-ag-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pre="add-hook 'ag-mode-hook\n(lambda()")>>
     <<gen-keys(moda="evil", tname=evil_ag_keys)>>
     <<gen-fix(pos="))\n")>>
   #+END_SRC

*** Evil Dired Bindings
   Generate binding using table from [[#evil-dired-binding][here]]

    #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pre="add-hook 'dired-mode-hook\n(lambda()")>>
     <<gen-keys(moda="evil", tname=evil_dired_keys)>>
     <<gen-keys(mmap="t", tname=dired-keys)>>
     <<gen-fix(pos="))\n")>>
    #+END_SRC

*** Evil Org Bindings
   Generate binding using table from [[#evil-org-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(moda="evil", tname=evil_org_keys)>>
   #+END_SRC

*** End
   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pos=")\n")>>
   #+END_SRC

** Compilation Buffer Map Bindings
   Generate binding using table from  [[evil-compile-bufer][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pre="general-define-key\n :states 'normal\n :keymaps 'compilation-mode-map")>>
     <<gen-keys(moda="lead", tname=evil_compile_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

** Selectrum Map Bindings
   Generate binding using table from [[#selectrum-map-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pre="general-define-key\n :states 'insert\n :keymaps 'selectrum-minibuffer-map")>>
     <<gen-keys(moda="lead", tname=selectrum_map_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

** PDFTools Bindings
   Binding code generation for [[#pdftools-bindings][this]] table

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :result silent
     <<gen-fix(pre="add-hook 'pdf-view-mode-hook\n(lambda()")>>
     <<gen-keys(moda="evil", tname=pdftools-evil-keys)>>
     <<gen-keys(mmap="t", tname=pdftools-keys)>>
     <<gen-fix(pos="))\n")>>
   #+END_SRC

** Persp-mode Bindings
   Binding code generation for [[#persp-key-binding][this]] table

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :result silent
     <<gen-keys(tname=persp_combo)>>
   #+END_SRC

** Org Mode Bindings
   =org_keys= table is [[#orgmode-key-binding][here]].

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(tname=org_keys)>>
   #+END_SRC

** Recipes Bindings
   =recipes_keys= table is [[#recipes-binding][here]].

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-keys(tname=recipes_keys)>>
   #+END_SRC

** Company Bindings
   Binding code generation for [[#company-binding][this]] table

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :result silent
     <<gen-fix(pre="general-define-key\n :keymaps 'company-active-map")>>
     <<gen-keys(moda="lead", tname=company_keys)>>
     <<gen-fix(pos=")\n")>>
   #+END_SRC

** Undo-tree Bindings
   Generate binding using table from [[#undo-tree-binding][here]]

   #+BEGIN_SRC emacs-lisp :exports none :noweb yes :results silent
     <<gen-fix(pre="eval-after-load 'undo-tree\n'(with-no-warnings\n(general-define-key\n :states 'normal\n :keymaps 'undo-tree-visualizer-mode-map")>>
     <<gen-keys(moda="lead", tname=undo_tree_keys)>>
     <<gen-fix(pos=")))\n")>>
   #+END_SRC
